
BNO055_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004bc0  08004bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c4c  08004c4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c54  08004c54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08004ccc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004ccc  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f839  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec3  00000000  00000000  0002f8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  000317a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  000323e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da81  00000000  00000000  00032f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc49  00000000  00000000  000509d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba3cd  00000000  00000000  00060622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a9ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003780  00000000  00000000  0011aa40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004ba8 	.word	0x08004ba8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004ba8 	.word	0x08004ba8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e16:	f000 fb5a 	bl	80014ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1a:	f000 f8ad 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1e:	f000 f983 	bl	8001128 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e22:	f000 f935 	bl	8001090 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e26:	f000 f8f3 	bl	8001010 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  buf[0] = ACC_DATA_X_MSB; // tell BNO055 we want to read LSB from ACC Data
 8000e2a:	2309      	movs	r3, #9
 8000e2c:	703b      	strb	r3, [r7, #0]
	  buf[1] = ACC_DATA_X_LSB; // tell BNO055 we want to read MSB from ACC Data
 8000e2e:	2308      	movs	r3, #8
 8000e30:	707b      	strb	r3, [r7, #1]

	  ret = HAL_I2C_Master_Transmit(&hi2c1, BNO055_ADDR, buf, 1, 100);  // the timeout is 100 ms
 8000e32:	2328      	movs	r3, #40	; 0x28
 8000e34:	b299      	uxth	r1, r3
 8000e36:	463a      	mov	r2, r7
 8000e38:	2364      	movs	r3, #100	; 0x64
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	4846      	ldr	r0, [pc, #280]	; (8000f58 <main+0x148>)
 8000e40:	f000 fee6 	bl	8001c10 <HAL_I2C_Master_Transmit>
 8000e44:	4603      	mov	r3, r0
 8000e46:	757b      	strb	r3, [r7, #21]

	  if (ret!=HAL_OK){
 8000e48:	7d7b      	ldrb	r3, [r7, #21]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d008      	beq.n	8000e60 <main+0x50>
		  strcpy((char*)buf, "Error Rx\r\n");
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4a42      	ldr	r2, [pc, #264]	; (8000f5c <main+0x14c>)
 8000e52:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e54:	c303      	stmia	r3!, {r0, r1}
 8000e56:	801a      	strh	r2, [r3, #0]
 8000e58:	3302      	adds	r3, #2
 8000e5a:	0c12      	lsrs	r2, r2, #16
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e069      	b.n	8000f34 <main+0x124>
	  } else{

		  ret = HAL_I2C_Master_Receive(&hi2c1, BNO055_ADDR, buf, 2, 100); // Receive 2 bytes of data
 8000e60:	2328      	movs	r3, #40	; 0x28
 8000e62:	b299      	uxth	r1, r3
 8000e64:	463a      	mov	r2, r7
 8000e66:	2364      	movs	r3, #100	; 0x64
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	483a      	ldr	r0, [pc, #232]	; (8000f58 <main+0x148>)
 8000e6e:	f000 ffc3 	bl	8001df8 <HAL_I2C_Master_Receive>
 8000e72:	4603      	mov	r3, r0
 8000e74:	757b      	strb	r3, [r7, #21]

		  if (ret!=HAL_OK){
 8000e76:	7d7b      	ldrb	r3, [r7, #21]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d008      	beq.n	8000e8e <main+0x7e>
			  strcpy((char*)buf, "Error Rx\r\n");
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	4a37      	ldr	r2, [pc, #220]	; (8000f5c <main+0x14c>)
 8000e80:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e82:	c303      	stmia	r3!, {r0, r1}
 8000e84:	801a      	strh	r2, [r3, #0]
 8000e86:	3302      	adds	r3, #2
 8000e88:	0c12      	lsrs	r2, r2, #16
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	e052      	b.n	8000f34 <main+0x124>

		  } else{
			  //Combine the two bytes received
			  val = ((int8_t)buf[0] << 8 | (int8_t)buf[1]);
 8000e8e:	783b      	ldrb	r3, [r7, #0]
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	787b      	ldrb	r3, [r7, #1]
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	82fb      	strh	r3, [r7, #22]

			  if ( val > 0x7FF ) { // something to do with accounting for negative values
 8000ea0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ea8:	db05      	blt.n	8000eb6 <main+0xa6>
			            val |= 0xF000;
 8000eaa:	8afb      	ldrh	r3, [r7, #22]
 8000eac:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000eb0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000eb4:	82fb      	strh	r3, [r7, #22]
			  }

			  // convert to float
			  xData = (val / pow(14,2))*4;
 8000eb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fb5a 	bl	8000574 <__aeabi_i2d>
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <main+0x150>)
 8000ec6:	f7ff fce9 	bl	800089c <__aeabi_ddiv>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <main+0x154>)
 8000ed8:	f7ff fbb6 	bl	8000648 <__aeabi_dmul>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f7ff fdc2 	bl	8000a6c <__aeabi_d2f>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	613b      	str	r3, [r7, #16]

			  xData *= 100;
 8000eec:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ef0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000f68 <main+0x158>
 8000ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef8:	edc7 7a04 	vstr	s15, [r7, #16]
			          sprintf((char*)buf,
			                "%u.%u C\r\n",
			                ((unsigned int)xData / 100),
 8000efc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f04:	ee17 2a90 	vmov	r2, s15
			          sprintf((char*)buf,
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <main+0x15c>)
 8000f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8000f0e:	095a      	lsrs	r2, r3, #5
			                ((unsigned int)xData % 100));
 8000f10:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f18:	ee17 1a90 	vmov	r1, s15
			          sprintf((char*)buf,
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <main+0x15c>)
 8000f1e:	fba3 0301 	umull	r0, r3, r3, r1
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2064      	movs	r0, #100	; 0x64
 8000f26:	fb00 f303 	mul.w	r3, r0, r3
 8000f2a:	1acb      	subs	r3, r1, r3
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	4910      	ldr	r1, [pc, #64]	; (8000f70 <main+0x160>)
 8000f30:	f003 f9cc 	bl	80042cc <siprintf>

		  }

	  }

	    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000f34:	463b      	mov	r3, r7
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff f972 	bl	8000220 <strlen>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4639      	mov	r1, r7
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f46:	480b      	ldr	r0, [pc, #44]	; (8000f74 <main+0x164>)
 8000f48:	f002 fb74 	bl	8003634 <HAL_UART_Transmit>
	    HAL_Delay(1000); // 1 second delay
 8000f4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f50:	f000 fb2e 	bl	80015b0 <HAL_Delay>
	  buf[0] = ACC_DATA_X_MSB; // tell BNO055 we want to read LSB from ACC Data
 8000f54:	e769      	b.n	8000e2a <main+0x1a>
 8000f56:	bf00      	nop
 8000f58:	2000008c 	.word	0x2000008c
 8000f5c:	08004bc0 	.word	0x08004bc0
 8000f60:	40688000 	.word	0x40688000
 8000f64:	40100000 	.word	0x40100000
 8000f68:	42c80000 	.word	0x42c80000
 8000f6c:	51eb851f 	.word	0x51eb851f
 8000f70:	08004bcc 	.word	0x08004bcc
 8000f74:	200000d8 	.word	0x200000d8

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	; 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	2238      	movs	r2, #56	; 0x38
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 f998 	bl	80042bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f001 fb32 	bl	8002604 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000faa:	2340      	movs	r3, #64	; 0x40
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fba:	2355      	movs	r3, #85	; 0x55
 8000fbc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 0318 	add.w	r3, r7, #24
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fbbc 	bl	800274c <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fda:	f000 f8e5 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	230f      	movs	r3, #15
 8000fe0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fec0 	bl	8002d7c <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001002:	f000 f8d1 	bl	80011a8 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	; 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_I2C1_Init+0x74>)
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <MX_I2C1_Init+0x78>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_I2C1_Init+0x74>)
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <MX_I2C1_Init+0x7c>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_I2C1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_I2C1_Init+0x74>)
 8001028:	2201      	movs	r2, #1
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_I2C1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_I2C1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_I2C1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_I2C1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <MX_I2C1_Init+0x74>)
 800104c:	f000 fd50 	bl	8001af0 <HAL_I2C_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001056:	f000 f8a7 	bl	80011a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <MX_I2C1_Init+0x74>)
 800105e:	f001 fa39 	bl	80024d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001068:	f000 f89e 	bl	80011a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800106c:	2100      	movs	r1, #0
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_I2C1_Init+0x74>)
 8001070:	f001 fa7b 	bl	800256a <HAL_I2CEx_ConfigDigitalFilter>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107a:	f000 f895 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000008c 	.word	0x2000008c
 8001088:	40005400 	.word	0x40005400
 800108c:	30a0a7fb 	.word	0x30a0a7fb

08001090 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <MX_USART2_UART_Init+0x90>)
 8001096:	4a23      	ldr	r2, [pc, #140]	; (8001124 <MX_USART2_UART_Init+0x94>)
 8001098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <MX_USART2_UART_Init+0x90>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_USART2_UART_Init+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_USART2_UART_Init+0x90>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_USART2_UART_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_USART2_UART_Init+0x90>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MX_USART2_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_USART2_UART_Init+0x90>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_USART2_UART_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_USART2_UART_Init+0x90>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_USART2_UART_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d8:	4811      	ldr	r0, [pc, #68]	; (8001120 <MX_USART2_UART_Init+0x90>)
 80010da:	f002 fa5b 	bl	8003594 <HAL_UART_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010e4:	f000 f860 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e8:	2100      	movs	r1, #0
 80010ea:	480d      	ldr	r0, [pc, #52]	; (8001120 <MX_USART2_UART_Init+0x90>)
 80010ec:	f002 fff2 	bl	80040d4 <HAL_UARTEx_SetTxFifoThreshold>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010f6:	f000 f857 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fa:	2100      	movs	r1, #0
 80010fc:	4808      	ldr	r0, [pc, #32]	; (8001120 <MX_USART2_UART_Init+0x90>)
 80010fe:	f003 f827 	bl	8004150 <HAL_UARTEx_SetRxFifoThreshold>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001108:	f000 f84e 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_USART2_UART_Init+0x90>)
 800110e:	f002 ffa8 	bl	8004062 <HAL_UARTEx_DisableFifoMode>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001118:	f000 f846 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200000d8 	.word	0x200000d8
 8001124:	40004400 	.word	0x40004400

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_GPIO_Init+0x78>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <MX_GPIO_Init+0x78>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_GPIO_Init+0x78>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_GPIO_Init+0x78>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <MX_GPIO_Init+0x78>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_GPIO_Init+0x78>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <MX_GPIO_Init+0x7c>)
 8001176:	f000 fca3 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800117a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_GPIO_Init+0x7c>)
 8001194:	f000 fb12 	bl	80017bc <HAL_GPIO_Init>

}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000400 	.word	0x48000400

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_MspInit+0x44>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_MspInit+0x44>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6613      	str	r3, [r2, #96]	; 0x60
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_MspInit+0x44>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_MspInit+0x44>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_MspInit+0x44>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	6593      	str	r3, [r2, #88]	; 0x58
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_MspInit+0x44>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09c      	sub	sp, #112	; 0x70
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	f107 0318 	add.w	r3, r7, #24
 8001218:	2244      	movs	r2, #68	; 0x44
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f003 f84d 	bl	80042bc <memset>
  if(hi2c->Instance==I2C1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <HAL_I2C_MspInit+0xe0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d153      	bne.n	80012d4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800122c:	2340      	movs	r3, #64	; 0x40
 800122e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	4618      	mov	r0, r3
 800123a:	f001 ffbb 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001244:	f7ff ffb0 	bl	80011a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_I2C_MspInit+0xe4>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124c:	4a24      	ldr	r2, [pc, #144]	; (80012e0 <HAL_I2C_MspInit+0xe4>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <HAL_I2C_MspInit+0xe4>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HAL_I2C_MspInit+0xe4>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <HAL_I2C_MspInit+0xe4>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_I2C_MspInit+0xe4>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800127c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127e:	2312      	movs	r3, #18
 8001280:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800128a:	2304      	movs	r3, #4
 800128c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f000 fa90 	bl	80017bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a0:	2312      	movs	r3, #18
 80012a2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ac:	2304      	movs	r3, #4
 80012ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012b4:	4619      	mov	r1, r3
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <HAL_I2C_MspInit+0xe8>)
 80012b8:	f000 fa80 	bl	80017bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_I2C_MspInit+0xe4>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_I2C_MspInit+0xe4>)
 80012c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c6:	6593      	str	r3, [r2, #88]	; 0x58
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_I2C_MspInit+0xe4>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3770      	adds	r7, #112	; 0x70
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40005400 	.word	0x40005400
 80012e0:	40021000 	.word	0x40021000
 80012e4:	48000400 	.word	0x48000400

080012e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b09a      	sub	sp, #104	; 0x68
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2244      	movs	r2, #68	; 0x44
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f002 ffd7 	bl	80042bc <memset>
  if(huart->Instance==USART2)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_UART_MspInit+0xa8>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d136      	bne.n	8001386 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001318:	2302      	movs	r3, #2
 800131a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4618      	mov	r0, r3
 8001326:	f001 ff45 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001330:	f7ff ff3a 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_UART_MspInit+0xac>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	4a16      	ldr	r2, [pc, #88]	; (8001394 <HAL_UART_MspInit+0xac>)
 800133a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133e:	6593      	str	r3, [r2, #88]	; 0x58
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_UART_MspInit+0xac>)
 8001342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_UART_MspInit+0xac>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	4a10      	ldr	r2, [pc, #64]	; (8001394 <HAL_UART_MspInit+0xac>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_UART_MspInit+0xac>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001364:	230c      	movs	r3, #12
 8001366:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001374:	2307      	movs	r3, #7
 8001376:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f000 fa1b 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3768      	adds	r7, #104	; 0x68
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40004400 	.word	0x40004400
 8001394:	40021000 	.word	0x40021000

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e4:	f000 f8c6 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f002 ff24 	bl	8004268 <__errno>
 8001420:	4603      	mov	r3, r0
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20008000 	.word	0x20008000
 800144c:	00000400 	.word	0x00000400
 8001450:	20000168 	.word	0x20000168
 8001454:	20000180 	.word	0x20000180

08001458 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800147e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001482:	490e      	ldr	r1, [pc, #56]	; (80014bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <LoopForever+0xe>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001498:	4c0b      	ldr	r4, [pc, #44]	; (80014c8 <LoopForever+0x16>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a6:	f7ff ffd7 	bl	8001458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014aa:	f002 fee3 	bl	8004274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ae:	f7ff fcaf 	bl	8000e10 <main>

080014b2 <LoopForever>:

LoopForever:
    b LoopForever
 80014b2:	e7fe      	b.n	80014b2 <LoopForever>
  ldr   r0, =_estack
 80014b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014c0:	08004c5c 	.word	0x08004c5c
  ldr r2, =_sbss
 80014c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014c8:	20000180 	.word	0x20000180

080014cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_2_IRQHandler>

080014ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f93d 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f80e 	bl	8001500 <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	e001      	b.n	80014f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f0:	f7ff fe60 	bl	80011b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f4:	79fb      	ldrb	r3, [r7, #7]

}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_InitTick+0x68>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d022      	beq.n	800155a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_InitTick+0x6c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_InitTick+0x68>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001520:	fbb1 f3f3 	udiv	r3, r1, r3
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f93a 	bl	80017a2 <HAL_SYSTICK_Config>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10f      	bne.n	8001554 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	d809      	bhi.n	800154e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153a:	2200      	movs	r2, #0
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001542:	f000 f914 	bl	800176e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_InitTick+0x70>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e007      	b.n	800155e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e004      	b.n	800155e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e001      	b.n	800155e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000008 	.word	0x20000008
 800156c:	20000000 	.word	0x20000000
 8001570:	20000004 	.word	0x20000004

08001574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_IncTick+0x1c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_IncTick+0x20>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4413      	add	r3, r2
 8001582:	4a03      	ldr	r2, [pc, #12]	; (8001590 <HAL_IncTick+0x1c>)
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	2000016c 	.word	0x2000016c
 8001594:	20000008 	.word	0x20000008

08001598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_GetTick+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	2000016c 	.word	0x2000016c

080015b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff ffee 	bl	8001598 <HAL_GetTick>
 80015bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015c8:	d004      	beq.n	80015d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_Delay+0x40>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4413      	add	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d4:	bf00      	nop
 80015d6:	f7ff ffdf 	bl	8001598 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d8f7      	bhi.n	80015d6 <HAL_Delay+0x26>
  {
  }
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000008 	.word	0x20000008

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff47 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff5e 	bl	800163c <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff90 	bl	80016ac <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5f 	bl	8001658 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ffb2 	bl	8001714 <SysTick_Config>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017ca:	e15a      	b.n	8001a82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 814c 	beq.w	8001a7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d005      	beq.n	80017fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d130      	bne.n	800185e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001832:	2201      	movs	r2, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 0201 	and.w	r2, r3, #1
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b03      	cmp	r3, #3
 8001868:	d017      	beq.n	800189a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d123      	bne.n	80018ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	6939      	ldr	r1, [r7, #16]
 80018ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0203 	and.w	r2, r3, #3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 80a6 	beq.w	8001a7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001930:	4b5b      	ldr	r3, [pc, #364]	; (8001aa0 <HAL_GPIO_Init+0x2e4>)
 8001932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001934:	4a5a      	ldr	r2, [pc, #360]	; (8001aa0 <HAL_GPIO_Init+0x2e4>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6613      	str	r3, [r2, #96]	; 0x60
 800193c:	4b58      	ldr	r3, [pc, #352]	; (8001aa0 <HAL_GPIO_Init+0x2e4>)
 800193e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001948:	4a56      	ldr	r2, [pc, #344]	; (8001aa4 <HAL_GPIO_Init+0x2e8>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001972:	d01f      	beq.n	80019b4 <HAL_GPIO_Init+0x1f8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a4c      	ldr	r2, [pc, #304]	; (8001aa8 <HAL_GPIO_Init+0x2ec>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d019      	beq.n	80019b0 <HAL_GPIO_Init+0x1f4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a4b      	ldr	r2, [pc, #300]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d013      	beq.n	80019ac <HAL_GPIO_Init+0x1f0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a4a      	ldr	r2, [pc, #296]	; (8001ab0 <HAL_GPIO_Init+0x2f4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d00d      	beq.n	80019a8 <HAL_GPIO_Init+0x1ec>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a49      	ldr	r2, [pc, #292]	; (8001ab4 <HAL_GPIO_Init+0x2f8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d007      	beq.n	80019a4 <HAL_GPIO_Init+0x1e8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a48      	ldr	r2, [pc, #288]	; (8001ab8 <HAL_GPIO_Init+0x2fc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d101      	bne.n	80019a0 <HAL_GPIO_Init+0x1e4>
 800199c:	2305      	movs	r3, #5
 800199e:	e00a      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019a0:	2306      	movs	r3, #6
 80019a2:	e008      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019a4:	2304      	movs	r3, #4
 80019a6:	e006      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019a8:	2303      	movs	r3, #3
 80019aa:	e004      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e002      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <HAL_GPIO_Init+0x1fa>
 80019b4:	2300      	movs	r3, #0
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	f002 0203 	and.w	r2, r2, #3
 80019bc:	0092      	lsls	r2, r2, #2
 80019be:	4093      	lsls	r3, r2
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c6:	4937      	ldr	r1, [pc, #220]	; (8001aa4 <HAL_GPIO_Init+0x2e8>)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019d4:	4b39      	ldr	r3, [pc, #228]	; (8001abc <HAL_GPIO_Init+0x300>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019f8:	4a30      	ldr	r2, [pc, #192]	; (8001abc <HAL_GPIO_Init+0x300>)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019fe:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <HAL_GPIO_Init+0x300>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a22:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_GPIO_Init+0x300>)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_GPIO_Init+0x300>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_GPIO_Init+0x300>)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_GPIO_Init+0x300>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a76:	4a11      	ldr	r2, [pc, #68]	; (8001abc <HAL_GPIO_Init+0x300>)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f47f ae9d 	bne.w	80017cc <HAL_GPIO_Init+0x10>
  }
}
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	48000400 	.word	0x48000400
 8001aac:	48000800 	.word	0x48000800
 8001ab0:	48000c00 	.word	0x48000c00
 8001ab4:	48001000 	.word	0x48001000
 8001ab8:	48001400 	.word	0x48001400
 8001abc:	40010400 	.word	0x40010400

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001adc:	e002      	b.n	8001ae4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e081      	b.n	8001c06 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fb70 	bl	80011fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	e006      	b.n	8001b78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d104      	bne.n	8001b8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69d9      	ldr	r1, [r3, #28]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1a      	ldr	r2, [r3, #32]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	817b      	strh	r3, [r7, #10]
 8001c20:	4613      	mov	r3, r2
 8001c22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	f040 80da 	bne.w	8001de6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_I2C_Master_Transmit+0x30>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e0d3      	b.n	8001de8 <HAL_I2C_Master_Transmit+0x1d8>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c48:	f7ff fca6 	bl	8001598 <HAL_GetTick>
 8001c4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2319      	movs	r3, #25
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f9e6 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0be      	b.n	8001de8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2221      	movs	r2, #33	; 0x21
 8001c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2210      	movs	r2, #16
 8001c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	893a      	ldrh	r2, [r7, #8]
 8001c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2bff      	cmp	r3, #255	; 0xff
 8001c9a:	d90e      	bls.n	8001cba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	22ff      	movs	r2, #255	; 0xff
 8001ca0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	8979      	ldrh	r1, [r7, #10]
 8001caa:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 fbdc 	bl	8002470 <I2C_TransferConfig>
 8001cb8:	e06c      	b.n	8001d94 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	8979      	ldrh	r1, [r7, #10]
 8001ccc:	4b48      	ldr	r3, [pc, #288]	; (8001df0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 fbcb 	bl	8002470 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001cda:	e05b      	b.n	8001d94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	6a39      	ldr	r1, [r7, #32]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 f9e3 	bl	80020ac <I2C_WaitOnTXISFlagUntilTimeout>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e07b      	b.n	8001de8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d034      	beq.n	8001d94 <HAL_I2C_Master_Transmit+0x184>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d130      	bne.n	8001d94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 f975 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e04d      	b.n	8001de8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2bff      	cmp	r3, #255	; 0xff
 8001d54:	d90e      	bls.n	8001d74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	22ff      	movs	r2, #255	; 0xff
 8001d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	8979      	ldrh	r1, [r7, #10]
 8001d64:	2300      	movs	r3, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fb7f 	bl	8002470 <I2C_TransferConfig>
 8001d72:	e00f      	b.n	8001d94 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	8979      	ldrh	r1, [r7, #10]
 8001d86:	2300      	movs	r3, #0
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 fb6e 	bl	8002470 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d19e      	bne.n	8001cdc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	6a39      	ldr	r1, [r7, #32]
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f9c2 	bl	800212c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e01a      	b.n	8001de8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2220      	movs	r2, #32
 8001db8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
  }
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	80002000 	.word	0x80002000
 8001df4:	fe00e800 	.word	0xfe00e800

08001df8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	461a      	mov	r2, r3
 8001e04:	460b      	mov	r3, r1
 8001e06:	817b      	strh	r3, [r7, #10]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b20      	cmp	r3, #32
 8001e16:	f040 80db 	bne.w	8001fd0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_I2C_Master_Receive+0x30>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e0d4      	b.n	8001fd2 <HAL_I2C_Master_Receive+0x1da>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e30:	f7ff fbb2 	bl	8001598 <HAL_GetTick>
 8001e34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2319      	movs	r3, #25
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f8f2 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0bf      	b.n	8001fd2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2222      	movs	r2, #34	; 0x22
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2210      	movs	r2, #16
 8001e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	893a      	ldrh	r2, [r7, #8]
 8001e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	2bff      	cmp	r3, #255	; 0xff
 8001e82:	d90e      	bls.n	8001ea2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	22ff      	movs	r2, #255	; 0xff
 8001e88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	8979      	ldrh	r1, [r7, #10]
 8001e92:	4b52      	ldr	r3, [pc, #328]	; (8001fdc <HAL_I2C_Master_Receive+0x1e4>)
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fae8 	bl	8002470 <I2C_TransferConfig>
 8001ea0:	e06d      	b.n	8001f7e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	8979      	ldrh	r1, [r7, #10]
 8001eb4:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <HAL_I2C_Master_Receive+0x1e4>)
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fad7 	bl	8002470 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001ec2:	e05c      	b.n	8001f7e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	6a39      	ldr	r1, [r7, #32]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f96b 	bl	80021a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e07c      	b.n	8001fd2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d034      	beq.n	8001f7e <HAL_I2C_Master_Receive+0x186>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d130      	bne.n	8001f7e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	2200      	movs	r2, #0
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f880 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e04d      	b.n	8001fd2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	2bff      	cmp	r3, #255	; 0xff
 8001f3e:	d90e      	bls.n	8001f5e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	22ff      	movs	r2, #255	; 0xff
 8001f44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	8979      	ldrh	r1, [r7, #10]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fa8a 	bl	8002470 <I2C_TransferConfig>
 8001f5c:	e00f      	b.n	8001f7e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	8979      	ldrh	r1, [r7, #10]
 8001f70:	2300      	movs	r3, #0
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fa79 	bl	8002470 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d19d      	bne.n	8001ec4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	6a39      	ldr	r1, [r7, #32]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f8cd 	bl	800212c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e01a      	b.n	8001fd2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <HAL_I2C_Master_Receive+0x1e8>)
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e000      	b.n	8001fd2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001fd0:	2302      	movs	r3, #2
  }
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	80002400 	.word	0x80002400
 8001fe0:	fe00e800 	.word	0xfe00e800

08001fe4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d103      	bne.n	8002002 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2200      	movs	r2, #0
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d007      	beq.n	8002020 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	619a      	str	r2, [r3, #24]
  }
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800203c:	e022      	b.n	8002084 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002044:	d01e      	beq.n	8002084 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002046:	f7ff faa7 	bl	8001598 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d302      	bcc.n	800205c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d113      	bne.n	8002084 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	f043 0220 	orr.w	r2, r3, #32
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e00f      	b.n	80020a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4013      	ands	r3, r2
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	429a      	cmp	r2, r3
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d0cd      	beq.n	800203e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020b8:	e02c      	b.n	8002114 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f8ea 	bl	8002298 <I2C_IsErrorOccurred>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e02a      	b.n	8002124 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020d4:	d01e      	beq.n	8002114 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d6:	f7ff fa5f 	bl	8001598 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d302      	bcc.n	80020ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d113      	bne.n	8002114 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	f043 0220 	orr.w	r2, r3, #32
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e007      	b.n	8002124 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b02      	cmp	r3, #2
 8002120:	d1cb      	bne.n	80020ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002138:	e028      	b.n	800218c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f8aa 	bl	8002298 <I2C_IsErrorOccurred>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e026      	b.n	800219c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214e:	f7ff fa23 	bl	8001598 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	429a      	cmp	r2, r3
 800215c:	d302      	bcc.n	8002164 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d113      	bne.n	800218c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e007      	b.n	800219c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b20      	cmp	r3, #32
 8002198:	d1cf      	bne.n	800213a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021b0:	e064      	b.n	800227c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f86e 	bl	8002298 <I2C_IsErrorOccurred>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e062      	b.n	800228c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d138      	bne.n	8002246 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d105      	bne.n	80021ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e04e      	b.n	800228c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d107      	bne.n	800220c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2210      	movs	r2, #16
 8002202:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2204      	movs	r2, #4
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
 800220a:	e002      	b.n	8002212 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2220      	movs	r2, #32
 8002218:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002226:	400b      	ands	r3, r1
 8002228:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e022      	b.n	800228c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002246:	f7ff f9a7 	bl	8001598 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	429a      	cmp	r2, r3
 8002254:	d302      	bcc.n	800225c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10f      	bne.n	800227c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	f043 0220 	orr.w	r2, r3, #32
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e007      	b.n	800228c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b04      	cmp	r3, #4
 8002288:	d193      	bne.n	80021b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	fe00e800 	.word	0xfe00e800

08002298 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d075      	beq.n	80023b0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2210      	movs	r2, #16
 80022ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022cc:	e056      	b.n	800237c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022d4:	d052      	beq.n	800237c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022d6:	f7ff f95f 	bl	8001598 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d302      	bcc.n	80022ec <I2C_IsErrorOccurred+0x54>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d147      	bne.n	800237c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800230a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800230e:	d12e      	bne.n	800236e <I2C_IsErrorOccurred+0xd6>
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002316:	d02a      	beq.n	800236e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	2b20      	cmp	r3, #32
 800231c:	d027      	beq.n	800236e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800232c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800232e:	f7ff f933 	bl	8001598 <HAL_GetTick>
 8002332:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002334:	e01b      	b.n	800236e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002336:	f7ff f92f 	bl	8001598 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b19      	cmp	r3, #25
 8002342:	d914      	bls.n	800236e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	f043 0220 	orr.w	r2, r3, #32
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b20      	cmp	r3, #32
 800237a:	d1dc      	bne.n	8002336 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b20      	cmp	r3, #32
 8002388:	d003      	beq.n	8002392 <I2C_IsErrorOccurred+0xfa>
 800238a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800238e:	2b00      	cmp	r3, #0
 8002390:	d09d      	beq.n	80022ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2220      	movs	r2, #32
 80023a0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00b      	beq.n	80023fc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	f043 0308 	orr.w	r3, r3, #8
 80023ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002416:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800241e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002422:	2b00      	cmp	r3, #0
 8002424:	d01c      	beq.n	8002460 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f7ff fddc 	bl	8001fe4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <I2C_IsErrorOccurred+0x1d4>)
 8002438:	400b      	ands	r3, r1
 800243a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	431a      	orrs	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002464:	4618      	mov	r0, r3
 8002466:	3728      	adds	r7, #40	; 0x28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	fe00e800 	.word	0xfe00e800

08002470 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	817b      	strh	r3, [r7, #10]
 800247e:	4613      	mov	r3, r2
 8002480:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002488:	7a7b      	ldrb	r3, [r7, #9]
 800248a:	041b      	lsls	r3, r3, #16
 800248c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002490:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	4313      	orrs	r3, r2
 800249a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800249e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	0d5b      	lsrs	r3, r3, #21
 80024aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <I2C_TransferConfig+0x60>)
 80024b0:	430b      	orrs	r3, r1
 80024b2:	43db      	mvns	r3, r3
 80024b4:	ea02 0103 	and.w	r1, r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	03ff63ff 	.word	0x03ff63ff

080024d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d138      	bne.n	800255c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e032      	b.n	800255e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2224      	movs	r2, #36	; 0x24
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002526:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
  }
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b20      	cmp	r3, #32
 800257e:	d139      	bne.n	80025f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800258a:	2302      	movs	r3, #2
 800258c:	e033      	b.n	80025f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2224      	movs	r2, #36	; 0x24
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d141      	bne.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002612:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800261a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261e:	d131      	bne.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002620:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002626:	4a46      	ldr	r2, [pc, #280]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800262c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002630:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002638:	4a41      	ldr	r2, [pc, #260]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002640:	4b40      	ldr	r3, [pc, #256]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2232      	movs	r2, #50	; 0x32
 8002646:	fb02 f303 	mul.w	r3, r2, r3
 800264a:	4a3f      	ldr	r2, [pc, #252]	; (8002748 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	0c9b      	lsrs	r3, r3, #18
 8002652:	3301      	adds	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002656:	e002      	b.n	800265e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3b01      	subs	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266a:	d102      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f2      	bne.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002672:	4b33      	ldr	r3, [pc, #204]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267e:	d158      	bne.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e057      	b.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002684:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800268a:	4a2d      	ldr	r2, [pc, #180]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002690:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002694:	e04d      	b.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269c:	d141      	bne.n	8002722 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026aa:	d131      	bne.n	8002710 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026ac:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026b2:	4a23      	ldr	r2, [pc, #140]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026c4:	4a1e      	ldr	r2, [pc, #120]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2232      	movs	r2, #50	; 0x32
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	0c9b      	lsrs	r3, r3, #18
 80026de:	3301      	adds	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e2:	e002      	b.n	80026ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f6:	d102      	bne.n	80026fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f2      	bne.n	80026e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270a:	d112      	bne.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e011      	b.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002720:	e007      	b.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800272a:	4a05      	ldr	r2, [pc, #20]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002730:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40007000 	.word	0x40007000
 8002744:	20000000 	.word	0x20000000
 8002748:	431bde83 	.word	0x431bde83

0800274c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e306      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d075      	beq.n	8002856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800276a:	4b97      	ldr	r3, [pc, #604]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002774:	4b94      	ldr	r3, [pc, #592]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b0c      	cmp	r3, #12
 8002782:	d102      	bne.n	800278a <HAL_RCC_OscConfig+0x3e>
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d002      	beq.n	8002790 <HAL_RCC_OscConfig+0x44>
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d10b      	bne.n	80027a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	4b8d      	ldr	r3, [pc, #564]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d05b      	beq.n	8002854 <HAL_RCC_OscConfig+0x108>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d157      	bne.n	8002854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e2e1      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b0:	d106      	bne.n	80027c0 <HAL_RCC_OscConfig+0x74>
 80027b2:	4b85      	ldr	r3, [pc, #532]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a84      	ldr	r2, [pc, #528]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e01d      	b.n	80027fc <HAL_RCC_OscConfig+0xb0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x98>
 80027ca:	4b7f      	ldr	r3, [pc, #508]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a7e      	ldr	r2, [pc, #504]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b7c      	ldr	r3, [pc, #496]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a7b      	ldr	r2, [pc, #492]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0xb0>
 80027e4:	4b78      	ldr	r3, [pc, #480]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a77      	ldr	r2, [pc, #476]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b75      	ldr	r3, [pc, #468]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a74      	ldr	r2, [pc, #464]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80027f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fec8 	bl	8001598 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800280c:	f7fe fec4 	bl	8001598 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e2a6      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281e:	4b6a      	ldr	r3, [pc, #424]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0xc0>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe feb4 	bl	8001598 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002834:	f7fe feb0 	bl	8001598 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e292      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002846:	4b60      	ldr	r3, [pc, #384]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0xe8>
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d075      	beq.n	800294e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002862:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800286c:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b0c      	cmp	r3, #12
 800287a:	d102      	bne.n	8002882 <HAL_RCC_OscConfig+0x136>
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d002      	beq.n	8002888 <HAL_RCC_OscConfig+0x13c>
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b04      	cmp	r3, #4
 8002886:	d11f      	bne.n	80028c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002888:	4b4f      	ldr	r3, [pc, #316]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_OscConfig+0x154>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e265      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b49      	ldr	r3, [pc, #292]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	4946      	ldr	r1, [pc, #280]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028b4:	4b45      	ldr	r3, [pc, #276]	; (80029cc <HAL_RCC_OscConfig+0x280>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fe21 	bl	8001500 <HAL_InitTick>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d043      	beq.n	800294c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e251      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d023      	beq.n	8002918 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d0:	4b3d      	ldr	r3, [pc, #244]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a3c      	ldr	r2, [pc, #240]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80028d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fe5c 	bl	8001598 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e4:	f7fe fe58 	bl	8001598 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e23a      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f6:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002902:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	061b      	lsls	r3, r3, #24
 8002910:	492d      	ldr	r1, [pc, #180]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
 8002916:	e01a      	b.n	800294e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002918:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a2a      	ldr	r2, [pc, #168]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 800291e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fe38 	bl	8001598 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe fe34 	bl	8001598 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e216      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800293e:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x1e0>
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d041      	beq.n	80029de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01c      	beq.n	800299c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002962:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 8002964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002968:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002972:	f7fe fe11 	bl	8001598 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297a:	f7fe fe0d 	bl	8001598 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e1ef      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 800298e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ef      	beq.n	800297a <HAL_RCC_OscConfig+0x22e>
 800299a:	e020      	b.n	80029de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a2:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fe fdf4 	bl	8001598 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029b2:	e00d      	b.n	80029d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b4:	f7fe fdf0 	bl	8001598 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d906      	bls.n	80029d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1d2      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d0:	4b8c      	ldr	r3, [pc, #560]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ea      	bne.n	80029b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80a6 	beq.w	8002b38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ec:	2300      	movs	r3, #0
 80029ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029f0:	4b84      	ldr	r3, [pc, #528]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_OscConfig+0x2b4>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x2b6>
 8002a00:	2300      	movs	r3, #0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00d      	beq.n	8002a22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	4b7f      	ldr	r3, [pc, #508]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0a:	4a7e      	ldr	r2, [pc, #504]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6593      	str	r3, [r2, #88]	; 0x58
 8002a12:	4b7c      	ldr	r3, [pc, #496]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a22:	4b79      	ldr	r3, [pc, #484]	; (8002c08 <HAL_RCC_OscConfig+0x4bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d118      	bne.n	8002a60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a2e:	4b76      	ldr	r3, [pc, #472]	; (8002c08 <HAL_RCC_OscConfig+0x4bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a75      	ldr	r2, [pc, #468]	; (8002c08 <HAL_RCC_OscConfig+0x4bc>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fdad 	bl	8001598 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a42:	f7fe fda9 	bl	8001598 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e18b      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a54:	4b6c      	ldr	r3, [pc, #432]	; (8002c08 <HAL_RCC_OscConfig+0x4bc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d108      	bne.n	8002a7a <HAL_RCC_OscConfig+0x32e>
 8002a68:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	4a65      	ldr	r2, [pc, #404]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a78:	e024      	b.n	8002ac4 <HAL_RCC_OscConfig+0x378>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	d110      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x358>
 8002a82:	4b60      	ldr	r3, [pc, #384]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	4a5e      	ldr	r2, [pc, #376]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a92:	4b5c      	ldr	r3, [pc, #368]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a98:	4a5a      	ldr	r2, [pc, #360]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aa2:	e00f      	b.n	8002ac4 <HAL_RCC_OscConfig+0x378>
 8002aa4:	4b57      	ldr	r3, [pc, #348]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	4a56      	ldr	r2, [pc, #344]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab4:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	4a52      	ldr	r2, [pc, #328]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d016      	beq.n	8002afa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe fd64 	bl	8001598 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7fe fd60 	bl	8001598 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e140      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aea:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ed      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x388>
 8002af8:	e015      	b.n	8002b26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afa:	f7fe fd4d 	bl	8001598 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe fd49 	bl	8001598 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e129      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b18:	4b3a      	ldr	r3, [pc, #232]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ed      	bne.n	8002b02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b26:	7ffb      	ldrb	r3, [r7, #31]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2c:	4b35      	ldr	r3, [pc, #212]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	4a34      	ldr	r2, [pc, #208]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d03c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01c      	beq.n	8002b86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b52:	4a2c      	ldr	r2, [pc, #176]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe fd1c 	bl	8001598 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b64:	f7fe fd18 	bl	8001598 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0fa      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b76:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ef      	beq.n	8002b64 <HAL_RCC_OscConfig+0x418>
 8002b84:	e01b      	b.n	8002bbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b86:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7fe fcff 	bl	8001598 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b9e:	f7fe fcfb 	bl	8001598 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e0dd      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bb0:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ef      	bne.n	8002b9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80d1 	beq.w	8002d6a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	f000 808b 	beq.w	8002cec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d15e      	bne.n	8002c9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a08      	ldr	r2, [pc, #32]	; (8002c04 <HAL_RCC_OscConfig+0x4b8>)
 8002be4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bea:	f7fe fcd5 	bl	8001598 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf0:	e00c      	b.n	8002c0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7fe fcd1 	bl	8001598 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d905      	bls.n	8002c0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e0b3      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c0c:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1ec      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c18:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	4b56      	ldr	r3, [pc, #344]	; (8002d78 <HAL_RCC_OscConfig+0x62c>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6a11      	ldr	r1, [r2, #32]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c28:	3a01      	subs	r2, #1
 8002c2a:	0112      	lsls	r2, r2, #4
 8002c2c:	4311      	orrs	r1, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c32:	0212      	lsls	r2, r2, #8
 8002c34:	4311      	orrs	r1, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c3a:	0852      	lsrs	r2, r2, #1
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	0552      	lsls	r2, r2, #21
 8002c40:	4311      	orrs	r1, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c46:	0852      	lsrs	r2, r2, #1
 8002c48:	3a01      	subs	r2, #1
 8002c4a:	0652      	lsls	r2, r2, #25
 8002c4c:	4311      	orrs	r1, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c52:	06d2      	lsls	r2, r2, #27
 8002c54:	430a      	orrs	r2, r1
 8002c56:	4947      	ldr	r1, [pc, #284]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b45      	ldr	r3, [pc, #276]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a44      	ldr	r2, [pc, #272]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c68:	4b42      	ldr	r3, [pc, #264]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a41      	ldr	r2, [pc, #260]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe fc90 	bl	8001598 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe fc8c 	bl	8001598 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e06e      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8e:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x530>
 8002c9a:	e066      	b.n	8002d6a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9c:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a34      	ldr	r2, [pc, #208]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ca8:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a31      	ldr	r2, [pc, #196]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002cb4:	4b2f      	ldr	r3, [pc, #188]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a2e      	ldr	r2, [pc, #184]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002cba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fc68 	bl	8001598 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe fc64 	bl	8001598 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e046      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cde:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x580>
 8002cea:	e03e      	b.n	8002d6a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e039      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <HAL_RCC_OscConfig+0x628>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0203 	and.w	r2, r3, #3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d12c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	3b01      	subs	r3, #1
 8002d18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d123      	bne.n	8002d66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d11b      	bne.n	8002d66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d113      	bne.n	8002d66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	019f800c 	.word	0x019f800c

08002d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e11e      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d94:	4b91      	ldr	r3, [pc, #580]	; (8002fdc <HAL_RCC_ClockConfig+0x260>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d910      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b8e      	ldr	r3, [pc, #568]	; (8002fdc <HAL_RCC_ClockConfig+0x260>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 020f 	bic.w	r2, r3, #15
 8002daa:	498c      	ldr	r1, [pc, #560]	; (8002fdc <HAL_RCC_ClockConfig+0x260>)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b8a      	ldr	r3, [pc, #552]	; (8002fdc <HAL_RCC_ClockConfig+0x260>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e106      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d073      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d129      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd8:	4b81      	ldr	r3, [pc, #516]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0f4      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002de8:	f000 f99e 	bl	8003128 <RCC_GetSysClockFreqFromPLLSource>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4a7c      	ldr	r2, [pc, #496]	; (8002fe4 <HAL_RCC_ClockConfig+0x268>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d93f      	bls.n	8002e76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002df6:	4b7a      	ldr	r3, [pc, #488]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d033      	beq.n	8002e76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d12f      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e16:	4b72      	ldr	r3, [pc, #456]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e1e:	4a70      	ldr	r2, [pc, #448]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e024      	b.n	8002e76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e34:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0c6      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e44:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0be      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e54:	f000 f8ce 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4a61      	ldr	r2, [pc, #388]	; (8002fe4 <HAL_RCC_ClockConfig+0x268>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d909      	bls.n	8002e76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e62:	4b5f      	ldr	r3, [pc, #380]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6a:	4a5d      	ldr	r2, [pc, #372]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b5a      	ldr	r3, [pc, #360]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4957      	ldr	r1, [pc, #348]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e88:	f7fe fb86 	bl	8001598 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe fb82 	bl	8001598 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e095      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d023      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a42      	ldr	r2, [pc, #264]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002ed6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ee8:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ef0:	4a3b      	ldr	r2, [pc, #236]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef8:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4936      	ldr	r1, [pc, #216]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b80      	cmp	r3, #128	; 0x80
 8002f10:	d105      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f12:	4b33      	ldr	r3, [pc, #204]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	4a32      	ldr	r2, [pc, #200]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	; (8002fdc <HAL_RCC_ClockConfig+0x260>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d21d      	bcs.n	8002f68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2c:	4b2b      	ldr	r3, [pc, #172]	; (8002fdc <HAL_RCC_ClockConfig+0x260>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 020f 	bic.w	r2, r3, #15
 8002f34:	4929      	ldr	r1, [pc, #164]	; (8002fdc <HAL_RCC_ClockConfig+0x260>)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f3c:	f7fe fb2c 	bl	8001598 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f44:	f7fe fb28 	bl	8001598 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e03b      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1ed      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f74:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4917      	ldr	r1, [pc, #92]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f92:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	490f      	ldr	r1, [pc, #60]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa6:	f000 f825 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002faa:	4602      	mov	r2, r0
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <HAL_RCC_ClockConfig+0x264>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	490c      	ldr	r1, [pc, #48]	; (8002fe8 <HAL_RCC_ClockConfig+0x26c>)
 8002fb8:	5ccb      	ldrb	r3, [r1, r3]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_RCC_ClockConfig+0x270>)
 8002fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x274>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe fa98 	bl	8001500 <HAL_InitTick>
 8002fd0:	4603      	mov	r3, r0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40022000 	.word	0x40022000
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	04c4b400 	.word	0x04c4b400
 8002fe8:	08004bd8 	.word	0x08004bd8
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ffa:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b04      	cmp	r3, #4
 8003004:	d102      	bne.n	800300c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003006:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	e047      	b.n	800309c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800300c:	4b27      	ldr	r3, [pc, #156]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b08      	cmp	r3, #8
 8003016:	d102      	bne.n	800301e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003018:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	e03e      	b.n	800309c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800301e:	4b23      	ldr	r3, [pc, #140]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b0c      	cmp	r3, #12
 8003028:	d136      	bne.n	8003098 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	3301      	adds	r3, #1
 8003040:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d10c      	bne.n	8003062 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003048:	4a1a      	ldr	r2, [pc, #104]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003050:	4a16      	ldr	r2, [pc, #88]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003052:	68d2      	ldr	r2, [r2, #12]
 8003054:	0a12      	lsrs	r2, r2, #8
 8003056:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	617b      	str	r3, [r7, #20]
      break;
 8003060:	e00c      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003062:	4a13      	ldr	r2, [pc, #76]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	4a10      	ldr	r2, [pc, #64]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800306c:	68d2      	ldr	r2, [r2, #12]
 800306e:	0a12      	lsrs	r2, r2, #8
 8003070:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]
      break;
 800307a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	0e5b      	lsrs	r3, r3, #25
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	3301      	adds	r3, #1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	e001      	b.n	800309c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800309c:	693b      	ldr	r3, [r7, #16]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	00f42400 	.word	0x00f42400
 80030b4:	007a1200 	.word	0x007a1200

080030b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <HAL_RCC_GetHCLKFreq+0x14>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000000 	.word	0x20000000

080030d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030d4:	f7ff fff0 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	0a1b      	lsrs	r3, r3, #8
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4904      	ldr	r1, [pc, #16]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08004be8 	.word	0x08004be8

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003100:	f7ff ffda 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0adb      	lsrs	r3, r3, #11
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4904      	ldr	r1, [pc, #16]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	08004be8 	.word	0x08004be8

08003128 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	3301      	adds	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d10c      	bne.n	8003166 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003156:	68d2      	ldr	r2, [r2, #12]
 8003158:	0a12      	lsrs	r2, r2, #8
 800315a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	617b      	str	r3, [r7, #20]
    break;
 8003164:	e00c      	b.n	8003180 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003166:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003170:	68d2      	ldr	r2, [r2, #12]
 8003172:	0a12      	lsrs	r2, r2, #8
 8003174:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003178:	fb02 f303 	mul.w	r3, r2, r3
 800317c:	617b      	str	r3, [r7, #20]
    break;
 800317e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003180:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0e5b      	lsrs	r3, r3, #25
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	3301      	adds	r3, #1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800319a:	687b      	ldr	r3, [r7, #4]
}
 800319c:	4618      	mov	r0, r3
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40021000 	.word	0x40021000
 80031ac:	007a1200 	.word	0x007a1200
 80031b0:	00f42400 	.word	0x00f42400

080031b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031bc:	2300      	movs	r3, #0
 80031be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c0:	2300      	movs	r3, #0
 80031c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8098 	beq.w	8003302 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d2:	2300      	movs	r3, #0
 80031d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d6:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10d      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	4b40      	ldr	r3, [pc, #256]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e6:	4a3f      	ldr	r2, [pc, #252]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ec:	6593      	str	r3, [r2, #88]	; 0x58
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fa:	2301      	movs	r3, #1
 80031fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031fe:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a39      	ldr	r2, [pc, #228]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003208:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800320a:	f7fe f9c5 	bl	8001598 <HAL_GetTick>
 800320e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003210:	e009      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003212:	f7fe f9c1 	bl	8001598 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d902      	bls.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	74fb      	strb	r3, [r7, #19]
        break;
 8003224:	e005      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003226:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ef      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d159      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003242:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01e      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	d019      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003254:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003260:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003270:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003280:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d016      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fe f981 	bl	8001598 <HAL_GetTick>
 8003296:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003298:	e00b      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe f97d 	bl	8001598 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d902      	bls.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	74fb      	strb	r3, [r7, #19]
            break;
 80032b0:	e006      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ec      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	4903      	ldr	r1, [pc, #12]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032dc:	e008      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	74bb      	strb	r3, [r7, #18]
 80032e2:	e005      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032f0:	7c7b      	ldrb	r3, [r7, #17]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d105      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f6:	4ba6      	ldr	r3, [pc, #664]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	4aa5      	ldr	r2, [pc, #660]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003300:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800330e:	4ba0      	ldr	r3, [pc, #640]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	f023 0203 	bic.w	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	499c      	ldr	r1, [pc, #624]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003330:	4b97      	ldr	r3, [pc, #604]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	f023 020c 	bic.w	r2, r3, #12
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	4994      	ldr	r1, [pc, #592]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003352:	4b8f      	ldr	r3, [pc, #572]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	498b      	ldr	r1, [pc, #556]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003374:	4b86      	ldr	r3, [pc, #536]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	4983      	ldr	r1, [pc, #524]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003396:	4b7e      	ldr	r3, [pc, #504]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	497a      	ldr	r1, [pc, #488]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033b8:	4b75      	ldr	r3, [pc, #468]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	4972      	ldr	r1, [pc, #456]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033da:	4b6d      	ldr	r3, [pc, #436]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4969      	ldr	r1, [pc, #420]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033fc:	4b64      	ldr	r3, [pc, #400]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	4961      	ldr	r1, [pc, #388]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800341e:	4b5c      	ldr	r3, [pc, #368]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	4958      	ldr	r1, [pc, #352]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d015      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003440:	4b53      	ldr	r3, [pc, #332]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	4950      	ldr	r1, [pc, #320]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800345e:	d105      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003460:	4b4b      	ldr	r3, [pc, #300]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a4a      	ldr	r2, [pc, #296]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800346a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003474:	2b00      	cmp	r3, #0
 8003476:	d015      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003478:	4b45      	ldr	r3, [pc, #276]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	4942      	ldr	r1, [pc, #264]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003496:	d105      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003498:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4a3c      	ldr	r2, [pc, #240]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d015      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034b0:	4b37      	ldr	r3, [pc, #220]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	4934      	ldr	r1, [pc, #208]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ce:	d105      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d0:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a2e      	ldr	r2, [pc, #184]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034e8:	4b29      	ldr	r3, [pc, #164]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f6:	4926      	ldr	r1, [pc, #152]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003506:	d105      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003508:	4b21      	ldr	r3, [pc, #132]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a20      	ldr	r2, [pc, #128]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003512:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d015      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	4918      	ldr	r1, [pc, #96]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800353e:	d105      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003540:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a12      	ldr	r2, [pc, #72]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800354a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d015      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	490a      	ldr	r1, [pc, #40]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003576:	d105      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a04      	ldr	r2, [pc, #16]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003584:	7cbb      	ldrb	r3, [r7, #18]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e042      	b.n	800362c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d106      	bne.n	80035be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7fd fe95 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2224      	movs	r2, #36	; 0x24
 80035c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8c2 	bl	8003760 <UART_SetConfig>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e022      	b.n	800362c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fb82 	bl	8003cf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fc09 	bl	8003e3c <UART_CheckIdleState>
 800362a:	4603      	mov	r3, r0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364a:	2b20      	cmp	r3, #32
 800364c:	f040 8083 	bne.w	8003756 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_UART_Transmit+0x28>
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e07b      	b.n	8003758 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_UART_Transmit+0x3a>
 800366a:	2302      	movs	r3, #2
 800366c:	e074      	b.n	8003758 <HAL_UART_Transmit+0x124>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2221      	movs	r2, #33	; 0x21
 8003682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003686:	f7fd ff87 	bl	8001598 <HAL_GetTick>
 800368a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	88fa      	ldrh	r2, [r7, #6]
 8003698:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a4:	d108      	bne.n	80036b8 <HAL_UART_Transmit+0x84>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d104      	bne.n	80036b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	e003      	b.n	80036c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80036c8:	e02c      	b.n	8003724 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2200      	movs	r2, #0
 80036d2:	2180      	movs	r1, #128	; 0x80
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fbfc 	bl	8003ed2 <UART_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e039      	b.n	8003758 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10b      	bne.n	8003702 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	3302      	adds	r3, #2
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e007      	b.n	8003712 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	781a      	ldrb	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	3301      	adds	r3, #1
 8003710:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1cc      	bne.n	80036ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2200      	movs	r2, #0
 8003738:	2140      	movs	r1, #64	; 0x40
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fbc9 	bl	8003ed2 <UART_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e006      	b.n	8003758 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b08c      	sub	sp, #48	; 0x30
 8003766:	af00      	add	r7, sp, #0
 8003768:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	431a      	orrs	r2, r3
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	431a      	orrs	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	4313      	orrs	r3, r2
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	4bab      	ldr	r3, [pc, #684]	; (8003a3c <UART_SetConfig+0x2dc>)
 8003790:	4013      	ands	r3, r2
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003798:	430b      	orrs	r3, r1
 800379a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4aa0      	ldr	r2, [pc, #640]	; (8003a40 <UART_SetConfig+0x2e0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c8:	4313      	orrs	r3, r2
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80037d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	f023 010f 	bic.w	r1, r3, #15
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a91      	ldr	r2, [pc, #580]	; (8003a44 <UART_SetConfig+0x2e4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d125      	bne.n	8003850 <UART_SetConfig+0xf0>
 8003804:	4b90      	ldr	r3, [pc, #576]	; (8003a48 <UART_SetConfig+0x2e8>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b03      	cmp	r3, #3
 8003810:	d81a      	bhi.n	8003848 <UART_SetConfig+0xe8>
 8003812:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <UART_SetConfig+0xb8>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	08003829 	.word	0x08003829
 800381c:	08003839 	.word	0x08003839
 8003820:	08003831 	.word	0x08003831
 8003824:	08003841 	.word	0x08003841
 8003828:	2301      	movs	r3, #1
 800382a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800382e:	e0d6      	b.n	80039de <UART_SetConfig+0x27e>
 8003830:	2302      	movs	r3, #2
 8003832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003836:	e0d2      	b.n	80039de <UART_SetConfig+0x27e>
 8003838:	2304      	movs	r3, #4
 800383a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800383e:	e0ce      	b.n	80039de <UART_SetConfig+0x27e>
 8003840:	2308      	movs	r3, #8
 8003842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003846:	e0ca      	b.n	80039de <UART_SetConfig+0x27e>
 8003848:	2310      	movs	r3, #16
 800384a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800384e:	e0c6      	b.n	80039de <UART_SetConfig+0x27e>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a7d      	ldr	r2, [pc, #500]	; (8003a4c <UART_SetConfig+0x2ec>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d138      	bne.n	80038cc <UART_SetConfig+0x16c>
 800385a:	4b7b      	ldr	r3, [pc, #492]	; (8003a48 <UART_SetConfig+0x2e8>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b0c      	cmp	r3, #12
 8003866:	d82d      	bhi.n	80038c4 <UART_SetConfig+0x164>
 8003868:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <UART_SetConfig+0x110>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	080038a5 	.word	0x080038a5
 8003874:	080038c5 	.word	0x080038c5
 8003878:	080038c5 	.word	0x080038c5
 800387c:	080038c5 	.word	0x080038c5
 8003880:	080038b5 	.word	0x080038b5
 8003884:	080038c5 	.word	0x080038c5
 8003888:	080038c5 	.word	0x080038c5
 800388c:	080038c5 	.word	0x080038c5
 8003890:	080038ad 	.word	0x080038ad
 8003894:	080038c5 	.word	0x080038c5
 8003898:	080038c5 	.word	0x080038c5
 800389c:	080038c5 	.word	0x080038c5
 80038a0:	080038bd 	.word	0x080038bd
 80038a4:	2300      	movs	r3, #0
 80038a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038aa:	e098      	b.n	80039de <UART_SetConfig+0x27e>
 80038ac:	2302      	movs	r3, #2
 80038ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038b2:	e094      	b.n	80039de <UART_SetConfig+0x27e>
 80038b4:	2304      	movs	r3, #4
 80038b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ba:	e090      	b.n	80039de <UART_SetConfig+0x27e>
 80038bc:	2308      	movs	r3, #8
 80038be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038c2:	e08c      	b.n	80039de <UART_SetConfig+0x27e>
 80038c4:	2310      	movs	r3, #16
 80038c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ca:	e088      	b.n	80039de <UART_SetConfig+0x27e>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5f      	ldr	r2, [pc, #380]	; (8003a50 <UART_SetConfig+0x2f0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d125      	bne.n	8003922 <UART_SetConfig+0x1c2>
 80038d6:	4b5c      	ldr	r3, [pc, #368]	; (8003a48 <UART_SetConfig+0x2e8>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038e0:	2b30      	cmp	r3, #48	; 0x30
 80038e2:	d016      	beq.n	8003912 <UART_SetConfig+0x1b2>
 80038e4:	2b30      	cmp	r3, #48	; 0x30
 80038e6:	d818      	bhi.n	800391a <UART_SetConfig+0x1ba>
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d00a      	beq.n	8003902 <UART_SetConfig+0x1a2>
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d814      	bhi.n	800391a <UART_SetConfig+0x1ba>
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <UART_SetConfig+0x19a>
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d008      	beq.n	800390a <UART_SetConfig+0x1aa>
 80038f8:	e00f      	b.n	800391a <UART_SetConfig+0x1ba>
 80038fa:	2300      	movs	r3, #0
 80038fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003900:	e06d      	b.n	80039de <UART_SetConfig+0x27e>
 8003902:	2302      	movs	r3, #2
 8003904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003908:	e069      	b.n	80039de <UART_SetConfig+0x27e>
 800390a:	2304      	movs	r3, #4
 800390c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003910:	e065      	b.n	80039de <UART_SetConfig+0x27e>
 8003912:	2308      	movs	r3, #8
 8003914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003918:	e061      	b.n	80039de <UART_SetConfig+0x27e>
 800391a:	2310      	movs	r3, #16
 800391c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003920:	e05d      	b.n	80039de <UART_SetConfig+0x27e>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a4b      	ldr	r2, [pc, #300]	; (8003a54 <UART_SetConfig+0x2f4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d125      	bne.n	8003978 <UART_SetConfig+0x218>
 800392c:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <UART_SetConfig+0x2e8>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003936:	2bc0      	cmp	r3, #192	; 0xc0
 8003938:	d016      	beq.n	8003968 <UART_SetConfig+0x208>
 800393a:	2bc0      	cmp	r3, #192	; 0xc0
 800393c:	d818      	bhi.n	8003970 <UART_SetConfig+0x210>
 800393e:	2b80      	cmp	r3, #128	; 0x80
 8003940:	d00a      	beq.n	8003958 <UART_SetConfig+0x1f8>
 8003942:	2b80      	cmp	r3, #128	; 0x80
 8003944:	d814      	bhi.n	8003970 <UART_SetConfig+0x210>
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <UART_SetConfig+0x1f0>
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d008      	beq.n	8003960 <UART_SetConfig+0x200>
 800394e:	e00f      	b.n	8003970 <UART_SetConfig+0x210>
 8003950:	2300      	movs	r3, #0
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003956:	e042      	b.n	80039de <UART_SetConfig+0x27e>
 8003958:	2302      	movs	r3, #2
 800395a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395e:	e03e      	b.n	80039de <UART_SetConfig+0x27e>
 8003960:	2304      	movs	r3, #4
 8003962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003966:	e03a      	b.n	80039de <UART_SetConfig+0x27e>
 8003968:	2308      	movs	r3, #8
 800396a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396e:	e036      	b.n	80039de <UART_SetConfig+0x27e>
 8003970:	2310      	movs	r3, #16
 8003972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003976:	e032      	b.n	80039de <UART_SetConfig+0x27e>
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a30      	ldr	r2, [pc, #192]	; (8003a40 <UART_SetConfig+0x2e0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d12a      	bne.n	80039d8 <UART_SetConfig+0x278>
 8003982:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <UART_SetConfig+0x2e8>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800398c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003990:	d01a      	beq.n	80039c8 <UART_SetConfig+0x268>
 8003992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003996:	d81b      	bhi.n	80039d0 <UART_SetConfig+0x270>
 8003998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399c:	d00c      	beq.n	80039b8 <UART_SetConfig+0x258>
 800399e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a2:	d815      	bhi.n	80039d0 <UART_SetConfig+0x270>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <UART_SetConfig+0x250>
 80039a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ac:	d008      	beq.n	80039c0 <UART_SetConfig+0x260>
 80039ae:	e00f      	b.n	80039d0 <UART_SetConfig+0x270>
 80039b0:	2300      	movs	r3, #0
 80039b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b6:	e012      	b.n	80039de <UART_SetConfig+0x27e>
 80039b8:	2302      	movs	r3, #2
 80039ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039be:	e00e      	b.n	80039de <UART_SetConfig+0x27e>
 80039c0:	2304      	movs	r3, #4
 80039c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c6:	e00a      	b.n	80039de <UART_SetConfig+0x27e>
 80039c8:	2308      	movs	r3, #8
 80039ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ce:	e006      	b.n	80039de <UART_SetConfig+0x27e>
 80039d0:	2310      	movs	r3, #16
 80039d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d6:	e002      	b.n	80039de <UART_SetConfig+0x27e>
 80039d8:	2310      	movs	r3, #16
 80039da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <UART_SetConfig+0x2e0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	f040 80a8 	bne.w	8003b3a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d834      	bhi.n	8003a5c <UART_SetConfig+0x2fc>
 80039f2:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0x298>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a5d 	.word	0x08003a5d
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a5d 	.word	0x08003a5d
 8003a08:	08003a2b 	.word	0x08003a2b
 8003a0c:	08003a5d 	.word	0x08003a5d
 8003a10:	08003a5d 	.word	0x08003a5d
 8003a14:	08003a5d 	.word	0x08003a5d
 8003a18:	08003a33 	.word	0x08003a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7ff fb58 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8003a20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a22:	e021      	b.n	8003a68 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <UART_SetConfig+0x2f8>)
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a28:	e01e      	b.n	8003a68 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a2a:	f7ff fae3 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8003a2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a30:	e01a      	b.n	8003a68 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a38:	e016      	b.n	8003a68 <UART_SetConfig+0x308>
 8003a3a:	bf00      	nop
 8003a3c:	cfff69f3 	.word	0xcfff69f3
 8003a40:	40008000 	.word	0x40008000
 8003a44:	40013800 	.word	0x40013800
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40004400 	.word	0x40004400
 8003a50:	40004800 	.word	0x40004800
 8003a54:	40004c00 	.word	0x40004c00
 8003a58:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 812a 	beq.w	8003cc4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	4a9e      	ldr	r2, [pc, #632]	; (8003cf0 <UART_SetConfig+0x590>)
 8003a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d305      	bcc.n	8003aa0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d903      	bls.n	8003aa8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003aa6:	e10d      	b.n	8003cc4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	60fa      	str	r2, [r7, #12]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	4a8e      	ldr	r2, [pc, #568]	; (8003cf0 <UART_SetConfig+0x590>)
 8003ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2200      	movs	r2, #0
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aca:	f7fd f81f 	bl	8000b0c <__aeabi_uldivmod>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	020b      	lsls	r3, r1, #8
 8003ae0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ae4:	0202      	lsls	r2, r0, #8
 8003ae6:	6979      	ldr	r1, [r7, #20]
 8003ae8:	6849      	ldr	r1, [r1, #4]
 8003aea:	0849      	lsrs	r1, r1, #1
 8003aec:	2000      	movs	r0, #0
 8003aee:	460c      	mov	r4, r1
 8003af0:	4605      	mov	r5, r0
 8003af2:	eb12 0804 	adds.w	r8, r2, r4
 8003af6:	eb43 0905 	adc.w	r9, r3, r5
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	469a      	mov	sl, r3
 8003b02:	4693      	mov	fp, r2
 8003b04:	4652      	mov	r2, sl
 8003b06:	465b      	mov	r3, fp
 8003b08:	4640      	mov	r0, r8
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	f7fc fffe 	bl	8000b0c <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4613      	mov	r3, r2
 8003b16:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b1e:	d308      	bcc.n	8003b32 <UART_SetConfig+0x3d2>
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b26:	d204      	bcs.n	8003b32 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a3a      	ldr	r2, [r7, #32]
 8003b2e:	60da      	str	r2, [r3, #12]
 8003b30:	e0c8      	b.n	8003cc4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b38:	e0c4      	b.n	8003cc4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b42:	d167      	bne.n	8003c14 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003b44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d828      	bhi.n	8003b9e <UART_SetConfig+0x43e>
 8003b4c:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <UART_SetConfig+0x3f4>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b79 	.word	0x08003b79
 8003b58:	08003b81 	.word	0x08003b81
 8003b5c:	08003b89 	.word	0x08003b89
 8003b60:	08003b9f 	.word	0x08003b9f
 8003b64:	08003b8f 	.word	0x08003b8f
 8003b68:	08003b9f 	.word	0x08003b9f
 8003b6c:	08003b9f 	.word	0x08003b9f
 8003b70:	08003b9f 	.word	0x08003b9f
 8003b74:	08003b97 	.word	0x08003b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b78:	f7ff faaa 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8003b7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b7e:	e014      	b.n	8003baa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b80:	f7ff fabc 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8003b84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b86:	e010      	b.n	8003baa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b88:	4b5a      	ldr	r3, [pc, #360]	; (8003cf4 <UART_SetConfig+0x594>)
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b8c:	e00d      	b.n	8003baa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b8e:	f7ff fa31 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8003b92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b94:	e009      	b.n	8003baa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b9c:	e005      	b.n	8003baa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8089 	beq.w	8003cc4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	4a4e      	ldr	r2, [pc, #312]	; (8003cf0 <UART_SetConfig+0x590>)
 8003bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bc4:	005a      	lsls	r2, r3, #1
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	441a      	add	r2, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	2b0f      	cmp	r3, #15
 8003bdc:	d916      	bls.n	8003c0c <UART_SetConfig+0x4ac>
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be4:	d212      	bcs.n	8003c0c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f023 030f 	bic.w	r3, r3, #15
 8003bee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	085b      	lsrs	r3, r3, #1
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	8bfb      	ldrh	r3, [r7, #30]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	8bfa      	ldrh	r2, [r7, #30]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	e05b      	b.n	8003cc4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c12:	e057      	b.n	8003cc4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d828      	bhi.n	8003c6e <UART_SetConfig+0x50e>
 8003c1c:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <UART_SetConfig+0x4c4>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003c49 	.word	0x08003c49
 8003c28:	08003c51 	.word	0x08003c51
 8003c2c:	08003c59 	.word	0x08003c59
 8003c30:	08003c6f 	.word	0x08003c6f
 8003c34:	08003c5f 	.word	0x08003c5f
 8003c38:	08003c6f 	.word	0x08003c6f
 8003c3c:	08003c6f 	.word	0x08003c6f
 8003c40:	08003c6f 	.word	0x08003c6f
 8003c44:	08003c67 	.word	0x08003c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c48:	f7ff fa42 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 8003c4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c4e:	e014      	b.n	8003c7a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c50:	f7ff fa54 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8003c54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c56:	e010      	b.n	8003c7a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c58:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <UART_SetConfig+0x594>)
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c5c:	e00d      	b.n	8003c7a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c5e:	f7ff f9c9 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8003c62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c64:	e009      	b.n	8003c7a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c6c:	e005      	b.n	8003c7a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c78:	bf00      	nop
    }

    if (pclk != 0U)
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d021      	beq.n	8003cc4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <UART_SetConfig+0x590>)
 8003c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	441a      	add	r2, r3
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	2b0f      	cmp	r3, #15
 8003ca8:	d909      	bls.n	8003cbe <UART_SetConfig+0x55e>
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb0:	d205      	bcs.n	8003cbe <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60da      	str	r2, [r3, #12]
 8003cbc:	e002      	b.n	8003cc4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003ce0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3730      	adds	r7, #48	; 0x30
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cee:	bf00      	nop
 8003cf0:	08004bf0 	.word	0x08004bf0
 8003cf4:	00f42400 	.word	0x00f42400

08003cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01a      	beq.n	8003e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df6:	d10a      	bne.n	8003e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e4c:	f7fd fba4 	bl	8001598 <HAL_GetTick>
 8003e50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d10e      	bne.n	8003e7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f82f 	bl	8003ed2 <UART_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e025      	b.n	8003eca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d10e      	bne.n	8003eaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f819 	bl	8003ed2 <UART_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e00f      	b.n	8003eca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b09c      	sub	sp, #112	; 0x70
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee2:	e0a9      	b.n	8004038 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eea:	f000 80a5 	beq.w	8004038 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fd fb53 	bl	8001598 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <UART_WaitOnFlagUntilTimeout+0x32>
 8003efe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d140      	bne.n	8003f86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f18:	667b      	str	r3, [r7, #100]	; 0x64
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e6      	bne.n	8003f04 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3308      	adds	r3, #8
 8003f54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f56:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e5      	bne.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e069      	b.n	800405a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d051      	beq.n	8004038 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa2:	d149      	bne.n	8004038 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e6      	bne.n	8003fae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004000:	623a      	str	r2, [r7, #32]
 8004002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	69f9      	ldr	r1, [r7, #28]
 8004006:	6a3a      	ldr	r2, [r7, #32]
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	61bb      	str	r3, [r7, #24]
   return(result);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e5      	bne.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e010      	b.n	800405a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69da      	ldr	r2, [r3, #28]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4013      	ands	r3, r2
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	429a      	cmp	r2, r3
 8004054:	f43f af46 	beq.w	8003ee4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3770      	adds	r7, #112	; 0x70
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_UARTEx_DisableFifoMode+0x16>
 8004074:	2302      	movs	r3, #2
 8004076:	e027      	b.n	80040c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2224      	movs	r2, #36	; 0x24
 8004084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80040a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e02d      	b.n	8004148 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2224      	movs	r2, #36	; 0x24
 80040f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f84f 	bl	80041cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004164:	2302      	movs	r3, #2
 8004166:	e02d      	b.n	80041c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2224      	movs	r2, #36	; 0x24
 8004174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f811 	bl	80041cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d108      	bne.n	80041ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041ec:	e031      	b.n	8004252 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041ee:	2308      	movs	r3, #8
 80041f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041f2:	2308      	movs	r3, #8
 80041f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	0e5b      	lsrs	r3, r3, #25
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	0f5b      	lsrs	r3, r3, #29
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004216:	7bbb      	ldrb	r3, [r7, #14]
 8004218:	7b3a      	ldrb	r2, [r7, #12]
 800421a:	4911      	ldr	r1, [pc, #68]	; (8004260 <UARTEx_SetNbDataToProcess+0x94>)
 800421c:	5c8a      	ldrb	r2, [r1, r2]
 800421e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004222:	7b3a      	ldrb	r2, [r7, #12]
 8004224:	490f      	ldr	r1, [pc, #60]	; (8004264 <UARTEx_SetNbDataToProcess+0x98>)
 8004226:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004228:	fb93 f3f2 	sdiv	r3, r3, r2
 800422c:	b29a      	uxth	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	7b7a      	ldrb	r2, [r7, #13]
 8004238:	4909      	ldr	r1, [pc, #36]	; (8004260 <UARTEx_SetNbDataToProcess+0x94>)
 800423a:	5c8a      	ldrb	r2, [r1, r2]
 800423c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004240:	7b7a      	ldrb	r2, [r7, #13]
 8004242:	4908      	ldr	r1, [pc, #32]	; (8004264 <UARTEx_SetNbDataToProcess+0x98>)
 8004244:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004246:	fb93 f3f2 	sdiv	r3, r3, r2
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	08004c08 	.word	0x08004c08
 8004264:	08004c10 	.word	0x08004c10

08004268 <__errno>:
 8004268:	4b01      	ldr	r3, [pc, #4]	; (8004270 <__errno+0x8>)
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	2000000c 	.word	0x2000000c

08004274 <__libc_init_array>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	4d0d      	ldr	r5, [pc, #52]	; (80042ac <__libc_init_array+0x38>)
 8004278:	4c0d      	ldr	r4, [pc, #52]	; (80042b0 <__libc_init_array+0x3c>)
 800427a:	1b64      	subs	r4, r4, r5
 800427c:	10a4      	asrs	r4, r4, #2
 800427e:	2600      	movs	r6, #0
 8004280:	42a6      	cmp	r6, r4
 8004282:	d109      	bne.n	8004298 <__libc_init_array+0x24>
 8004284:	4d0b      	ldr	r5, [pc, #44]	; (80042b4 <__libc_init_array+0x40>)
 8004286:	4c0c      	ldr	r4, [pc, #48]	; (80042b8 <__libc_init_array+0x44>)
 8004288:	f000 fc8e 	bl	8004ba8 <_init>
 800428c:	1b64      	subs	r4, r4, r5
 800428e:	10a4      	asrs	r4, r4, #2
 8004290:	2600      	movs	r6, #0
 8004292:	42a6      	cmp	r6, r4
 8004294:	d105      	bne.n	80042a2 <__libc_init_array+0x2e>
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	f855 3b04 	ldr.w	r3, [r5], #4
 800429c:	4798      	blx	r3
 800429e:	3601      	adds	r6, #1
 80042a0:	e7ee      	b.n	8004280 <__libc_init_array+0xc>
 80042a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a6:	4798      	blx	r3
 80042a8:	3601      	adds	r6, #1
 80042aa:	e7f2      	b.n	8004292 <__libc_init_array+0x1e>
 80042ac:	08004c54 	.word	0x08004c54
 80042b0:	08004c54 	.word	0x08004c54
 80042b4:	08004c54 	.word	0x08004c54
 80042b8:	08004c58 	.word	0x08004c58

080042bc <memset>:
 80042bc:	4402      	add	r2, r0
 80042be:	4603      	mov	r3, r0
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d100      	bne.n	80042c6 <memset+0xa>
 80042c4:	4770      	bx	lr
 80042c6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ca:	e7f9      	b.n	80042c0 <memset+0x4>

080042cc <siprintf>:
 80042cc:	b40e      	push	{r1, r2, r3}
 80042ce:	b500      	push	{lr}
 80042d0:	b09c      	sub	sp, #112	; 0x70
 80042d2:	ab1d      	add	r3, sp, #116	; 0x74
 80042d4:	9002      	str	r0, [sp, #8]
 80042d6:	9006      	str	r0, [sp, #24]
 80042d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042dc:	4809      	ldr	r0, [pc, #36]	; (8004304 <siprintf+0x38>)
 80042de:	9107      	str	r1, [sp, #28]
 80042e0:	9104      	str	r1, [sp, #16]
 80042e2:	4909      	ldr	r1, [pc, #36]	; (8004308 <siprintf+0x3c>)
 80042e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80042e8:	9105      	str	r1, [sp, #20]
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	a902      	add	r1, sp, #8
 80042f0:	f000 f868 	bl	80043c4 <_svfiprintf_r>
 80042f4:	9b02      	ldr	r3, [sp, #8]
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	b01c      	add	sp, #112	; 0x70
 80042fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004300:	b003      	add	sp, #12
 8004302:	4770      	bx	lr
 8004304:	2000000c 	.word	0x2000000c
 8004308:	ffff0208 	.word	0xffff0208

0800430c <__ssputs_r>:
 800430c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004310:	688e      	ldr	r6, [r1, #8]
 8004312:	429e      	cmp	r6, r3
 8004314:	4682      	mov	sl, r0
 8004316:	460c      	mov	r4, r1
 8004318:	4690      	mov	r8, r2
 800431a:	461f      	mov	r7, r3
 800431c:	d838      	bhi.n	8004390 <__ssputs_r+0x84>
 800431e:	898a      	ldrh	r2, [r1, #12]
 8004320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004324:	d032      	beq.n	800438c <__ssputs_r+0x80>
 8004326:	6825      	ldr	r5, [r4, #0]
 8004328:	6909      	ldr	r1, [r1, #16]
 800432a:	eba5 0901 	sub.w	r9, r5, r1
 800432e:	6965      	ldr	r5, [r4, #20]
 8004330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004338:	3301      	adds	r3, #1
 800433a:	444b      	add	r3, r9
 800433c:	106d      	asrs	r5, r5, #1
 800433e:	429d      	cmp	r5, r3
 8004340:	bf38      	it	cc
 8004342:	461d      	movcc	r5, r3
 8004344:	0553      	lsls	r3, r2, #21
 8004346:	d531      	bpl.n	80043ac <__ssputs_r+0xa0>
 8004348:	4629      	mov	r1, r5
 800434a:	f000 fb63 	bl	8004a14 <_malloc_r>
 800434e:	4606      	mov	r6, r0
 8004350:	b950      	cbnz	r0, 8004368 <__ssputs_r+0x5c>
 8004352:	230c      	movs	r3, #12
 8004354:	f8ca 3000 	str.w	r3, [sl]
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800435e:	81a3      	strh	r3, [r4, #12]
 8004360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004368:	6921      	ldr	r1, [r4, #16]
 800436a:	464a      	mov	r2, r9
 800436c:	f000 fabe 	bl	80048ec <memcpy>
 8004370:	89a3      	ldrh	r3, [r4, #12]
 8004372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437a:	81a3      	strh	r3, [r4, #12]
 800437c:	6126      	str	r6, [r4, #16]
 800437e:	6165      	str	r5, [r4, #20]
 8004380:	444e      	add	r6, r9
 8004382:	eba5 0509 	sub.w	r5, r5, r9
 8004386:	6026      	str	r6, [r4, #0]
 8004388:	60a5      	str	r5, [r4, #8]
 800438a:	463e      	mov	r6, r7
 800438c:	42be      	cmp	r6, r7
 800438e:	d900      	bls.n	8004392 <__ssputs_r+0x86>
 8004390:	463e      	mov	r6, r7
 8004392:	6820      	ldr	r0, [r4, #0]
 8004394:	4632      	mov	r2, r6
 8004396:	4641      	mov	r1, r8
 8004398:	f000 fab6 	bl	8004908 <memmove>
 800439c:	68a3      	ldr	r3, [r4, #8]
 800439e:	1b9b      	subs	r3, r3, r6
 80043a0:	60a3      	str	r3, [r4, #8]
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	4433      	add	r3, r6
 80043a6:	6023      	str	r3, [r4, #0]
 80043a8:	2000      	movs	r0, #0
 80043aa:	e7db      	b.n	8004364 <__ssputs_r+0x58>
 80043ac:	462a      	mov	r2, r5
 80043ae:	f000 fba5 	bl	8004afc <_realloc_r>
 80043b2:	4606      	mov	r6, r0
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d1e1      	bne.n	800437c <__ssputs_r+0x70>
 80043b8:	6921      	ldr	r1, [r4, #16]
 80043ba:	4650      	mov	r0, sl
 80043bc:	f000 fabe 	bl	800493c <_free_r>
 80043c0:	e7c7      	b.n	8004352 <__ssputs_r+0x46>
	...

080043c4 <_svfiprintf_r>:
 80043c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c8:	4698      	mov	r8, r3
 80043ca:	898b      	ldrh	r3, [r1, #12]
 80043cc:	061b      	lsls	r3, r3, #24
 80043ce:	b09d      	sub	sp, #116	; 0x74
 80043d0:	4607      	mov	r7, r0
 80043d2:	460d      	mov	r5, r1
 80043d4:	4614      	mov	r4, r2
 80043d6:	d50e      	bpl.n	80043f6 <_svfiprintf_r+0x32>
 80043d8:	690b      	ldr	r3, [r1, #16]
 80043da:	b963      	cbnz	r3, 80043f6 <_svfiprintf_r+0x32>
 80043dc:	2140      	movs	r1, #64	; 0x40
 80043de:	f000 fb19 	bl	8004a14 <_malloc_r>
 80043e2:	6028      	str	r0, [r5, #0]
 80043e4:	6128      	str	r0, [r5, #16]
 80043e6:	b920      	cbnz	r0, 80043f2 <_svfiprintf_r+0x2e>
 80043e8:	230c      	movs	r3, #12
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043f0:	e0d1      	b.n	8004596 <_svfiprintf_r+0x1d2>
 80043f2:	2340      	movs	r3, #64	; 0x40
 80043f4:	616b      	str	r3, [r5, #20]
 80043f6:	2300      	movs	r3, #0
 80043f8:	9309      	str	r3, [sp, #36]	; 0x24
 80043fa:	2320      	movs	r3, #32
 80043fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004400:	f8cd 800c 	str.w	r8, [sp, #12]
 8004404:	2330      	movs	r3, #48	; 0x30
 8004406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80045b0 <_svfiprintf_r+0x1ec>
 800440a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800440e:	f04f 0901 	mov.w	r9, #1
 8004412:	4623      	mov	r3, r4
 8004414:	469a      	mov	sl, r3
 8004416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800441a:	b10a      	cbz	r2, 8004420 <_svfiprintf_r+0x5c>
 800441c:	2a25      	cmp	r2, #37	; 0x25
 800441e:	d1f9      	bne.n	8004414 <_svfiprintf_r+0x50>
 8004420:	ebba 0b04 	subs.w	fp, sl, r4
 8004424:	d00b      	beq.n	800443e <_svfiprintf_r+0x7a>
 8004426:	465b      	mov	r3, fp
 8004428:	4622      	mov	r2, r4
 800442a:	4629      	mov	r1, r5
 800442c:	4638      	mov	r0, r7
 800442e:	f7ff ff6d 	bl	800430c <__ssputs_r>
 8004432:	3001      	adds	r0, #1
 8004434:	f000 80aa 	beq.w	800458c <_svfiprintf_r+0x1c8>
 8004438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800443a:	445a      	add	r2, fp
 800443c:	9209      	str	r2, [sp, #36]	; 0x24
 800443e:	f89a 3000 	ldrb.w	r3, [sl]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80a2 	beq.w	800458c <_svfiprintf_r+0x1c8>
 8004448:	2300      	movs	r3, #0
 800444a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800444e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004452:	f10a 0a01 	add.w	sl, sl, #1
 8004456:	9304      	str	r3, [sp, #16]
 8004458:	9307      	str	r3, [sp, #28]
 800445a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800445e:	931a      	str	r3, [sp, #104]	; 0x68
 8004460:	4654      	mov	r4, sl
 8004462:	2205      	movs	r2, #5
 8004464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004468:	4851      	ldr	r0, [pc, #324]	; (80045b0 <_svfiprintf_r+0x1ec>)
 800446a:	f7fb fee1 	bl	8000230 <memchr>
 800446e:	9a04      	ldr	r2, [sp, #16]
 8004470:	b9d8      	cbnz	r0, 80044aa <_svfiprintf_r+0xe6>
 8004472:	06d0      	lsls	r0, r2, #27
 8004474:	bf44      	itt	mi
 8004476:	2320      	movmi	r3, #32
 8004478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800447c:	0711      	lsls	r1, r2, #28
 800447e:	bf44      	itt	mi
 8004480:	232b      	movmi	r3, #43	; 0x2b
 8004482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004486:	f89a 3000 	ldrb.w	r3, [sl]
 800448a:	2b2a      	cmp	r3, #42	; 0x2a
 800448c:	d015      	beq.n	80044ba <_svfiprintf_r+0xf6>
 800448e:	9a07      	ldr	r2, [sp, #28]
 8004490:	4654      	mov	r4, sl
 8004492:	2000      	movs	r0, #0
 8004494:	f04f 0c0a 	mov.w	ip, #10
 8004498:	4621      	mov	r1, r4
 800449a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800449e:	3b30      	subs	r3, #48	; 0x30
 80044a0:	2b09      	cmp	r3, #9
 80044a2:	d94e      	bls.n	8004542 <_svfiprintf_r+0x17e>
 80044a4:	b1b0      	cbz	r0, 80044d4 <_svfiprintf_r+0x110>
 80044a6:	9207      	str	r2, [sp, #28]
 80044a8:	e014      	b.n	80044d4 <_svfiprintf_r+0x110>
 80044aa:	eba0 0308 	sub.w	r3, r0, r8
 80044ae:	fa09 f303 	lsl.w	r3, r9, r3
 80044b2:	4313      	orrs	r3, r2
 80044b4:	9304      	str	r3, [sp, #16]
 80044b6:	46a2      	mov	sl, r4
 80044b8:	e7d2      	b.n	8004460 <_svfiprintf_r+0x9c>
 80044ba:	9b03      	ldr	r3, [sp, #12]
 80044bc:	1d19      	adds	r1, r3, #4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	9103      	str	r1, [sp, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bfbb      	ittet	lt
 80044c6:	425b      	neglt	r3, r3
 80044c8:	f042 0202 	orrlt.w	r2, r2, #2
 80044cc:	9307      	strge	r3, [sp, #28]
 80044ce:	9307      	strlt	r3, [sp, #28]
 80044d0:	bfb8      	it	lt
 80044d2:	9204      	strlt	r2, [sp, #16]
 80044d4:	7823      	ldrb	r3, [r4, #0]
 80044d6:	2b2e      	cmp	r3, #46	; 0x2e
 80044d8:	d10c      	bne.n	80044f4 <_svfiprintf_r+0x130>
 80044da:	7863      	ldrb	r3, [r4, #1]
 80044dc:	2b2a      	cmp	r3, #42	; 0x2a
 80044de:	d135      	bne.n	800454c <_svfiprintf_r+0x188>
 80044e0:	9b03      	ldr	r3, [sp, #12]
 80044e2:	1d1a      	adds	r2, r3, #4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	9203      	str	r2, [sp, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bfb8      	it	lt
 80044ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044f0:	3402      	adds	r4, #2
 80044f2:	9305      	str	r3, [sp, #20]
 80044f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80045c0 <_svfiprintf_r+0x1fc>
 80044f8:	7821      	ldrb	r1, [r4, #0]
 80044fa:	2203      	movs	r2, #3
 80044fc:	4650      	mov	r0, sl
 80044fe:	f7fb fe97 	bl	8000230 <memchr>
 8004502:	b140      	cbz	r0, 8004516 <_svfiprintf_r+0x152>
 8004504:	2340      	movs	r3, #64	; 0x40
 8004506:	eba0 000a 	sub.w	r0, r0, sl
 800450a:	fa03 f000 	lsl.w	r0, r3, r0
 800450e:	9b04      	ldr	r3, [sp, #16]
 8004510:	4303      	orrs	r3, r0
 8004512:	3401      	adds	r4, #1
 8004514:	9304      	str	r3, [sp, #16]
 8004516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800451a:	4826      	ldr	r0, [pc, #152]	; (80045b4 <_svfiprintf_r+0x1f0>)
 800451c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004520:	2206      	movs	r2, #6
 8004522:	f7fb fe85 	bl	8000230 <memchr>
 8004526:	2800      	cmp	r0, #0
 8004528:	d038      	beq.n	800459c <_svfiprintf_r+0x1d8>
 800452a:	4b23      	ldr	r3, [pc, #140]	; (80045b8 <_svfiprintf_r+0x1f4>)
 800452c:	bb1b      	cbnz	r3, 8004576 <_svfiprintf_r+0x1b2>
 800452e:	9b03      	ldr	r3, [sp, #12]
 8004530:	3307      	adds	r3, #7
 8004532:	f023 0307 	bic.w	r3, r3, #7
 8004536:	3308      	adds	r3, #8
 8004538:	9303      	str	r3, [sp, #12]
 800453a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800453c:	4433      	add	r3, r6
 800453e:	9309      	str	r3, [sp, #36]	; 0x24
 8004540:	e767      	b.n	8004412 <_svfiprintf_r+0x4e>
 8004542:	fb0c 3202 	mla	r2, ip, r2, r3
 8004546:	460c      	mov	r4, r1
 8004548:	2001      	movs	r0, #1
 800454a:	e7a5      	b.n	8004498 <_svfiprintf_r+0xd4>
 800454c:	2300      	movs	r3, #0
 800454e:	3401      	adds	r4, #1
 8004550:	9305      	str	r3, [sp, #20]
 8004552:	4619      	mov	r1, r3
 8004554:	f04f 0c0a 	mov.w	ip, #10
 8004558:	4620      	mov	r0, r4
 800455a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800455e:	3a30      	subs	r2, #48	; 0x30
 8004560:	2a09      	cmp	r2, #9
 8004562:	d903      	bls.n	800456c <_svfiprintf_r+0x1a8>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0c5      	beq.n	80044f4 <_svfiprintf_r+0x130>
 8004568:	9105      	str	r1, [sp, #20]
 800456a:	e7c3      	b.n	80044f4 <_svfiprintf_r+0x130>
 800456c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004570:	4604      	mov	r4, r0
 8004572:	2301      	movs	r3, #1
 8004574:	e7f0      	b.n	8004558 <_svfiprintf_r+0x194>
 8004576:	ab03      	add	r3, sp, #12
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	462a      	mov	r2, r5
 800457c:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <_svfiprintf_r+0x1f8>)
 800457e:	a904      	add	r1, sp, #16
 8004580:	4638      	mov	r0, r7
 8004582:	f3af 8000 	nop.w
 8004586:	1c42      	adds	r2, r0, #1
 8004588:	4606      	mov	r6, r0
 800458a:	d1d6      	bne.n	800453a <_svfiprintf_r+0x176>
 800458c:	89ab      	ldrh	r3, [r5, #12]
 800458e:	065b      	lsls	r3, r3, #25
 8004590:	f53f af2c 	bmi.w	80043ec <_svfiprintf_r+0x28>
 8004594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004596:	b01d      	add	sp, #116	; 0x74
 8004598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800459c:	ab03      	add	r3, sp, #12
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	462a      	mov	r2, r5
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <_svfiprintf_r+0x1f8>)
 80045a4:	a904      	add	r1, sp, #16
 80045a6:	4638      	mov	r0, r7
 80045a8:	f000 f87a 	bl	80046a0 <_printf_i>
 80045ac:	e7eb      	b.n	8004586 <_svfiprintf_r+0x1c2>
 80045ae:	bf00      	nop
 80045b0:	08004c18 	.word	0x08004c18
 80045b4:	08004c22 	.word	0x08004c22
 80045b8:	00000000 	.word	0x00000000
 80045bc:	0800430d 	.word	0x0800430d
 80045c0:	08004c1e 	.word	0x08004c1e

080045c4 <_printf_common>:
 80045c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c8:	4616      	mov	r6, r2
 80045ca:	4699      	mov	r9, r3
 80045cc:	688a      	ldr	r2, [r1, #8]
 80045ce:	690b      	ldr	r3, [r1, #16]
 80045d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045d4:	4293      	cmp	r3, r2
 80045d6:	bfb8      	it	lt
 80045d8:	4613      	movlt	r3, r2
 80045da:	6033      	str	r3, [r6, #0]
 80045dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045e0:	4607      	mov	r7, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	b10a      	cbz	r2, 80045ea <_printf_common+0x26>
 80045e6:	3301      	adds	r3, #1
 80045e8:	6033      	str	r3, [r6, #0]
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	0699      	lsls	r1, r3, #26
 80045ee:	bf42      	ittt	mi
 80045f0:	6833      	ldrmi	r3, [r6, #0]
 80045f2:	3302      	addmi	r3, #2
 80045f4:	6033      	strmi	r3, [r6, #0]
 80045f6:	6825      	ldr	r5, [r4, #0]
 80045f8:	f015 0506 	ands.w	r5, r5, #6
 80045fc:	d106      	bne.n	800460c <_printf_common+0x48>
 80045fe:	f104 0a19 	add.w	sl, r4, #25
 8004602:	68e3      	ldr	r3, [r4, #12]
 8004604:	6832      	ldr	r2, [r6, #0]
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	42ab      	cmp	r3, r5
 800460a:	dc26      	bgt.n	800465a <_printf_common+0x96>
 800460c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004610:	1e13      	subs	r3, r2, #0
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	bf18      	it	ne
 8004616:	2301      	movne	r3, #1
 8004618:	0692      	lsls	r2, r2, #26
 800461a:	d42b      	bmi.n	8004674 <_printf_common+0xb0>
 800461c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004620:	4649      	mov	r1, r9
 8004622:	4638      	mov	r0, r7
 8004624:	47c0      	blx	r8
 8004626:	3001      	adds	r0, #1
 8004628:	d01e      	beq.n	8004668 <_printf_common+0xa4>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	68e5      	ldr	r5, [r4, #12]
 800462e:	6832      	ldr	r2, [r6, #0]
 8004630:	f003 0306 	and.w	r3, r3, #6
 8004634:	2b04      	cmp	r3, #4
 8004636:	bf08      	it	eq
 8004638:	1aad      	subeq	r5, r5, r2
 800463a:	68a3      	ldr	r3, [r4, #8]
 800463c:	6922      	ldr	r2, [r4, #16]
 800463e:	bf0c      	ite	eq
 8004640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004644:	2500      	movne	r5, #0
 8004646:	4293      	cmp	r3, r2
 8004648:	bfc4      	itt	gt
 800464a:	1a9b      	subgt	r3, r3, r2
 800464c:	18ed      	addgt	r5, r5, r3
 800464e:	2600      	movs	r6, #0
 8004650:	341a      	adds	r4, #26
 8004652:	42b5      	cmp	r5, r6
 8004654:	d11a      	bne.n	800468c <_printf_common+0xc8>
 8004656:	2000      	movs	r0, #0
 8004658:	e008      	b.n	800466c <_printf_common+0xa8>
 800465a:	2301      	movs	r3, #1
 800465c:	4652      	mov	r2, sl
 800465e:	4649      	mov	r1, r9
 8004660:	4638      	mov	r0, r7
 8004662:	47c0      	blx	r8
 8004664:	3001      	adds	r0, #1
 8004666:	d103      	bne.n	8004670 <_printf_common+0xac>
 8004668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800466c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004670:	3501      	adds	r5, #1
 8004672:	e7c6      	b.n	8004602 <_printf_common+0x3e>
 8004674:	18e1      	adds	r1, r4, r3
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	2030      	movs	r0, #48	; 0x30
 800467a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800467e:	4422      	add	r2, r4
 8004680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004688:	3302      	adds	r3, #2
 800468a:	e7c7      	b.n	800461c <_printf_common+0x58>
 800468c:	2301      	movs	r3, #1
 800468e:	4622      	mov	r2, r4
 8004690:	4649      	mov	r1, r9
 8004692:	4638      	mov	r0, r7
 8004694:	47c0      	blx	r8
 8004696:	3001      	adds	r0, #1
 8004698:	d0e6      	beq.n	8004668 <_printf_common+0xa4>
 800469a:	3601      	adds	r6, #1
 800469c:	e7d9      	b.n	8004652 <_printf_common+0x8e>
	...

080046a0 <_printf_i>:
 80046a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	7e0f      	ldrb	r7, [r1, #24]
 80046a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046a8:	2f78      	cmp	r7, #120	; 0x78
 80046aa:	4691      	mov	r9, r2
 80046ac:	4680      	mov	r8, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	469a      	mov	sl, r3
 80046b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046b6:	d807      	bhi.n	80046c8 <_printf_i+0x28>
 80046b8:	2f62      	cmp	r7, #98	; 0x62
 80046ba:	d80a      	bhi.n	80046d2 <_printf_i+0x32>
 80046bc:	2f00      	cmp	r7, #0
 80046be:	f000 80d8 	beq.w	8004872 <_printf_i+0x1d2>
 80046c2:	2f58      	cmp	r7, #88	; 0x58
 80046c4:	f000 80a3 	beq.w	800480e <_printf_i+0x16e>
 80046c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046d0:	e03a      	b.n	8004748 <_printf_i+0xa8>
 80046d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046d6:	2b15      	cmp	r3, #21
 80046d8:	d8f6      	bhi.n	80046c8 <_printf_i+0x28>
 80046da:	a101      	add	r1, pc, #4	; (adr r1, 80046e0 <_printf_i+0x40>)
 80046dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046e0:	08004739 	.word	0x08004739
 80046e4:	0800474d 	.word	0x0800474d
 80046e8:	080046c9 	.word	0x080046c9
 80046ec:	080046c9 	.word	0x080046c9
 80046f0:	080046c9 	.word	0x080046c9
 80046f4:	080046c9 	.word	0x080046c9
 80046f8:	0800474d 	.word	0x0800474d
 80046fc:	080046c9 	.word	0x080046c9
 8004700:	080046c9 	.word	0x080046c9
 8004704:	080046c9 	.word	0x080046c9
 8004708:	080046c9 	.word	0x080046c9
 800470c:	08004859 	.word	0x08004859
 8004710:	0800477d 	.word	0x0800477d
 8004714:	0800483b 	.word	0x0800483b
 8004718:	080046c9 	.word	0x080046c9
 800471c:	080046c9 	.word	0x080046c9
 8004720:	0800487b 	.word	0x0800487b
 8004724:	080046c9 	.word	0x080046c9
 8004728:	0800477d 	.word	0x0800477d
 800472c:	080046c9 	.word	0x080046c9
 8004730:	080046c9 	.word	0x080046c9
 8004734:	08004843 	.word	0x08004843
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	1d1a      	adds	r2, r3, #4
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	602a      	str	r2, [r5, #0]
 8004740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004748:	2301      	movs	r3, #1
 800474a:	e0a3      	b.n	8004894 <_printf_i+0x1f4>
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	6829      	ldr	r1, [r5, #0]
 8004750:	0606      	lsls	r6, r0, #24
 8004752:	f101 0304 	add.w	r3, r1, #4
 8004756:	d50a      	bpl.n	800476e <_printf_i+0xce>
 8004758:	680e      	ldr	r6, [r1, #0]
 800475a:	602b      	str	r3, [r5, #0]
 800475c:	2e00      	cmp	r6, #0
 800475e:	da03      	bge.n	8004768 <_printf_i+0xc8>
 8004760:	232d      	movs	r3, #45	; 0x2d
 8004762:	4276      	negs	r6, r6
 8004764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004768:	485e      	ldr	r0, [pc, #376]	; (80048e4 <_printf_i+0x244>)
 800476a:	230a      	movs	r3, #10
 800476c:	e019      	b.n	80047a2 <_printf_i+0x102>
 800476e:	680e      	ldr	r6, [r1, #0]
 8004770:	602b      	str	r3, [r5, #0]
 8004772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004776:	bf18      	it	ne
 8004778:	b236      	sxthne	r6, r6
 800477a:	e7ef      	b.n	800475c <_printf_i+0xbc>
 800477c:	682b      	ldr	r3, [r5, #0]
 800477e:	6820      	ldr	r0, [r4, #0]
 8004780:	1d19      	adds	r1, r3, #4
 8004782:	6029      	str	r1, [r5, #0]
 8004784:	0601      	lsls	r1, r0, #24
 8004786:	d501      	bpl.n	800478c <_printf_i+0xec>
 8004788:	681e      	ldr	r6, [r3, #0]
 800478a:	e002      	b.n	8004792 <_printf_i+0xf2>
 800478c:	0646      	lsls	r6, r0, #25
 800478e:	d5fb      	bpl.n	8004788 <_printf_i+0xe8>
 8004790:	881e      	ldrh	r6, [r3, #0]
 8004792:	4854      	ldr	r0, [pc, #336]	; (80048e4 <_printf_i+0x244>)
 8004794:	2f6f      	cmp	r7, #111	; 0x6f
 8004796:	bf0c      	ite	eq
 8004798:	2308      	moveq	r3, #8
 800479a:	230a      	movne	r3, #10
 800479c:	2100      	movs	r1, #0
 800479e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047a2:	6865      	ldr	r5, [r4, #4]
 80047a4:	60a5      	str	r5, [r4, #8]
 80047a6:	2d00      	cmp	r5, #0
 80047a8:	bfa2      	ittt	ge
 80047aa:	6821      	ldrge	r1, [r4, #0]
 80047ac:	f021 0104 	bicge.w	r1, r1, #4
 80047b0:	6021      	strge	r1, [r4, #0]
 80047b2:	b90e      	cbnz	r6, 80047b8 <_printf_i+0x118>
 80047b4:	2d00      	cmp	r5, #0
 80047b6:	d04d      	beq.n	8004854 <_printf_i+0x1b4>
 80047b8:	4615      	mov	r5, r2
 80047ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80047be:	fb03 6711 	mls	r7, r3, r1, r6
 80047c2:	5dc7      	ldrb	r7, [r0, r7]
 80047c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047c8:	4637      	mov	r7, r6
 80047ca:	42bb      	cmp	r3, r7
 80047cc:	460e      	mov	r6, r1
 80047ce:	d9f4      	bls.n	80047ba <_printf_i+0x11a>
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d10b      	bne.n	80047ec <_printf_i+0x14c>
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	07de      	lsls	r6, r3, #31
 80047d8:	d508      	bpl.n	80047ec <_printf_i+0x14c>
 80047da:	6923      	ldr	r3, [r4, #16]
 80047dc:	6861      	ldr	r1, [r4, #4]
 80047de:	4299      	cmp	r1, r3
 80047e0:	bfde      	ittt	le
 80047e2:	2330      	movle	r3, #48	; 0x30
 80047e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80047ec:	1b52      	subs	r2, r2, r5
 80047ee:	6122      	str	r2, [r4, #16]
 80047f0:	f8cd a000 	str.w	sl, [sp]
 80047f4:	464b      	mov	r3, r9
 80047f6:	aa03      	add	r2, sp, #12
 80047f8:	4621      	mov	r1, r4
 80047fa:	4640      	mov	r0, r8
 80047fc:	f7ff fee2 	bl	80045c4 <_printf_common>
 8004800:	3001      	adds	r0, #1
 8004802:	d14c      	bne.n	800489e <_printf_i+0x1fe>
 8004804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004808:	b004      	add	sp, #16
 800480a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480e:	4835      	ldr	r0, [pc, #212]	; (80048e4 <_printf_i+0x244>)
 8004810:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004814:	6829      	ldr	r1, [r5, #0]
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	f851 6b04 	ldr.w	r6, [r1], #4
 800481c:	6029      	str	r1, [r5, #0]
 800481e:	061d      	lsls	r5, r3, #24
 8004820:	d514      	bpl.n	800484c <_printf_i+0x1ac>
 8004822:	07df      	lsls	r7, r3, #31
 8004824:	bf44      	itt	mi
 8004826:	f043 0320 	orrmi.w	r3, r3, #32
 800482a:	6023      	strmi	r3, [r4, #0]
 800482c:	b91e      	cbnz	r6, 8004836 <_printf_i+0x196>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	f023 0320 	bic.w	r3, r3, #32
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	2310      	movs	r3, #16
 8004838:	e7b0      	b.n	800479c <_printf_i+0xfc>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	f043 0320 	orr.w	r3, r3, #32
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	2378      	movs	r3, #120	; 0x78
 8004844:	4828      	ldr	r0, [pc, #160]	; (80048e8 <_printf_i+0x248>)
 8004846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800484a:	e7e3      	b.n	8004814 <_printf_i+0x174>
 800484c:	0659      	lsls	r1, r3, #25
 800484e:	bf48      	it	mi
 8004850:	b2b6      	uxthmi	r6, r6
 8004852:	e7e6      	b.n	8004822 <_printf_i+0x182>
 8004854:	4615      	mov	r5, r2
 8004856:	e7bb      	b.n	80047d0 <_printf_i+0x130>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	6826      	ldr	r6, [r4, #0]
 800485c:	6961      	ldr	r1, [r4, #20]
 800485e:	1d18      	adds	r0, r3, #4
 8004860:	6028      	str	r0, [r5, #0]
 8004862:	0635      	lsls	r5, r6, #24
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	d501      	bpl.n	800486c <_printf_i+0x1cc>
 8004868:	6019      	str	r1, [r3, #0]
 800486a:	e002      	b.n	8004872 <_printf_i+0x1d2>
 800486c:	0670      	lsls	r0, r6, #25
 800486e:	d5fb      	bpl.n	8004868 <_printf_i+0x1c8>
 8004870:	8019      	strh	r1, [r3, #0]
 8004872:	2300      	movs	r3, #0
 8004874:	6123      	str	r3, [r4, #16]
 8004876:	4615      	mov	r5, r2
 8004878:	e7ba      	b.n	80047f0 <_printf_i+0x150>
 800487a:	682b      	ldr	r3, [r5, #0]
 800487c:	1d1a      	adds	r2, r3, #4
 800487e:	602a      	str	r2, [r5, #0]
 8004880:	681d      	ldr	r5, [r3, #0]
 8004882:	6862      	ldr	r2, [r4, #4]
 8004884:	2100      	movs	r1, #0
 8004886:	4628      	mov	r0, r5
 8004888:	f7fb fcd2 	bl	8000230 <memchr>
 800488c:	b108      	cbz	r0, 8004892 <_printf_i+0x1f2>
 800488e:	1b40      	subs	r0, r0, r5
 8004890:	6060      	str	r0, [r4, #4]
 8004892:	6863      	ldr	r3, [r4, #4]
 8004894:	6123      	str	r3, [r4, #16]
 8004896:	2300      	movs	r3, #0
 8004898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800489c:	e7a8      	b.n	80047f0 <_printf_i+0x150>
 800489e:	6923      	ldr	r3, [r4, #16]
 80048a0:	462a      	mov	r2, r5
 80048a2:	4649      	mov	r1, r9
 80048a4:	4640      	mov	r0, r8
 80048a6:	47d0      	blx	sl
 80048a8:	3001      	adds	r0, #1
 80048aa:	d0ab      	beq.n	8004804 <_printf_i+0x164>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	079b      	lsls	r3, r3, #30
 80048b0:	d413      	bmi.n	80048da <_printf_i+0x23a>
 80048b2:	68e0      	ldr	r0, [r4, #12]
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	4298      	cmp	r0, r3
 80048b8:	bfb8      	it	lt
 80048ba:	4618      	movlt	r0, r3
 80048bc:	e7a4      	b.n	8004808 <_printf_i+0x168>
 80048be:	2301      	movs	r3, #1
 80048c0:	4632      	mov	r2, r6
 80048c2:	4649      	mov	r1, r9
 80048c4:	4640      	mov	r0, r8
 80048c6:	47d0      	blx	sl
 80048c8:	3001      	adds	r0, #1
 80048ca:	d09b      	beq.n	8004804 <_printf_i+0x164>
 80048cc:	3501      	adds	r5, #1
 80048ce:	68e3      	ldr	r3, [r4, #12]
 80048d0:	9903      	ldr	r1, [sp, #12]
 80048d2:	1a5b      	subs	r3, r3, r1
 80048d4:	42ab      	cmp	r3, r5
 80048d6:	dcf2      	bgt.n	80048be <_printf_i+0x21e>
 80048d8:	e7eb      	b.n	80048b2 <_printf_i+0x212>
 80048da:	2500      	movs	r5, #0
 80048dc:	f104 0619 	add.w	r6, r4, #25
 80048e0:	e7f5      	b.n	80048ce <_printf_i+0x22e>
 80048e2:	bf00      	nop
 80048e4:	08004c29 	.word	0x08004c29
 80048e8:	08004c3a 	.word	0x08004c3a

080048ec <memcpy>:
 80048ec:	440a      	add	r2, r1
 80048ee:	4291      	cmp	r1, r2
 80048f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80048f4:	d100      	bne.n	80048f8 <memcpy+0xc>
 80048f6:	4770      	bx	lr
 80048f8:	b510      	push	{r4, lr}
 80048fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004902:	4291      	cmp	r1, r2
 8004904:	d1f9      	bne.n	80048fa <memcpy+0xe>
 8004906:	bd10      	pop	{r4, pc}

08004908 <memmove>:
 8004908:	4288      	cmp	r0, r1
 800490a:	b510      	push	{r4, lr}
 800490c:	eb01 0402 	add.w	r4, r1, r2
 8004910:	d902      	bls.n	8004918 <memmove+0x10>
 8004912:	4284      	cmp	r4, r0
 8004914:	4623      	mov	r3, r4
 8004916:	d807      	bhi.n	8004928 <memmove+0x20>
 8004918:	1e43      	subs	r3, r0, #1
 800491a:	42a1      	cmp	r1, r4
 800491c:	d008      	beq.n	8004930 <memmove+0x28>
 800491e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004922:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004926:	e7f8      	b.n	800491a <memmove+0x12>
 8004928:	4402      	add	r2, r0
 800492a:	4601      	mov	r1, r0
 800492c:	428a      	cmp	r2, r1
 800492e:	d100      	bne.n	8004932 <memmove+0x2a>
 8004930:	bd10      	pop	{r4, pc}
 8004932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800493a:	e7f7      	b.n	800492c <memmove+0x24>

0800493c <_free_r>:
 800493c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800493e:	2900      	cmp	r1, #0
 8004940:	d044      	beq.n	80049cc <_free_r+0x90>
 8004942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004946:	9001      	str	r0, [sp, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f1a1 0404 	sub.w	r4, r1, #4
 800494e:	bfb8      	it	lt
 8004950:	18e4      	addlt	r4, r4, r3
 8004952:	f000 f913 	bl	8004b7c <__malloc_lock>
 8004956:	4a1e      	ldr	r2, [pc, #120]	; (80049d0 <_free_r+0x94>)
 8004958:	9801      	ldr	r0, [sp, #4]
 800495a:	6813      	ldr	r3, [r2, #0]
 800495c:	b933      	cbnz	r3, 800496c <_free_r+0x30>
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	6014      	str	r4, [r2, #0]
 8004962:	b003      	add	sp, #12
 8004964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004968:	f000 b90e 	b.w	8004b88 <__malloc_unlock>
 800496c:	42a3      	cmp	r3, r4
 800496e:	d908      	bls.n	8004982 <_free_r+0x46>
 8004970:	6825      	ldr	r5, [r4, #0]
 8004972:	1961      	adds	r1, r4, r5
 8004974:	428b      	cmp	r3, r1
 8004976:	bf01      	itttt	eq
 8004978:	6819      	ldreq	r1, [r3, #0]
 800497a:	685b      	ldreq	r3, [r3, #4]
 800497c:	1949      	addeq	r1, r1, r5
 800497e:	6021      	streq	r1, [r4, #0]
 8004980:	e7ed      	b.n	800495e <_free_r+0x22>
 8004982:	461a      	mov	r2, r3
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	b10b      	cbz	r3, 800498c <_free_r+0x50>
 8004988:	42a3      	cmp	r3, r4
 800498a:	d9fa      	bls.n	8004982 <_free_r+0x46>
 800498c:	6811      	ldr	r1, [r2, #0]
 800498e:	1855      	adds	r5, r2, r1
 8004990:	42a5      	cmp	r5, r4
 8004992:	d10b      	bne.n	80049ac <_free_r+0x70>
 8004994:	6824      	ldr	r4, [r4, #0]
 8004996:	4421      	add	r1, r4
 8004998:	1854      	adds	r4, r2, r1
 800499a:	42a3      	cmp	r3, r4
 800499c:	6011      	str	r1, [r2, #0]
 800499e:	d1e0      	bne.n	8004962 <_free_r+0x26>
 80049a0:	681c      	ldr	r4, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	6053      	str	r3, [r2, #4]
 80049a6:	4421      	add	r1, r4
 80049a8:	6011      	str	r1, [r2, #0]
 80049aa:	e7da      	b.n	8004962 <_free_r+0x26>
 80049ac:	d902      	bls.n	80049b4 <_free_r+0x78>
 80049ae:	230c      	movs	r3, #12
 80049b0:	6003      	str	r3, [r0, #0]
 80049b2:	e7d6      	b.n	8004962 <_free_r+0x26>
 80049b4:	6825      	ldr	r5, [r4, #0]
 80049b6:	1961      	adds	r1, r4, r5
 80049b8:	428b      	cmp	r3, r1
 80049ba:	bf04      	itt	eq
 80049bc:	6819      	ldreq	r1, [r3, #0]
 80049be:	685b      	ldreq	r3, [r3, #4]
 80049c0:	6063      	str	r3, [r4, #4]
 80049c2:	bf04      	itt	eq
 80049c4:	1949      	addeq	r1, r1, r5
 80049c6:	6021      	streq	r1, [r4, #0]
 80049c8:	6054      	str	r4, [r2, #4]
 80049ca:	e7ca      	b.n	8004962 <_free_r+0x26>
 80049cc:	b003      	add	sp, #12
 80049ce:	bd30      	pop	{r4, r5, pc}
 80049d0:	20000170 	.word	0x20000170

080049d4 <sbrk_aligned>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	4e0e      	ldr	r6, [pc, #56]	; (8004a10 <sbrk_aligned+0x3c>)
 80049d8:	460c      	mov	r4, r1
 80049da:	6831      	ldr	r1, [r6, #0]
 80049dc:	4605      	mov	r5, r0
 80049de:	b911      	cbnz	r1, 80049e6 <sbrk_aligned+0x12>
 80049e0:	f000 f8bc 	bl	8004b5c <_sbrk_r>
 80049e4:	6030      	str	r0, [r6, #0]
 80049e6:	4621      	mov	r1, r4
 80049e8:	4628      	mov	r0, r5
 80049ea:	f000 f8b7 	bl	8004b5c <_sbrk_r>
 80049ee:	1c43      	adds	r3, r0, #1
 80049f0:	d00a      	beq.n	8004a08 <sbrk_aligned+0x34>
 80049f2:	1cc4      	adds	r4, r0, #3
 80049f4:	f024 0403 	bic.w	r4, r4, #3
 80049f8:	42a0      	cmp	r0, r4
 80049fa:	d007      	beq.n	8004a0c <sbrk_aligned+0x38>
 80049fc:	1a21      	subs	r1, r4, r0
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 f8ac 	bl	8004b5c <_sbrk_r>
 8004a04:	3001      	adds	r0, #1
 8004a06:	d101      	bne.n	8004a0c <sbrk_aligned+0x38>
 8004a08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	20000174 	.word	0x20000174

08004a14 <_malloc_r>:
 8004a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a18:	1ccd      	adds	r5, r1, #3
 8004a1a:	f025 0503 	bic.w	r5, r5, #3
 8004a1e:	3508      	adds	r5, #8
 8004a20:	2d0c      	cmp	r5, #12
 8004a22:	bf38      	it	cc
 8004a24:	250c      	movcc	r5, #12
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	4607      	mov	r7, r0
 8004a2a:	db01      	blt.n	8004a30 <_malloc_r+0x1c>
 8004a2c:	42a9      	cmp	r1, r5
 8004a2e:	d905      	bls.n	8004a3c <_malloc_r+0x28>
 8004a30:	230c      	movs	r3, #12
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	2600      	movs	r6, #0
 8004a36:	4630      	mov	r0, r6
 8004a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a3c:	4e2e      	ldr	r6, [pc, #184]	; (8004af8 <_malloc_r+0xe4>)
 8004a3e:	f000 f89d 	bl	8004b7c <__malloc_lock>
 8004a42:	6833      	ldr	r3, [r6, #0]
 8004a44:	461c      	mov	r4, r3
 8004a46:	bb34      	cbnz	r4, 8004a96 <_malloc_r+0x82>
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f7ff ffc2 	bl	80049d4 <sbrk_aligned>
 8004a50:	1c43      	adds	r3, r0, #1
 8004a52:	4604      	mov	r4, r0
 8004a54:	d14d      	bne.n	8004af2 <_malloc_r+0xde>
 8004a56:	6834      	ldr	r4, [r6, #0]
 8004a58:	4626      	mov	r6, r4
 8004a5a:	2e00      	cmp	r6, #0
 8004a5c:	d140      	bne.n	8004ae0 <_malloc_r+0xcc>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	4631      	mov	r1, r6
 8004a62:	4638      	mov	r0, r7
 8004a64:	eb04 0803 	add.w	r8, r4, r3
 8004a68:	f000 f878 	bl	8004b5c <_sbrk_r>
 8004a6c:	4580      	cmp	r8, r0
 8004a6e:	d13a      	bne.n	8004ae6 <_malloc_r+0xd2>
 8004a70:	6821      	ldr	r1, [r4, #0]
 8004a72:	3503      	adds	r5, #3
 8004a74:	1a6d      	subs	r5, r5, r1
 8004a76:	f025 0503 	bic.w	r5, r5, #3
 8004a7a:	3508      	adds	r5, #8
 8004a7c:	2d0c      	cmp	r5, #12
 8004a7e:	bf38      	it	cc
 8004a80:	250c      	movcc	r5, #12
 8004a82:	4629      	mov	r1, r5
 8004a84:	4638      	mov	r0, r7
 8004a86:	f7ff ffa5 	bl	80049d4 <sbrk_aligned>
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d02b      	beq.n	8004ae6 <_malloc_r+0xd2>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	442b      	add	r3, r5
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	e00e      	b.n	8004ab4 <_malloc_r+0xa0>
 8004a96:	6822      	ldr	r2, [r4, #0]
 8004a98:	1b52      	subs	r2, r2, r5
 8004a9a:	d41e      	bmi.n	8004ada <_malloc_r+0xc6>
 8004a9c:	2a0b      	cmp	r2, #11
 8004a9e:	d916      	bls.n	8004ace <_malloc_r+0xba>
 8004aa0:	1961      	adds	r1, r4, r5
 8004aa2:	42a3      	cmp	r3, r4
 8004aa4:	6025      	str	r5, [r4, #0]
 8004aa6:	bf18      	it	ne
 8004aa8:	6059      	strne	r1, [r3, #4]
 8004aaa:	6863      	ldr	r3, [r4, #4]
 8004aac:	bf08      	it	eq
 8004aae:	6031      	streq	r1, [r6, #0]
 8004ab0:	5162      	str	r2, [r4, r5]
 8004ab2:	604b      	str	r3, [r1, #4]
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f104 060b 	add.w	r6, r4, #11
 8004aba:	f000 f865 	bl	8004b88 <__malloc_unlock>
 8004abe:	f026 0607 	bic.w	r6, r6, #7
 8004ac2:	1d23      	adds	r3, r4, #4
 8004ac4:	1af2      	subs	r2, r6, r3
 8004ac6:	d0b6      	beq.n	8004a36 <_malloc_r+0x22>
 8004ac8:	1b9b      	subs	r3, r3, r6
 8004aca:	50a3      	str	r3, [r4, r2]
 8004acc:	e7b3      	b.n	8004a36 <_malloc_r+0x22>
 8004ace:	6862      	ldr	r2, [r4, #4]
 8004ad0:	42a3      	cmp	r3, r4
 8004ad2:	bf0c      	ite	eq
 8004ad4:	6032      	streq	r2, [r6, #0]
 8004ad6:	605a      	strne	r2, [r3, #4]
 8004ad8:	e7ec      	b.n	8004ab4 <_malloc_r+0xa0>
 8004ada:	4623      	mov	r3, r4
 8004adc:	6864      	ldr	r4, [r4, #4]
 8004ade:	e7b2      	b.n	8004a46 <_malloc_r+0x32>
 8004ae0:	4634      	mov	r4, r6
 8004ae2:	6876      	ldr	r6, [r6, #4]
 8004ae4:	e7b9      	b.n	8004a5a <_malloc_r+0x46>
 8004ae6:	230c      	movs	r3, #12
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	4638      	mov	r0, r7
 8004aec:	f000 f84c 	bl	8004b88 <__malloc_unlock>
 8004af0:	e7a1      	b.n	8004a36 <_malloc_r+0x22>
 8004af2:	6025      	str	r5, [r4, #0]
 8004af4:	e7de      	b.n	8004ab4 <_malloc_r+0xa0>
 8004af6:	bf00      	nop
 8004af8:	20000170 	.word	0x20000170

08004afc <_realloc_r>:
 8004afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b00:	4680      	mov	r8, r0
 8004b02:	4614      	mov	r4, r2
 8004b04:	460e      	mov	r6, r1
 8004b06:	b921      	cbnz	r1, 8004b12 <_realloc_r+0x16>
 8004b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	f7ff bf81 	b.w	8004a14 <_malloc_r>
 8004b12:	b92a      	cbnz	r2, 8004b20 <_realloc_r+0x24>
 8004b14:	f7ff ff12 	bl	800493c <_free_r>
 8004b18:	4625      	mov	r5, r4
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b20:	f000 f838 	bl	8004b94 <_malloc_usable_size_r>
 8004b24:	4284      	cmp	r4, r0
 8004b26:	4607      	mov	r7, r0
 8004b28:	d802      	bhi.n	8004b30 <_realloc_r+0x34>
 8004b2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b2e:	d812      	bhi.n	8004b56 <_realloc_r+0x5a>
 8004b30:	4621      	mov	r1, r4
 8004b32:	4640      	mov	r0, r8
 8004b34:	f7ff ff6e 	bl	8004a14 <_malloc_r>
 8004b38:	4605      	mov	r5, r0
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d0ed      	beq.n	8004b1a <_realloc_r+0x1e>
 8004b3e:	42bc      	cmp	r4, r7
 8004b40:	4622      	mov	r2, r4
 8004b42:	4631      	mov	r1, r6
 8004b44:	bf28      	it	cs
 8004b46:	463a      	movcs	r2, r7
 8004b48:	f7ff fed0 	bl	80048ec <memcpy>
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4640      	mov	r0, r8
 8004b50:	f7ff fef4 	bl	800493c <_free_r>
 8004b54:	e7e1      	b.n	8004b1a <_realloc_r+0x1e>
 8004b56:	4635      	mov	r5, r6
 8004b58:	e7df      	b.n	8004b1a <_realloc_r+0x1e>
	...

08004b5c <_sbrk_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4d06      	ldr	r5, [pc, #24]	; (8004b78 <_sbrk_r+0x1c>)
 8004b60:	2300      	movs	r3, #0
 8004b62:	4604      	mov	r4, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	602b      	str	r3, [r5, #0]
 8004b68:	f7fc fc40 	bl	80013ec <_sbrk>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_sbrk_r+0x1a>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_sbrk_r+0x1a>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	20000178 	.word	0x20000178

08004b7c <__malloc_lock>:
 8004b7c:	4801      	ldr	r0, [pc, #4]	; (8004b84 <__malloc_lock+0x8>)
 8004b7e:	f000 b811 	b.w	8004ba4 <__retarget_lock_acquire_recursive>
 8004b82:	bf00      	nop
 8004b84:	2000017c 	.word	0x2000017c

08004b88 <__malloc_unlock>:
 8004b88:	4801      	ldr	r0, [pc, #4]	; (8004b90 <__malloc_unlock+0x8>)
 8004b8a:	f000 b80c 	b.w	8004ba6 <__retarget_lock_release_recursive>
 8004b8e:	bf00      	nop
 8004b90:	2000017c 	.word	0x2000017c

08004b94 <_malloc_usable_size_r>:
 8004b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b98:	1f18      	subs	r0, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bfbc      	itt	lt
 8004b9e:	580b      	ldrlt	r3, [r1, r0]
 8004ba0:	18c0      	addlt	r0, r0, r3
 8004ba2:	4770      	bx	lr

08004ba4 <__retarget_lock_acquire_recursive>:
 8004ba4:	4770      	bx	lr

08004ba6 <__retarget_lock_release_recursive>:
 8004ba6:	4770      	bx	lr

08004ba8 <_init>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	bf00      	nop
 8004bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bae:	bc08      	pop	{r3}
 8004bb0:	469e      	mov	lr, r3
 8004bb2:	4770      	bx	lr

08004bb4 <_fini>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr
