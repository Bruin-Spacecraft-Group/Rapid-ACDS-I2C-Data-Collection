
Flatsat Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007764  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079d4  080079d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080079d4  080079d4  000179d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079dc  080079dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079dc  080079dc  000179dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080079e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000070  08007a54  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08007a54  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001875d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002957  00000000  00000000  000387fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  0003b158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  0003c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f53  00000000  00000000  0003dbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ffe  00000000  00000000  0005eb33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de39b  00000000  00000000  00076b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154ecc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006508  00000000  00000000  00154f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800792c 	.word	0x0800792c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800792c 	.word	0x0800792c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2uiz>:
 8000bcc:	004a      	lsls	r2, r1, #1
 8000bce:	d211      	bcs.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd4:	d211      	bcs.n	8000bfa <__aeabi_d2uiz+0x2e>
 8000bd6:	d50d      	bpl.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be0:	d40e      	bmi.n	8000c00 <__aeabi_d2uiz+0x34>
 8000be2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfe:	d102      	bne.n	8000c06 <__aeabi_d2uiz+0x3a>
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c04:	4770      	bx	lr
 8000c06:	f04f 0000 	mov.w	r0, #0
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c20:	f000 b974 	b.w	8000f0c <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	468e      	mov	lr, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14d      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	d969      	bls.n	8000d24 <__udivmoddi4+0xe8>
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	b152      	cbz	r2, 8000c6c <__udivmoddi4+0x30>
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	f1c2 0120 	rsb	r1, r2, #32
 8000c5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c66:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6a:	4094      	lsls	r4, r2
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	0c21      	lsrs	r1, r4, #16
 8000c72:	fbbe f6f8 	udiv	r6, lr, r8
 8000c76:	fa1f f78c 	uxth.w	r7, ip
 8000c7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c82:	fb06 f107 	mul.w	r1, r6, r7
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c92:	f080 811f 	bcs.w	8000ed4 <__udivmoddi4+0x298>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 811c 	bls.w	8000ed4 <__udivmoddi4+0x298>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb00 f707 	mul.w	r7, r0, r7
 8000cb4:	42a7      	cmp	r7, r4
 8000cb6:	d90a      	bls.n	8000cce <__udivmoddi4+0x92>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc0:	f080 810a 	bcs.w	8000ed8 <__udivmoddi4+0x29c>
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	f240 8107 	bls.w	8000ed8 <__udivmoddi4+0x29c>
 8000cca:	4464      	add	r4, ip
 8000ccc:	3802      	subs	r0, #2
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	1be4      	subs	r4, r4, r7
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	b11d      	cbz	r5, 8000ce0 <__udivmoddi4+0xa4>
 8000cd8:	40d4      	lsrs	r4, r2
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0xc2>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80ef 	beq.w	8000ece <__udivmoddi4+0x292>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x160>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xd4>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80f9 	bhi.w	8000f02 <__udivmoddi4+0x2c6>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0303 	sbc.w	r3, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	469e      	mov	lr, r3
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e0      	beq.n	8000ce0 <__udivmoddi4+0xa4>
 8000d1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d22:	e7dd      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000d24:	b902      	cbnz	r2, 8000d28 <__udivmoddi4+0xec>
 8000d26:	deff      	udf	#255	; 0xff
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	f040 8092 	bne.w	8000e56 <__udivmoddi4+0x21a>
 8000d32:	eba1 010c 	sub.w	r1, r1, ip
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f fe8c 	uxth.w	lr, ip
 8000d3e:	2601      	movs	r6, #1
 8000d40:	0c20      	lsrs	r0, r4, #16
 8000d42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d46:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4e:	fb0e f003 	mul.w	r0, lr, r3
 8000d52:	4288      	cmp	r0, r1
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x12c>
 8000d56:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x12a>
 8000d60:	4288      	cmp	r0, r1
 8000d62:	f200 80cb 	bhi.w	8000efc <__udivmoddi4+0x2c0>
 8000d66:	4643      	mov	r3, r8
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d70:	fb07 1110 	mls	r1, r7, r0, r1
 8000d74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d78:	fb0e fe00 	mul.w	lr, lr, r0
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x156>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d88:	d202      	bcs.n	8000d90 <__udivmoddi4+0x154>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f200 80bb 	bhi.w	8000f06 <__udivmoddi4+0x2ca>
 8000d90:	4608      	mov	r0, r1
 8000d92:	eba4 040e 	sub.w	r4, r4, lr
 8000d96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9a:	e79c      	b.n	8000cd6 <__udivmoddi4+0x9a>
 8000d9c:	f1c6 0720 	rsb	r7, r6, #32
 8000da0:	40b3      	lsls	r3, r6
 8000da2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000daa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	431c      	orrs	r4, r3
 8000db4:	40f9      	lsrs	r1, r7
 8000db6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dba:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc2:	0c20      	lsrs	r0, r4, #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dda:	d90b      	bls.n	8000df4 <__udivmoddi4+0x1b8>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000de4:	f080 8088 	bcs.w	8000ef8 <__udivmoddi4+0x2bc>
 8000de8:	4288      	cmp	r0, r1
 8000dea:	f240 8085 	bls.w	8000ef8 <__udivmoddi4+0x2bc>
 8000dee:	f1a8 0802 	sub.w	r8, r8, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000e00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e08:	458e      	cmp	lr, r1
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x1e2>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e14:	d26c      	bcs.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e16:	458e      	cmp	lr, r1
 8000e18:	d96a      	bls.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	4461      	add	r1, ip
 8000e1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e22:	fba0 9402 	umull	r9, r4, r0, r2
 8000e26:	eba1 010e 	sub.w	r1, r1, lr
 8000e2a:	42a1      	cmp	r1, r4
 8000e2c:	46c8      	mov	r8, r9
 8000e2e:	46a6      	mov	lr, r4
 8000e30:	d356      	bcc.n	8000ee0 <__udivmoddi4+0x2a4>
 8000e32:	d053      	beq.n	8000edc <__udivmoddi4+0x2a0>
 8000e34:	b15d      	cbz	r5, 8000e4e <__udivmoddi4+0x212>
 8000e36:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e42:	fa22 f306 	lsr.w	r3, r2, r6
 8000e46:	40f1      	lsrs	r1, r6
 8000e48:	431f      	orrs	r7, r3
 8000e4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4e:	2600      	movs	r6, #0
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	f1c2 0320 	rsb	r3, r2, #32
 8000e5a:	40d8      	lsrs	r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa21 f303 	lsr.w	r3, r1, r3
 8000e64:	4091      	lsls	r1, r2
 8000e66:	4301      	orrs	r1, r0
 8000e68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e74:	fb07 3610 	mls	r6, r7, r0, r3
 8000e78:	0c0b      	lsrs	r3, r1, #16
 8000e7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e82:	429e      	cmp	r6, r3
 8000e84:	fa04 f402 	lsl.w	r4, r4, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x260>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e92:	d22f      	bcs.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e94:	429e      	cmp	r6, r3
 8000e96:	d92d      	bls.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1b9b      	subs	r3, r3, r6
 8000e9e:	b289      	uxth	r1, r1
 8000ea0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eac:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x28a>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ebc:	d216      	bcs.n	8000eec <__udivmoddi4+0x2b0>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d914      	bls.n	8000eec <__udivmoddi4+0x2b0>
 8000ec2:	3e02      	subs	r6, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	1ac9      	subs	r1, r1, r3
 8000ec8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ecc:	e738      	b.n	8000d40 <__udivmoddi4+0x104>
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e705      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e3      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6f8      	b.n	8000cce <__udivmoddi4+0x92>
 8000edc:	454b      	cmp	r3, r9
 8000ede:	d2a9      	bcs.n	8000e34 <__udivmoddi4+0x1f8>
 8000ee0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7a3      	b.n	8000e34 <__udivmoddi4+0x1f8>
 8000eec:	4646      	mov	r6, r8
 8000eee:	e7ea      	b.n	8000ec6 <__udivmoddi4+0x28a>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	e794      	b.n	8000e1e <__udivmoddi4+0x1e2>
 8000ef4:	4640      	mov	r0, r8
 8000ef6:	e7d1      	b.n	8000e9c <__udivmoddi4+0x260>
 8000ef8:	46d0      	mov	r8, sl
 8000efa:	e77b      	b.n	8000df4 <__udivmoddi4+0x1b8>
 8000efc:	3b02      	subs	r3, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	e732      	b.n	8000d68 <__udivmoddi4+0x12c>
 8000f02:	4630      	mov	r0, r6
 8000f04:	e709      	b.n	8000d1a <__udivmoddi4+0xde>
 8000f06:	4464      	add	r4, ip
 8000f08:	3802      	subs	r0, #2
 8000f0a:	e742      	b.n	8000d92 <__udivmoddi4+0x156>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b08d      	sub	sp, #52	; 0x34
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f000 febc 	bl	8001c92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f923 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1e:	f000 fb1f 	bl	8001560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f22:	f000 fad1 	bl	80014c8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f26:	f000 f969 	bl	80011fc <MX_ADC1_Init>
  MX_SPI1_Init();
 8000f2a:	f000 f9df 	bl	80012ec <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f2e:	f000 fa1b 	bl	8001368 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t adc2_val;
  double adc2_value;
  int pwm_val = 500;
 8000f32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f36:	61bb      	str	r3, [r7, #24]
  uint32_t adc1_val;
  double adc1_value;
  uint32_t nFault;

  uint16_t xData = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	82fb      	strh	r3, [r7, #22]
  uint16_t yData = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	82bb      	strh	r3, [r7, #20]
  uint16_t zData = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	827b      	strh	r3, [r7, #18]
  double xDataRef = 0;
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  double yDataRef = 0;
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  double zDataRef = 0;
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	e9c7 2300 	strd	r2, r3, [r7]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4877      	ldr	r0, [pc, #476]	; (8001148 <main+0x238>)
 8000f6c:	f004 f94e 	bl	800520c <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 500;
 8000f70:	4b76      	ldr	r3, [pc, #472]	; (800114c <main+0x23c>)
 8000f72:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34


  IIS2_INIT();
 8000f78:	f000 fc06 	bl	8001788 <IIS2_INIT>

  int counter = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f002 f98f 	bl	80032ac <HAL_GPIO_WritePin>
	  for(int a=0;a<100;a++){
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
 8000f92:	e062      	b.n	800105a <main+0x14a>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ((double)a * 10));
 8000f94:	6a38      	ldr	r0, [r7, #32]
 8000f96:	f7ff faed 	bl	8000574 <__aeabi_i2d>
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	4b6c      	ldr	r3, [pc, #432]	; (8001150 <main+0x240>)
 8000fa0:	f7ff fb52 	bl	8000648 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4967      	ldr	r1, [pc, #412]	; (8001148 <main+0x238>)
 8000faa:	680c      	ldr	r4, [r1, #0]
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fe0c 	bl	8000bcc <__aeabi_d2uiz>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	6363      	str	r3, [r4, #52]	; 0x34
		  yDataRef = 0;
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  counter = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
		  while(counter < 25){
 8000fc8:	e023      	b.n	8001012 <main+0x102>
			  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 8000fca:	2102      	movs	r1, #2
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f002 f954 	bl	800327c <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d01b      	beq.n	8001012 <main+0x102>
				  yData = IIS2_GET_DATA(OUTY_L, 1);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	206a      	movs	r0, #106	; 0x6a
 8000fde:	f000 fc05 	bl	80017ec <IIS2_GET_DATA>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	82bb      	strh	r3, [r7, #20]
				  yDataRef += yData*.15;
 8000fe6:	8abb      	ldrh	r3, [r7, #20]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fac3 	bl	8000574 <__aeabi_i2d>
 8000fee:	a354      	add	r3, pc, #336	; (adr r3, 8001140 <main+0x230>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff fb28 	bl	8000648 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001000:	f7ff f96c 	bl	80002dc <__adddf3>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				  counter++;
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	3301      	adds	r3, #1
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
		  while(counter < 25){
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	2b18      	cmp	r3, #24
 8001016:	ddd8      	ble.n	8000fca <main+0xba>
			  }
		  }
		  yDataRef /= 25.0;
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	4b4d      	ldr	r3, [pc, #308]	; (8001154 <main+0x244>)
 800101e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001022:	f7ff fc3b 	bl	800089c <__aeabi_ddiv>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  UART_PRINT_VAL((double) a);
 800102e:	6a38      	ldr	r0, [r7, #32]
 8001030:	f7ff faa0 	bl	8000574 <__aeabi_i2d>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	ec43 2b10 	vmov	d0, r2, r3
 800103c:	f000 faf4 	bl	8001628 <UART_PRINT_VAL>
		  UART_PRINT_TEXT(" ");
 8001040:	4845      	ldr	r0, [pc, #276]	; (8001158 <main+0x248>)
 8001042:	f000 fb8d 	bl	8001760 <UART_PRINT_TEXT>
		  UART_PRINT_VAL(yDataRef);
 8001046:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800104a:	f000 faed 	bl	8001628 <UART_PRINT_VAL>
		  UART_PRINT_TEXT("\n");
 800104e:	4843      	ldr	r0, [pc, #268]	; (800115c <main+0x24c>)
 8001050:	f000 fb86 	bl	8001760 <UART_PRINT_TEXT>
	  for(int a=0;a<100;a++){
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	3301      	adds	r3, #1
 8001058:	623b      	str	r3, [r7, #32]
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	2b63      	cmp	r3, #99	; 0x63
 800105e:	dd99      	ble.n	8000f94 <main+0x84>
	  }
	  for(int a=100;a>0;a--){
 8001060:	2364      	movs	r3, #100	; 0x64
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	e062      	b.n	800112c <main+0x21c>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ((double)a * 10));
 8001066:	69f8      	ldr	r0, [r7, #28]
 8001068:	f7ff fa84 	bl	8000574 <__aeabi_i2d>
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b37      	ldr	r3, [pc, #220]	; (8001150 <main+0x240>)
 8001072:	f7ff fae9 	bl	8000648 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4933      	ldr	r1, [pc, #204]	; (8001148 <main+0x238>)
 800107c:	680c      	ldr	r4, [r1, #0]
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fda3 	bl	8000bcc <__aeabi_d2uiz>
 8001086:	4603      	mov	r3, r0
 8001088:	6363      	str	r3, [r4, #52]	; 0x34
		  yDataRef = 0;
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  counter = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
		  while(counter < 25){
 800109a:	e023      	b.n	80010e4 <main+0x1d4>
			  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 800109c:	2102      	movs	r1, #2
 800109e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a2:	f002 f8eb 	bl	800327c <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d01b      	beq.n	80010e4 <main+0x1d4>
				  yData = IIS2_GET_DATA(OUTY_L, 1);
 80010ac:	2101      	movs	r1, #1
 80010ae:	206a      	movs	r0, #106	; 0x6a
 80010b0:	f000 fb9c 	bl	80017ec <IIS2_GET_DATA>
 80010b4:	4603      	mov	r3, r0
 80010b6:	82bb      	strh	r3, [r7, #20]
				  yDataRef += yData*.15;
 80010b8:	8abb      	ldrh	r3, [r7, #20]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa5a 	bl	8000574 <__aeabi_i2d>
 80010c0:	a31f      	add	r3, pc, #124	; (adr r3, 8001140 <main+0x230>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fabf 	bl	8000648 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010d2:	f7ff f903 	bl	80002dc <__adddf3>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				  counter++;
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	3301      	adds	r3, #1
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
		  while(counter < 25){
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	2b18      	cmp	r3, #24
 80010e8:	ddd8      	ble.n	800109c <main+0x18c>
			  }
		  }
		  yDataRef /= 25.0;
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <main+0x244>)
 80010f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010f4:	f7ff fbd2 	bl	800089c <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  UART_PRINT_VAL((double) a);
 8001100:	69f8      	ldr	r0, [r7, #28]
 8001102:	f7ff fa37 	bl	8000574 <__aeabi_i2d>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	ec43 2b10 	vmov	d0, r2, r3
 800110e:	f000 fa8b 	bl	8001628 <UART_PRINT_VAL>
		  UART_PRINT_TEXT(" ");
 8001112:	4811      	ldr	r0, [pc, #68]	; (8001158 <main+0x248>)
 8001114:	f000 fb24 	bl	8001760 <UART_PRINT_TEXT>
		  UART_PRINT_VAL(yDataRef);
 8001118:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800111c:	f000 fa84 	bl	8001628 <UART_PRINT_VAL>
		  UART_PRINT_TEXT("\n");
 8001120:	480e      	ldr	r0, [pc, #56]	; (800115c <main+0x24c>)
 8001122:	f000 fb1d 	bl	8001760 <UART_PRINT_TEXT>
	  for(int a=100;a>0;a--){
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b01      	subs	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2b00      	cmp	r3, #0
 8001130:	dc99      	bgt.n	8001066 <main+0x156>
	  }
	  UART_PRINT_TEXT("\n\n\n\n\n");
 8001132:	480b      	ldr	r0, [pc, #44]	; (8001160 <main+0x250>)
 8001134:	f000 fb14 	bl	8001760 <UART_PRINT_TEXT>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001138:	e722      	b.n	8000f80 <main+0x70>
 800113a:	bf00      	nop
 800113c:	f3af 8000 	nop.w
 8001140:	33333333 	.word	0x33333333
 8001144:	3fc33333 	.word	0x3fc33333
 8001148:	2000015c 	.word	0x2000015c
 800114c:	40012c00 	.word	0x40012c00
 8001150:	40240000 	.word	0x40240000
 8001154:	40390000 	.word	0x40390000
 8001158:	08007944 	.word	0x08007944
 800115c:	08007948 	.word	0x08007948
 8001160:	0800794c 	.word	0x0800794c

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	; 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	2238      	movs	r2, #56	; 0x38
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f005 ff56 	bl	8007024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001186:	2000      	movs	r0, #0
 8001188:	f002 f8a8 	bl	80032dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001196:	2340      	movs	r3, #64	; 0x40
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119e:	2302      	movs	r3, #2
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011a2:	2304      	movs	r3, #4
 80011a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011a6:	2355      	movs	r3, #85	; 0x55
 80011a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b6:	f107 0318 	add.w	r3, r7, #24
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 f932 	bl	8003424 <HAL_RCC_OscConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011c6:	f000 fb59 	bl	800187c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ca:	230f      	movs	r3, #15
 80011cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ce:	2303      	movs	r3, #3
 80011d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2104      	movs	r1, #4
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fc36 	bl	8003a54 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011ee:	f000 fb45 	bl	800187c <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3750      	adds	r7, #80	; 0x50
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2220      	movs	r2, #32
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f005 ff05 	bl	8007024 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <MX_ADC1_Init+0xe8>)
 800121c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001220:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001222:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <MX_ADC1_Init+0xe8>)
 8001224:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001228:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <MX_ADC1_Init+0xe8>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001230:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <MX_ADC1_Init+0xe8>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001236:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <MX_ADC1_Init+0xe8>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <MX_ADC1_Init+0xe8>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001242:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <MX_ADC1_Init+0xe8>)
 8001244:	2204      	movs	r2, #4
 8001246:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_ADC1_Init+0xe8>)
 800124a:	2200      	movs	r2, #0
 800124c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <MX_ADC1_Init+0xe8>)
 8001250:	2200      	movs	r2, #0
 8001252:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_ADC1_Init+0xe8>)
 8001256:	2201      	movs	r2, #1
 8001258:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <MX_ADC1_Init+0xe8>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_ADC1_Init+0xe8>)
 8001264:	2200      	movs	r2, #0
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_ADC1_Init+0xe8>)
 800126a:	2200      	movs	r2, #0
 800126c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_ADC1_Init+0xe8>)
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_ADC1_Init+0xe8>)
 8001278:	2200      	movs	r2, #0
 800127a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_ADC1_Init+0xe8>)
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001284:	4817      	ldr	r0, [pc, #92]	; (80012e4 <MX_ADC1_Init+0xe8>)
 8001286:	f000 ff4f 	bl	8002128 <HAL_ADC_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001290:	f000 faf4 	bl	800187c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4619      	mov	r1, r3
 800129e:	4811      	ldr	r0, [pc, #68]	; (80012e4 <MX_ADC1_Init+0xe8>)
 80012a0:	f001 fce2 	bl	8002c68 <HAL_ADCEx_MultiModeConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012aa:	f000 fae7 	bl	800187c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_ADC1_Init+0xec>)
 80012b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b2:	2306      	movs	r3, #6
 80012b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ba:	237f      	movs	r3, #127	; 0x7f
 80012bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012be:	2304      	movs	r3, #4
 80012c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_ADC1_Init+0xe8>)
 80012cc:	f001 f8b6 	bl	800243c <HAL_ADC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80012d6:	f000 fad1 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	3730      	adds	r7, #48	; 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000008c 	.word	0x2000008c
 80012e8:	3ef08000 	.word	0x3ef08000

080012ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_SPI1_Init+0x74>)
 80012f2:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <MX_SPI1_Init+0x78>)
 80012f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_SPI1_Init+0x74>)
 80012f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_SPI1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_SPI1_Init+0x74>)
 8001306:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800130a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_SPI1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_SPI1_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_SPI1_Init+0x74>)
 800131a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_SPI1_Init+0x74>)
 8001322:	2238      	movs	r2, #56	; 0x38
 8001324:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_SPI1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_SPI1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_SPI1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_SPI1_Init+0x74>)
 800133a:	2207      	movs	r2, #7
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_SPI1_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_SPI1_Init+0x74>)
 8001346:	2208      	movs	r2, #8
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_SPI1_Init+0x74>)
 800134c:	f002 ff8e 	bl	800426c <HAL_SPI_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001356:	f000 fa91 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200000f8 	.word	0x200000f8
 8001364:	40013000 	.word	0x40013000

08001368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b09c      	sub	sp, #112	; 0x70
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001388:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2234      	movs	r2, #52	; 0x34
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 fe3e 	bl	8007024 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a8:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <MX_TIM1_Init+0x158>)
 80013aa:	4a46      	ldr	r2, [pc, #280]	; (80014c4 <MX_TIM1_Init+0x15c>)
 80013ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013ae:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <MX_TIM1_Init+0x158>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <MX_TIM1_Init+0x158>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80013ba:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <MX_TIM1_Init+0x158>)
 80013bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b3f      	ldr	r3, [pc, #252]	; (80014c0 <MX_TIM1_Init+0x158>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c8:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <MX_TIM1_Init+0x158>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b3c      	ldr	r3, [pc, #240]	; (80014c0 <MX_TIM1_Init+0x158>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d4:	483a      	ldr	r0, [pc, #232]	; (80014c0 <MX_TIM1_Init+0x158>)
 80013d6:	f003 fe61 	bl	800509c <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013e0:	f000 fa4c 	bl	800187c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013ee:	4619      	mov	r1, r3
 80013f0:	4833      	ldr	r0, [pc, #204]	; (80014c0 <MX_TIM1_Init+0x158>)
 80013f2:	f004 f91f 	bl	8005634 <HAL_TIM_ConfigClockSource>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013fc:	f000 fa3e 	bl	800187c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001400:	482f      	ldr	r0, [pc, #188]	; (80014c0 <MX_TIM1_Init+0x158>)
 8001402:	f003 fea2 	bl	800514a <HAL_TIM_PWM_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800140c:	f000 fa36 	bl	800187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800141c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001420:	4619      	mov	r1, r3
 8001422:	4827      	ldr	r0, [pc, #156]	; (80014c0 <MX_TIM1_Init+0x158>)
 8001424:	f004 fe48 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800142e:	f000 fa25 	bl	800187c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001432:	2360      	movs	r3, #96	; 0x60
 8001434:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143a:	2300      	movs	r3, #0
 800143c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800143e:	2300      	movs	r3, #0
 8001440:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001452:	2200      	movs	r2, #0
 8001454:	4619      	mov	r1, r3
 8001456:	481a      	ldr	r0, [pc, #104]	; (80014c0 <MX_TIM1_Init+0x158>)
 8001458:	f003 ffd8 	bl	800540c <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001462:	f000 fa0b 	bl	800187c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800147a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800148c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <MX_TIM1_Init+0x158>)
 80014a4:	f004 fe8a 	bl	80061bc <HAL_TIMEx_ConfigBreakDeadTime>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80014ae:	f000 f9e5 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <MX_TIM1_Init+0x158>)
 80014b4:	f000 fac2 	bl	8001a3c <HAL_TIM_MspPostInit>

}
 80014b8:	bf00      	nop
 80014ba:	3770      	adds	r7, #112	; 0x70
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000015c 	.word	0x2000015c
 80014c4:	40012c00 	.word	0x40012c00

080014c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <MX_USART2_UART_Init+0x90>)
 80014ce:	4a23      	ldr	r2, [pc, #140]	; (800155c <MX_USART2_UART_Init+0x94>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <MX_USART2_UART_Init+0x90>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <MX_USART2_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_USART2_UART_Init+0x90>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <MX_USART2_UART_Init+0x90>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_USART2_UART_Init+0x90>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_USART2_UART_Init+0x90>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <MX_USART2_UART_Init+0x90>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_USART2_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <MX_USART2_UART_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <MX_USART2_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001510:	4811      	ldr	r0, [pc, #68]	; (8001558 <MX_USART2_UART_Init+0x90>)
 8001512:	f004 fef3 	bl	80062fc <HAL_UART_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800151c:	f000 f9ae 	bl	800187c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001520:	2100      	movs	r1, #0
 8001522:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_USART2_UART_Init+0x90>)
 8001524:	f005 fc8a 	bl	8006e3c <HAL_UARTEx_SetTxFifoThreshold>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800152e:	f000 f9a5 	bl	800187c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001532:	2100      	movs	r1, #0
 8001534:	4808      	ldr	r0, [pc, #32]	; (8001558 <MX_USART2_UART_Init+0x90>)
 8001536:	f005 fcbf 	bl	8006eb8 <HAL_UARTEx_SetRxFifoThreshold>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001540:	f000 f99c 	bl	800187c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <MX_USART2_UART_Init+0x90>)
 8001546:	f005 fc40 	bl	8006dca <HAL_UARTEx_DisableFifoMode>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001550:	f000 f994 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200001a8 	.word	0x200001a8
 800155c:	40004400 	.word	0x40004400

08001560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <MX_GPIO_Init+0xc0>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a29      	ldr	r2, [pc, #164]	; (8001620 <MX_GPIO_Init+0xc0>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <MX_GPIO_Init+0xc0>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b24      	ldr	r3, [pc, #144]	; (8001620 <MX_GPIO_Init+0xc0>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a23      	ldr	r2, [pc, #140]	; (8001620 <MX_GPIO_Init+0xc0>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <MX_GPIO_Init+0xc0>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b0:	f001 fe7c 	bl	80032ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ba:	481a      	ldr	r0, [pc, #104]	; (8001624 <MX_GPIO_Init+0xc4>)
 80015bc:	f001 fe76 	bl	80032ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015c0:	2302      	movs	r3, #2
 80015c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4619      	mov	r1, r3
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d6:	f001 fccf 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f001 fcbf 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4619      	mov	r1, r3
 8001612:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_GPIO_Init+0xc4>)
 8001614:	f001 fcb0 	bl	8002f78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001618:	bf00      	nop
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	48000400 	.word	0x48000400

08001628 <UART_PRINT_VAL>:

/* USER CODE BEGIN 4 */
void UART_PRINT_VAL(double value){
 8001628:	b580      	push	{r7, lr}
 800162a:	b096      	sub	sp, #88	; 0x58
 800162c:	af00      	add	r7, sp, #0
 800162e:	ed87 0b00 	vstr	d0, [r7]
    char total[50];
    char temp[10];
    if(value < 0){
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163e:	f7ff fa75 	bl	8000b2c <__aeabi_dcmplt>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <UART_PRINT_VAL+0x26>
       UART_PRINT_TEXT("-");
 8001648:	4840      	ldr	r0, [pc, #256]	; (800174c <UART_PRINT_VAL+0x124>)
 800164a:	f000 f889 	bl	8001760 <UART_PRINT_TEXT>
    }
    sprintf(total, "%i", abs((int)value));
 800164e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001652:	f7ff fa93 	bl	8000b7c <__aeabi_d2iz>
 8001656:	4603      	mov	r3, r0
 8001658:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800165c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001660:	f107 0318 	add.w	r3, r7, #24
 8001664:	493a      	ldr	r1, [pc, #232]	; (8001750 <UART_PRINT_VAL+0x128>)
 8001666:	4618      	mov	r0, r3
 8001668:	f005 fce4 	bl	8007034 <siprintf>
    strcat(total, ".");
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fdd5 	bl	8000220 <strlen>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	f107 0318 	add.w	r3, r7, #24
 800167e:	4413      	add	r3, r2
 8001680:	4934      	ldr	r1, [pc, #208]	; (8001754 <UART_PRINT_VAL+0x12c>)
 8001682:	461a      	mov	r2, r3
 8001684:	460b      	mov	r3, r1
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	8013      	strh	r3, [r2, #0]
    double currentVal = (value - (int) value);
 800168a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800168e:	f7ff fa75 	bl	8000b7c <__aeabi_d2iz>
 8001692:	4603      	mov	r3, r0
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff6d 	bl	8000574 <__aeabi_i2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016a2:	f7fe fe19 	bl	80002d8 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    for(int a=0;a<6;a++){
 80016ae:	2300      	movs	r3, #0
 80016b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016b2:	e036      	b.n	8001722 <UART_PRINT_VAL+0xfa>
        currentVal *= 10;
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <UART_PRINT_VAL+0x130>)
 80016ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016be:	f7fe ffc3 	bl	8000648 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        sprintf(temp, "%i", abs((int)currentVal));
 80016ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016ce:	f7ff fa55 	bl	8000b7c <__aeabi_d2iz>
 80016d2:	4603      	mov	r3, r0
 80016d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80016d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	491b      	ldr	r1, [pc, #108]	; (8001750 <UART_PRINT_VAL+0x128>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 fca6 	bl	8007034 <siprintf>
        strcat(total, temp);
 80016e8:	f107 020c 	add.w	r2, r7, #12
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f005 fcbe 	bl	8007074 <strcat>
        currentVal -= (int)currentVal;
 80016f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016fc:	f7ff fa3e 	bl	8000b7c <__aeabi_d2iz>
 8001700:	4603      	mov	r3, r0
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ff36 	bl	8000574 <__aeabi_i2d>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001710:	f7fe fde2 	bl	80002d8 <__aeabi_dsub>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    for(int a=0;a<6;a++){
 800171c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171e:	3301      	adds	r3, #1
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001724:	2b05      	cmp	r3, #5
 8001726:	ddc5      	ble.n	80016b4 <UART_PRINT_VAL+0x8c>
    }
    HAL_UART_Transmit(&huart2, total, strlen(total), 100);
 8001728:	f107 0318 	add.w	r3, r7, #24
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd77 	bl	8000220 <strlen>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	f107 0118 	add.w	r1, r7, #24
 800173a:	2364      	movs	r3, #100	; 0x64
 800173c:	4807      	ldr	r0, [pc, #28]	; (800175c <UART_PRINT_VAL+0x134>)
 800173e:	f004 fe2d 	bl	800639c <HAL_UART_Transmit>
}
 8001742:	bf00      	nop
 8001744:	3758      	adds	r7, #88	; 0x58
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	08007954 	.word	0x08007954
 8001750:	08007958 	.word	0x08007958
 8001754:	0800795c 	.word	0x0800795c
 8001758:	40240000 	.word	0x40240000
 800175c:	200001a8 	.word	0x200001a8

08001760 <UART_PRINT_TEXT>:
void UART_PRINT_TEXT(uint8_t* MSG){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, MSG, strlen(MSG), 100);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7fe fd59 	bl	8000220 <strlen>
 800176e:	4603      	mov	r3, r0
 8001770:	b29a      	uxth	r2, r3
 8001772:	2364      	movs	r3, #100	; 0x64
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4803      	ldr	r0, [pc, #12]	; (8001784 <UART_PRINT_TEXT+0x24>)
 8001778:	f004 fe10 	bl	800639c <HAL_UART_Transmit>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200001a8 	.word	0x200001a8

08001788 <IIS2_INIT>:

void IIS2_INIT(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
	//uint8_t data[3] = {0x8C, 0x01, 0x01}; // OPERATION MODE, TEM COMP 100Hz CONTINUOUS MODE, ENABLE LPF, DATA READY INT
	uint8_t data1[2] = {CFG_REG_A, 0x8c};
 800178e:	f648 4360 	movw	r3, #35936	; 0x8c60
 8001792:	81bb      	strh	r3, [r7, #12]
	uint8_t data2[2] = {CFG_REG_B, 0x01};
 8001794:	f240 1361 	movw	r3, #353	; 0x161
 8001798:	813b      	strh	r3, [r7, #8]
	uint8_t data3[2] = {CFG_REG_C, 0x21};
 800179a:	f242 1362 	movw	r3, #8546	; 0x2162
 800179e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2140      	movs	r1, #64	; 0x40
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f001 fd80 	bl	80032ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data1, 2, 100); // TEMP COMP, 100Hz, CONTINUOUS MODE
 80017ac:	f107 010c 	add.w	r1, r7, #12
 80017b0:	2364      	movs	r3, #100	; 0x64
 80017b2:	2202      	movs	r2, #2
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <IIS2_INIT+0x60>)
 80017b6:	f002 fe04 	bl	80043c2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data2, 2, 100); // ENABLE LPF
 80017ba:	f107 0108 	add.w	r1, r7, #8
 80017be:	2364      	movs	r3, #100	; 0x64
 80017c0:	2202      	movs	r2, #2
 80017c2:	4809      	ldr	r0, [pc, #36]	; (80017e8 <IIS2_INIT+0x60>)
 80017c4:	f002 fdfd 	bl	80043c2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data3, 2, 100); // DATA READY INT, DISABLE I2C
 80017c8:	1d39      	adds	r1, r7, #4
 80017ca:	2364      	movs	r3, #100	; 0x64
 80017cc:	2202      	movs	r2, #2
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <IIS2_INIT+0x60>)
 80017d0:	f002 fdf7 	bl	80043c2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2140      	movs	r1, #64	; 0x40
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017dc:	f001 fd66 	bl	80032ac <HAL_GPIO_WritePin>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200000f8 	.word	0x200000f8

080017ec <IIS2_GET_DATA>:
int IIS2_GET_DATA(uint8_t addr, uint16_t dataSize){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	460a      	mov	r2, r1
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	4613      	mov	r3, r2
 80017fa:	80bb      	strh	r3, [r7, #4]
	int val = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
	uint16_t value = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	827b      	strh	r3, [r7, #18]
	uint8_t sendData[1] = {0x80 | addr};
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800180a:	b2db      	uxtb	r3, r3
 800180c:	743b      	strb	r3, [r7, #16]
	uint8_t receiveData[2];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	2140      	movs	r1, #64	; 0x40
 8001812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001816:	f001 fd49 	bl	80032ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, sendData, 1, 100);
 800181a:	f107 0110 	add.w	r1, r7, #16
 800181e:	2364      	movs	r3, #100	; 0x64
 8001820:	2201      	movs	r2, #1
 8001822:	4815      	ldr	r0, [pc, #84]	; (8001878 <IIS2_GET_DATA+0x8c>)
 8001824:	f002 fdcd 	bl	80043c2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, receiveData, 2, 100);
 8001828:	f107 010c 	add.w	r1, r7, #12
 800182c:	2364      	movs	r3, #100	; 0x64
 800182e:	2202      	movs	r2, #2
 8001830:	4811      	ldr	r0, [pc, #68]	; (8001878 <IIS2_GET_DATA+0x8c>)
 8001832:	f002 ff34 	bl	800469e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	2140      	movs	r1, #64	; 0x40
 800183a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183e:	f001 fd35 	bl	80032ac <HAL_GPIO_WritePin>
	value = (receiveData[1] << 8 | receiveData[0]);
 8001842:	7b7b      	ldrb	r3, [r7, #13]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	b21a      	sxth	r2, r3
 8001848:	7b3b      	ldrb	r3, [r7, #12]
 800184a:	b21b      	sxth	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	b21b      	sxth	r3, r3
 8001850:	827b      	strh	r3, [r7, #18]
	if(value > 0x7fff){
 8001852:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001856:	2b00      	cmp	r3, #0
 8001858:	da06      	bge.n	8001868 <IIS2_GET_DATA+0x7c>
		val = ~value;
 800185a:	8a7b      	ldrh	r3, [r7, #18]
 800185c:	43db      	mvns	r3, r3
 800185e:	617b      	str	r3, [r7, #20]
		val = -value;
 8001860:	8a7b      	ldrh	r3, [r7, #18]
 8001862:	425b      	negs	r3, r3
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e001      	b.n	800186c <IIS2_GET_DATA+0x80>
	}
	else{
		val = value;
 8001868:	8a7b      	ldrh	r3, [r7, #18]
 800186a:	617b      	str	r3, [r7, #20]
	}
	return val;
 800186c:	697b      	ldr	r3, [r7, #20]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200000f8 	.word	0x200000f8

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001884:	e7fe      	b.n	8001884 <Error_Handler+0x8>
	...

08001888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_MspInit+0x44>)
 8001890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <HAL_MspInit+0x44>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6613      	str	r3, [r2, #96]	; 0x60
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_MspInit+0x44>)
 800189c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_MspInit+0x44>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <HAL_MspInit+0x44>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6593      	str	r3, [r2, #88]	; 0x58
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_MspInit+0x44>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b09a      	sub	sp, #104	; 0x68
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2244      	movs	r2, #68	; 0x44
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f005 fb97 	bl	8007024 <memset>
  if(hadc->Instance==ADC1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018fe:	d133      	bne.n	8001968 <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001904:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001906:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fabb 	bl	8003e8c <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800191c:	f7ff ffae 	bl	800187c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_ADC_MspInit+0xa0>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	4a12      	ldr	r2, [pc, #72]	; (8001970 <HAL_ADC_MspInit+0xa0>)
 8001926:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800192a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_ADC_MspInit+0xa0>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001938:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_ADC_MspInit+0xa0>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <HAL_ADC_MspInit+0xa0>)
 800193e:	f043 0302 	orr.w	r3, r3, #2
 8001942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_ADC_MspInit+0xa0>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001950:	2301      	movs	r3, #1
 8001952:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001954:	2303      	movs	r3, #3
 8001956:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001960:	4619      	mov	r1, r3
 8001962:	4804      	ldr	r0, [pc, #16]	; (8001974 <HAL_ADC_MspInit+0xa4>)
 8001964:	f001 fb08 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001968:	bf00      	nop
 800196a:	3768      	adds	r7, #104	; 0x68
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	48000400 	.word	0x48000400

08001978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_SPI_MspInit+0x7c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d128      	bne.n	80019ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_SPI_MspInit+0x80>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199e:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <HAL_SPI_MspInit+0x80>)
 80019a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a4:	6613      	str	r3, [r2, #96]	; 0x60
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_SPI_MspInit+0x80>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_SPI_MspInit+0x80>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <HAL_SPI_MspInit+0x80>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_SPI_MspInit+0x80>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019ca:	23e0      	movs	r3, #224	; 0xe0
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019da:	2305      	movs	r3, #5
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e8:	f001 fac6 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40013000 	.word	0x40013000
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_TIM_Base_MspInit+0x38>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d10b      	bne.n	8001a26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_TIM_Base_MspInit+0x3c>)
 8001a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a12:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <HAL_TIM_Base_MspInit+0x3c>)
 8001a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a18:	6613      	str	r3, [r2, #96]	; 0x60
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <HAL_TIM_Base_MspInit+0x3c>)
 8001a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40012c00 	.word	0x40012c00
 8001a38:	40021000 	.word	0x40021000

08001a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <HAL_TIM_MspPostInit+0x68>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d11d      	bne.n	8001a9a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_TIM_MspPostInit+0x6c>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <HAL_TIM_MspPostInit+0x6c>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_TIM_MspPostInit+0x6c>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a88:	2306      	movs	r3, #6
 8001a8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a96:	f001 fa6f 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40012c00 	.word	0x40012c00
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b09a      	sub	sp, #104	; 0x68
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	2244      	movs	r2, #68	; 0x44
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f005 faa9 	bl	8007024 <memset>
  if(huart->Instance==USART2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_UART_MspInit+0xa8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d136      	bne.n	8001b4a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001adc:	2302      	movs	r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 f9cf 	bl	8003e8c <HAL_RCCEx_PeriphCLKConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001af4:	f7ff fec2 	bl	800187c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_UART_MspInit+0xac>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <HAL_UART_MspInit+0xac>)
 8001afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b02:	6593      	str	r3, [r2, #88]	; 0x58
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_UART_MspInit+0xac>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_UART_MspInit+0xac>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <HAL_UART_MspInit+0xac>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_UART_MspInit+0xac>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f001 fa17 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3768      	adds	r7, #104	; 0x68
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40004400 	.word	0x40004400
 8001b58:	40021000 	.word	0x40021000

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <NMI_Handler+0x4>

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba8:	f000 f8c6 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <_sbrk+0x5c>)
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <_sbrk+0x60>)
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <_sbrk+0x64>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <_sbrk+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d207      	bcs.n	8001bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be0:	f005 f9f6 	bl	8006fd0 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	220c      	movs	r2, #12
 8001be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bee:	e009      	b.n	8001c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <_sbrk+0x64>)
 8001c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20008000 	.word	0x20008000
 8001c10:	00000400 	.word	0x00000400
 8001c14:	20000238 	.word	0x20000238
 8001c18:	20000250 	.word	0x20000250

08001c1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <SystemInit+0x20>)
 8001c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <SystemInit+0x20>)
 8001c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480d      	ldr	r0, [pc, #52]	; (8001c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c46:	490e      	ldr	r1, [pc, #56]	; (8001c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c48:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <LoopForever+0xe>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c5c:	4c0b      	ldr	r4, [pc, #44]	; (8001c8c <LoopForever+0x16>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c6a:	f7ff ffd7 	bl	8001c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f005 f9b5 	bl	8006fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c72:	f7ff f94d 	bl	8000f10 <main>

08001c76 <LoopForever>:

LoopForever:
    b LoopForever
 8001c76:	e7fe      	b.n	8001c76 <LoopForever>
  ldr   r0, =_estack
 8001c78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c84:	080079e4 	.word	0x080079e4
  ldr r2, =_sbss
 8001c88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c8c:	20000250 	.word	0x20000250

08001c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC1_2_IRQHandler>

08001c92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f001 f939 	bl	8002f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f000 f80e 	bl	8001cc4 <HAL_InitTick>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	71fb      	strb	r3, [r7, #7]
 8001cb2:	e001      	b.n	8001cb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cb4:	f7ff fde8 	bl	8001888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cb8:	79fb      	ldrb	r3, [r7, #7]

}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cd0:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_InitTick+0x68>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d022      	beq.n	8001d1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_InitTick+0x6c>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_InitTick+0x68>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 f936 	bl	8002f5e <HAL_SYSTICK_Config>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10f      	bne.n	8001d18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	d809      	bhi.n	8001d12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d06:	f001 f910 	bl	8002f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_InitTick+0x70>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e007      	b.n	8001d22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	e004      	b.n	8001d22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e001      	b.n	8001d22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000008 	.word	0x20000008
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000004 	.word	0x20000004

08001d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_IncTick+0x1c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_IncTick+0x20>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <HAL_IncTick+0x1c>)
 8001d48:	6013      	str	r3, [r2, #0]
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	2000023c 	.word	0x2000023c
 8001d58:	20000008 	.word	0x20000008

08001d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_GetTick+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	2000023c 	.word	0x2000023c

08001d74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	609a      	str	r2, [r3, #8]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3360      	adds	r3, #96	; 0x60
 8001dee:	461a      	mov	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <LL_ADC_SetOffset+0x44>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e14:	bf00      	nop
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	03fff000 	.word	0x03fff000

08001e24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3360      	adds	r3, #96	; 0x60
 8001e32:	461a      	mov	r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3360      	adds	r3, #96	; 0x60
 8001e60:	461a      	mov	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b087      	sub	sp, #28
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3360      	adds	r3, #96	; 0x60
 8001e96:	461a      	mov	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3360      	adds	r3, #96	; 0x60
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	615a      	str	r2, [r3, #20]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3330      	adds	r3, #48	; 0x30
 8001f28:	461a      	mov	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	4413      	add	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	211f      	movs	r1, #31
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0e9b      	lsrs	r3, r3, #26
 8001f50:	f003 011f 	and.w	r1, r3, #31
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3314      	adds	r3, #20
 8001f80:	461a      	mov	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	0e5b      	lsrs	r3, r3, #25
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	4413      	add	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	0d1b      	lsrs	r3, r3, #20
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	2107      	movs	r1, #7
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	0d1b      	lsrs	r3, r3, #20
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d10a      	bne.n	8001ff2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001ff0:	e00a      	b.n	8002008 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	43db      	mvns	r3, r3
 8002000:	401a      	ands	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	407f0000 	.word	0x407f0000

08002018 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6093      	str	r3, [r2, #8]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800204c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002050:	d101      	bne.n	8002056 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002078:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020a0:	d101      	bne.n	80020a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <LL_ADC_IsEnabled+0x18>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <LL_ADC_IsEnabled+0x1a>
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d101      	bne.n	80020f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b08      	cmp	r3, #8
 8002112:	d101      	bne.n	8002118 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e177      	b.n	8002432 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fbbd 	bl	80018d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff67 	bl	800203c <LL_ADC_IsDeepPowerDownEnabled>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d004      	beq.n	800217e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff4d 	bl	8002018 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff82 	bl	800208c <LL_ADC_IsInternalRegulatorEnabled>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d115      	bne.n	80021ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff66 	bl	8002064 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002198:	4b9c      	ldr	r3, [pc, #624]	; (800240c <HAL_ADC_Init+0x2e4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	4a9c      	ldr	r2, [pc, #624]	; (8002410 <HAL_ADC_Init+0x2e8>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	3301      	adds	r3, #1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021ac:	e002      	b.n	80021b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f9      	bne.n	80021ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff64 	bl	800208c <LL_ADC_IsInternalRegulatorEnabled>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10d      	bne.n	80021e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	f043 0210 	orr.w	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021da:	f043 0201 	orr.w	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff75 	bl	80020da <LL_ADC_REG_IsConversionOngoing>
 80021f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f040 8110 	bne.w	8002420 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f040 810c 	bne.w	8002420 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002210:	f043 0202 	orr.w	r2, r3, #2
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff49 	bl	80020b4 <LL_ADC_IsEnabled>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d111      	bne.n	800224c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002228:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800222c:	f7ff ff42 	bl	80020b4 <LL_ADC_IsEnabled>
 8002230:	4604      	mov	r4, r0
 8002232:	4878      	ldr	r0, [pc, #480]	; (8002414 <HAL_ADC_Init+0x2ec>)
 8002234:	f7ff ff3e 	bl	80020b4 <LL_ADC_IsEnabled>
 8002238:	4603      	mov	r3, r0
 800223a:	4323      	orrs	r3, r4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4619      	mov	r1, r3
 8002246:	4874      	ldr	r0, [pc, #464]	; (8002418 <HAL_ADC_Init+0x2f0>)
 8002248:	f7ff fd94 	bl	8001d74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7f5b      	ldrb	r3, [r3, #29]
 8002250:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002256:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800225c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002262:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800226a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002276:	2b01      	cmp	r3, #1
 8002278:	d106      	bne.n	8002288 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	3b01      	subs	r3, #1
 8002280:	045b      	lsls	r3, r3, #17
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HAL_ADC_Init+0x2f4>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	69b9      	ldr	r1, [r7, #24]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ff01 	bl	80020da <LL_ADC_REG_IsConversionOngoing>
 80022d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff0e 	bl	8002100 <LL_ADC_INJ_IsConversionOngoing>
 80022e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d16d      	bne.n	80023c8 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d16a      	bne.n	80023c8 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022f6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022fe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800230e:	f023 0302 	bic.w	r3, r3, #2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	69b9      	ldr	r1, [r7, #24]
 8002318:	430b      	orrs	r3, r1
 800231a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d017      	beq.n	8002354 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002332:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800233c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6911      	ldr	r1, [r2, #16]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	430b      	orrs	r3, r1
 800234e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002352:	e013      	b.n	800237c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002362:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002378:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002382:	2b01      	cmp	r3, #1
 8002384:	d118      	bne.n	80023b8 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800239c:	4311      	orrs	r1, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023a2:	4311      	orrs	r1, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023a8:	430a      	orrs	r2, r1
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0201 	orr.w	r2, r2, #1
 80023b4:	611a      	str	r2, [r3, #16]
 80023b6:	e007      	b.n	80023c8 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d10c      	bne.n	80023ea <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f023 010f 	bic.w	r1, r3, #15
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
 80023e8:	e007      	b.n	80023fa <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 020f 	bic.w	r2, r2, #15
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	f043 0201 	orr.w	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	65da      	str	r2, [r3, #92]	; 0x5c
 800240a:	e011      	b.n	8002430 <HAL_ADC_Init+0x308>
 800240c:	20000000 	.word	0x20000000
 8002410:	053e2d63 	.word	0x053e2d63
 8002414:	50000100 	.word	0x50000100
 8002418:	50000300 	.word	0x50000300
 800241c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	f043 0210 	orr.w	r2, r3, #16
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002430:	7ffb      	ldrb	r3, [r7, #31]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	bf00      	nop

0800243c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b0b6      	sub	sp, #216	; 0xd8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x22>
 800245a:	2302      	movs	r3, #2
 800245c:	e3c8      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x7b4>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fe35 	bl	80020da <LL_ADC_REG_IsConversionOngoing>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 83ad 	bne.w	8002bd2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	f7ff fd47 	bl	8001f18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fe23 	bl	80020da <LL_ADC_REG_IsConversionOngoing>
 8002494:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fe2f 	bl	8002100 <LL_ADC_INJ_IsConversionOngoing>
 80024a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 81d9 	bne.w	8002862 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 81d4 	bne.w	8002862 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024c2:	d10f      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2200      	movs	r2, #0
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7ff fd4e 	bl	8001f70 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fd08 	bl	8001ef2 <LL_ADC_SetSamplingTimeCommonConfig>
 80024e2:	e00e      	b.n	8002502 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	461a      	mov	r2, r3
 80024f2:	f7ff fd3d 	bl	8001f70 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fcf8 	bl	8001ef2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	08db      	lsrs	r3, r3, #3
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d022      	beq.n	800256a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6919      	ldr	r1, [r3, #16]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002534:	f7ff fc52 	bl	8001ddc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6919      	ldr	r1, [r3, #16]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	461a      	mov	r2, r3
 8002546:	f7ff fc9e 	bl	8001e86 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	7f1b      	ldrb	r3, [r3, #28]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x124>
 800255a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800255e:	e000      	b.n	8002562 <HAL_ADC_ConfigChannel+0x126>
 8002560:	2300      	movs	r3, #0
 8002562:	461a      	mov	r2, r3
 8002564:	f7ff fcaa 	bl	8001ebc <LL_ADC_SetOffsetSaturation>
 8002568:	e17b      	b.n	8002862 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fc57 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 8002576:	4603      	mov	r3, r0
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x15a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fc4c 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 800258c:	4603      	mov	r3, r0
 800258e:	0e9b      	lsrs	r3, r3, #26
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	e01e      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x198>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fc41 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80025c4:	2320      	movs	r3, #32
 80025c6:	e004      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80025c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1b0>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	e018      	b.n	800261e <HAL_ADC_ConfigChannel+0x1e2>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002610:	2320      	movs	r3, #32
 8002612:	e004      	b.n	800261e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002614:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800261e:	429a      	cmp	r2, r3
 8002620:	d106      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fc10 	bl	8001e50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2101      	movs	r1, #1
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fbf4 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <HAL_ADC_ConfigChannel+0x220>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2101      	movs	r1, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fbe9 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 8002652:	4603      	mov	r3, r0
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	f003 021f 	and.w	r2, r3, #31
 800265a:	e01e      	b.n	800269a <HAL_ADC_ConfigChannel+0x25e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fbde 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800267a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800267e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800268a:	2320      	movs	r3, #32
 800268c:	e004      	b.n	8002698 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800268e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x276>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0e9b      	lsrs	r3, r3, #26
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	e018      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x2a8>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80026d6:	2320      	movs	r3, #32
 80026d8:	e004      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80026da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2101      	movs	r1, #1
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fbad 	bl	8001e50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2102      	movs	r1, #2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fb91 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 8002702:	4603      	mov	r3, r0
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x2e6>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2102      	movs	r1, #2
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fb86 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	0e9b      	lsrs	r3, r3, #26
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	e01e      	b.n	8002760 <HAL_ADC_ConfigChannel+0x324>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2102      	movs	r1, #2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fb7b 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002748:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e004      	b.n	800275e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x33c>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	e016      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x36a>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800278a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800278c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002798:	2320      	movs	r3, #32
 800279a:	e004      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800279c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	2102      	movs	r1, #2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fb4c 	bl	8001e50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2103      	movs	r1, #3
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fb30 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x3a8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2103      	movs	r1, #3
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fb25 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	f003 021f 	and.w	r2, r3, #31
 80027e2:	e017      	b.n	8002814 <HAL_ADC_ConfigChannel+0x3d8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2103      	movs	r1, #3
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fb1a 	bl	8001e24 <LL_ADC_GetOffsetChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80027fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027fe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002806:	2320      	movs	r3, #32
 8002808:	e003      	b.n	8002812 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800280a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <HAL_ADC_ConfigChannel+0x3f0>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	e011      	b.n	8002850 <HAL_ADC_ConfigChannel+0x414>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800283a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800283c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800283e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e003      	b.n	8002850 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002850:	429a      	cmp	r2, r3
 8002852:	d106      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2200      	movs	r2, #0
 800285a:	2103      	movs	r1, #3
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff faf7 	bl	8001e50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fc24 	bl	80020b4 <LL_ADC_IsEnabled>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 8140 	bne.w	8002af4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6819      	ldr	r1, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	461a      	mov	r2, r3
 8002882:	f7ff fba1 	bl	8001fc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4a8f      	ldr	r2, [pc, #572]	; (8002ac8 <HAL_ADC_ConfigChannel+0x68c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	f040 8131 	bne.w	8002af4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10b      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x47e>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2b09      	cmp	r3, #9
 80028b0:	bf94      	ite	ls
 80028b2:	2301      	movls	r3, #1
 80028b4:	2300      	movhi	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	e019      	b.n	80028ee <HAL_ADC_ConfigChannel+0x4b2>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ca:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80028d2:	2320      	movs	r3, #32
 80028d4:	e003      	b.n	80028de <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80028d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	3301      	adds	r3, #1
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	2b09      	cmp	r3, #9
 80028e6:	bf94      	ite	ls
 80028e8:	2301      	movls	r3, #1
 80028ea:	2300      	movhi	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d079      	beq.n	80029e6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d107      	bne.n	800290e <HAL_ADC_ConfigChannel+0x4d2>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0e9b      	lsrs	r3, r3, #26
 8002904:	3301      	adds	r3, #1
 8002906:	069b      	lsls	r3, r3, #26
 8002908:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800290c:	e015      	b.n	800293a <HAL_ADC_ConfigChannel+0x4fe>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800291c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002926:	2320      	movs	r3, #32
 8002928:	e003      	b.n	8002932 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800292a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	3301      	adds	r3, #1
 8002934:	069b      	lsls	r3, r3, #26
 8002936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_ADC_ConfigChannel+0x51e>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	0e9b      	lsrs	r3, r3, #26
 800294c:	3301      	adds	r3, #1
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	e017      	b.n	800298a <HAL_ADC_ConfigChannel+0x54e>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800296a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800296c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e003      	b.n	800297e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	ea42 0103 	orr.w	r1, r2, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x574>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0e9b      	lsrs	r3, r3, #26
 80029a0:	3301      	adds	r3, #1
 80029a2:	f003 021f 	and.w	r2, r3, #31
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	051b      	lsls	r3, r3, #20
 80029ae:	e018      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x5a6>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e003      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80029cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f003 021f 	and.w	r2, r3, #31
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e2:	430b      	orrs	r3, r1
 80029e4:	e081      	b.n	8002aea <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d107      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x5c6>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	0e9b      	lsrs	r3, r3, #26
 80029f8:	3301      	adds	r3, #1
 80029fa:	069b      	lsls	r3, r3, #26
 80029fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a00:	e015      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x5f2>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	e003      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	3301      	adds	r3, #1
 8002a28:	069b      	lsls	r3, r3, #26
 8002a2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x612>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0e9b      	lsrs	r3, r3, #26
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	e017      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x642>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002a66:	2320      	movs	r3, #32
 8002a68:	e003      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2101      	movs	r1, #1
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	ea42 0103 	orr.w	r1, r2, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10d      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x66e>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0e9b      	lsrs	r3, r3, #26
 8002a94:	3301      	adds	r3, #1
 8002a96:	f003 021f 	and.w	r2, r3, #31
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3b1e      	subs	r3, #30
 8002aa2:	051b      	lsls	r3, r3, #20
 8002aa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	e01e      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x6ac>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	613b      	str	r3, [r7, #16]
  return result;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e006      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x698>
 8002ac6:	bf00      	nop
 8002ac8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f003 021f 	and.w	r2, r3, #31
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	3b1e      	subs	r3, #30
 8002ae2:	051b      	lsls	r3, r3, #20
 8002ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	6892      	ldr	r2, [r2, #8]
 8002aee:	4619      	mov	r1, r3
 8002af0:	f7ff fa3e 	bl	8001f70 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d071      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b00:	483e      	ldr	r0, [pc, #248]	; (8002bfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b02:	f7ff f95d 	bl	8001dc0 <LL_ADC_GetCommonPathInternalCh>
 8002b06:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3c      	ldr	r2, [pc, #240]	; (8002c00 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x6e2>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a3a      	ldr	r2, [pc, #232]	; (8002c04 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d127      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d121      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b32:	d157      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	482f      	ldr	r0, [pc, #188]	; (8002bfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b40:	f7ff f92b 	bl	8001d9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b44:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	099b      	lsrs	r3, r3, #6
 8002b4a:	4a30      	ldr	r2, [pc, #192]	; (8002c0c <HAL_ADC_ConfigChannel+0x7d0>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b5e:	e002      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f9      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b6c:	e03a      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d113      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x764>
 8002b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10d      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02a      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b96:	4619      	mov	r1, r3
 8002b98:	4818      	ldr	r0, [pc, #96]	; (8002bfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b9a:	f7ff f8fe 	bl	8001d9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b9e:	e021      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d11c      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <HAL_ADC_ConfigChannel+0x7d8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d011      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bc8:	4619      	mov	r1, r3
 8002bca:	480c      	ldr	r0, [pc, #48]	; (8002bfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002bcc:	f7ff f8e5 	bl	8001d9a <LL_ADC_SetCommonPathInternalCh>
 8002bd0:	e008      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	f043 0220 	orr.w	r2, r3, #32
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bec:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	37d8      	adds	r7, #216	; 0xd8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	80080000 	.word	0x80080000
 8002bfc:	50000300 	.word	0x50000300
 8002c00:	c3210000 	.word	0xc3210000
 8002c04:	90c00010 	.word	0x90c00010
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	053e2d63 	.word	0x053e2d63
 8002c10:	c7520000 	.word	0xc7520000
 8002c14:	50000100 	.word	0x50000100
 8002c18:	cb840000 	.word	0xcb840000

08002c1c <LL_ADC_IsEnabled>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <LL_ADC_IsEnabled+0x18>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <LL_ADC_IsEnabled+0x1a>
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d101      	bne.n	8002c5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b0a1      	sub	sp, #132	; 0x84
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e08b      	b.n	8002d9e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002c92:	2300      	movs	r3, #0
 8002c94:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c9e:	d102      	bne.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ca0:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	e001      	b.n	8002caa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e06a      	b.n	8002d9e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ffb9 	bl	8002c42 <LL_ADC_REG_IsConversionOngoing>
 8002cd0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ffb3 	bl	8002c42 <LL_ADC_REG_IsConversionOngoing>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d14c      	bne.n	8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ce2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d149      	bne.n	8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ce8:	4b30      	ldr	r3, [pc, #192]	; (8002dac <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002cea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d028      	beq.n	8002d46 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d06:	035b      	lsls	r3, r3, #13
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d14:	f7ff ff82 	bl	8002c1c <LL_ADC_IsEnabled>
 8002d18:	4604      	mov	r4, r0
 8002d1a:	4823      	ldr	r0, [pc, #140]	; (8002da8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d1c:	f7ff ff7e 	bl	8002c1c <LL_ADC_IsEnabled>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4323      	orrs	r3, r4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d133      	bne.n	8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d30:	f023 030f 	bic.w	r3, r3, #15
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	6811      	ldr	r1, [r2, #0]
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	6892      	ldr	r2, [r2, #8]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d42:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d44:	e024      	b.n	8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d50:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d52:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d56:	f7ff ff61 	bl	8002c1c <LL_ADC_IsEnabled>
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	4812      	ldr	r0, [pc, #72]	; (8002da8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d5e:	f7ff ff5d 	bl	8002c1c <LL_ADC_IsEnabled>
 8002d62:	4603      	mov	r3, r0
 8002d64:	4323      	orrs	r3, r4
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d112      	bne.n	8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d72:	f023 030f 	bic.w	r3, r3, #15
 8002d76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d78:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d7a:	e009      	b.n	8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d8e:	e000      	b.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3784      	adds	r7, #132	; 0x84
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}
 8002da6:	bf00      	nop
 8002da8:	50000100 	.word	0x50000100
 8002dac:	50000300 	.word	0x50000300

08002db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de2:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	60d3      	str	r3, [r2, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <__NVIC_GetPriorityGrouping+0x18>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	f003 0307 	and.w	r3, r3, #7
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db0a      	blt.n	8002e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	490c      	ldr	r1, [pc, #48]	; (8002e60 <__NVIC_SetPriority+0x4c>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	440b      	add	r3, r1
 8002e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e3c:	e00a      	b.n	8002e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4908      	ldr	r1, [pc, #32]	; (8002e64 <__NVIC_SetPriority+0x50>)
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	3b04      	subs	r3, #4
 8002e4c:	0112      	lsls	r2, r2, #4
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	440b      	add	r3, r1
 8002e52:	761a      	strb	r2, [r3, #24]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000e100 	.word	0xe000e100
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f1c3 0307 	rsb	r3, r3, #7
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	bf28      	it	cs
 8002e86:	2304      	movcs	r3, #4
 8002e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d902      	bls.n	8002e98 <NVIC_EncodePriority+0x30>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3b03      	subs	r3, #3
 8002e96:	e000      	b.n	8002e9a <NVIC_EncodePriority+0x32>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	43d9      	mvns	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	4313      	orrs	r3, r2
         );
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3724      	adds	r7, #36	; 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee0:	d301      	bcc.n	8002ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00f      	b.n	8002f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <SysTick_Config+0x40>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eee:	210f      	movs	r1, #15
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ef4:	f7ff ff8e 	bl	8002e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <SysTick_Config+0x40>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <SysTick_Config+0x40>)
 8002f00:	2207      	movs	r2, #7
 8002f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	e000e010 	.word	0xe000e010

08002f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff47 	bl	8002db0 <__NVIC_SetPriorityGrouping>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f38:	f7ff ff5e 	bl	8002df8 <__NVIC_GetPriorityGrouping>
 8002f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	6978      	ldr	r0, [r7, #20]
 8002f44:	f7ff ff90 	bl	8002e68 <NVIC_EncodePriority>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff5f 	bl	8002e14 <__NVIC_SetPriority>
}
 8002f56:	bf00      	nop
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ffb2 	bl	8002ed0 <SysTick_Config>
 8002f6c:	4603      	mov	r3, r0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f86:	e15a      	b.n	800323e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	4013      	ands	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 814c 	beq.w	8003238 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d005      	beq.n	8002fb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d130      	bne.n	800301a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fee:	2201      	movs	r2, #1
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	f003 0201 	and.w	r2, r3, #1
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b03      	cmp	r3, #3
 8003024:	d017      	beq.n	8003056 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	2203      	movs	r2, #3
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d123      	bne.n	80030aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	08da      	lsrs	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3208      	adds	r2, #8
 800306a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	220f      	movs	r2, #15
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	08da      	lsrs	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3208      	adds	r2, #8
 80030a4:	6939      	ldr	r1, [r7, #16]
 80030a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	2203      	movs	r2, #3
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0203 	and.w	r2, r3, #3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80a6 	beq.w	8003238 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ec:	4b5b      	ldr	r3, [pc, #364]	; (800325c <HAL_GPIO_Init+0x2e4>)
 80030ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f0:	4a5a      	ldr	r2, [pc, #360]	; (800325c <HAL_GPIO_Init+0x2e4>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6613      	str	r3, [r2, #96]	; 0x60
 80030f8:	4b58      	ldr	r3, [pc, #352]	; (800325c <HAL_GPIO_Init+0x2e4>)
 80030fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003104:	4a56      	ldr	r2, [pc, #344]	; (8003260 <HAL_GPIO_Init+0x2e8>)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003110:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	220f      	movs	r2, #15
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800312e:	d01f      	beq.n	8003170 <HAL_GPIO_Init+0x1f8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a4c      	ldr	r2, [pc, #304]	; (8003264 <HAL_GPIO_Init+0x2ec>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d019      	beq.n	800316c <HAL_GPIO_Init+0x1f4>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a4b      	ldr	r2, [pc, #300]	; (8003268 <HAL_GPIO_Init+0x2f0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d013      	beq.n	8003168 <HAL_GPIO_Init+0x1f0>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a4a      	ldr	r2, [pc, #296]	; (800326c <HAL_GPIO_Init+0x2f4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00d      	beq.n	8003164 <HAL_GPIO_Init+0x1ec>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a49      	ldr	r2, [pc, #292]	; (8003270 <HAL_GPIO_Init+0x2f8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <HAL_GPIO_Init+0x1e8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a48      	ldr	r2, [pc, #288]	; (8003274 <HAL_GPIO_Init+0x2fc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_GPIO_Init+0x1e4>
 8003158:	2305      	movs	r3, #5
 800315a:	e00a      	b.n	8003172 <HAL_GPIO_Init+0x1fa>
 800315c:	2306      	movs	r3, #6
 800315e:	e008      	b.n	8003172 <HAL_GPIO_Init+0x1fa>
 8003160:	2304      	movs	r3, #4
 8003162:	e006      	b.n	8003172 <HAL_GPIO_Init+0x1fa>
 8003164:	2303      	movs	r3, #3
 8003166:	e004      	b.n	8003172 <HAL_GPIO_Init+0x1fa>
 8003168:	2302      	movs	r3, #2
 800316a:	e002      	b.n	8003172 <HAL_GPIO_Init+0x1fa>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <HAL_GPIO_Init+0x1fa>
 8003170:	2300      	movs	r3, #0
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	f002 0203 	and.w	r2, r2, #3
 8003178:	0092      	lsls	r2, r2, #2
 800317a:	4093      	lsls	r3, r2
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003182:	4937      	ldr	r1, [pc, #220]	; (8003260 <HAL_GPIO_Init+0x2e8>)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003190:	4b39      	ldr	r3, [pc, #228]	; (8003278 <HAL_GPIO_Init+0x300>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031b4:	4a30      	ldr	r2, [pc, #192]	; (8003278 <HAL_GPIO_Init+0x300>)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031ba:	4b2f      	ldr	r3, [pc, #188]	; (8003278 <HAL_GPIO_Init+0x300>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031de:	4a26      	ldr	r2, [pc, #152]	; (8003278 <HAL_GPIO_Init+0x300>)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031e4:	4b24      	ldr	r3, [pc, #144]	; (8003278 <HAL_GPIO_Init+0x300>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003208:	4a1b      	ldr	r2, [pc, #108]	; (8003278 <HAL_GPIO_Init+0x300>)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800320e:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <HAL_GPIO_Init+0x300>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	43db      	mvns	r3, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003232:	4a11      	ldr	r2, [pc, #68]	; (8003278 <HAL_GPIO_Init+0x300>)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	3301      	adds	r3, #1
 800323c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	f47f ae9d 	bne.w	8002f88 <HAL_GPIO_Init+0x10>
  }
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40021000 	.word	0x40021000
 8003260:	40010000 	.word	0x40010000
 8003264:	48000400 	.word	0x48000400
 8003268:	48000800 	.word	0x48000800
 800326c:	48000c00 	.word	0x48000c00
 8003270:	48001000 	.word	0x48001000
 8003274:	48001400 	.word	0x48001400
 8003278:	40010400 	.word	0x40010400

0800327c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	887b      	ldrh	r3, [r7, #2]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
 8003298:	e001      	b.n	800329e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800329e:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
 80032b8:	4613      	mov	r3, r2
 80032ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032bc:	787b      	ldrb	r3, [r7, #1]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032c2:	887a      	ldrh	r2, [r7, #2]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032c8:	e002      	b.n	80032d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d141      	bne.n	800336e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ea:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f6:	d131      	bne.n	800335c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f8:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fe:	4a46      	ldr	r2, [pc, #280]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003304:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003308:	4b43      	ldr	r3, [pc, #268]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003310:	4a41      	ldr	r2, [pc, #260]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003316:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003318:	4b40      	ldr	r3, [pc, #256]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2232      	movs	r2, #50	; 0x32
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	4a3f      	ldr	r2, [pc, #252]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	0c9b      	lsrs	r3, r3, #18
 800332a:	3301      	adds	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332e:	e002      	b.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3b01      	subs	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003336:	4b38      	ldr	r3, [pc, #224]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003342:	d102      	bne.n	800334a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f2      	bne.n	8003330 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800334a:	4b33      	ldr	r3, [pc, #204]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003356:	d158      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e057      	b.n	800340c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800335c:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003362:	4a2d      	ldr	r2, [pc, #180]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800336c:	e04d      	b.n	800340a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003374:	d141      	bne.n	80033fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003376:	4b28      	ldr	r3, [pc, #160]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800337e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003382:	d131      	bne.n	80033e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003384:	4b24      	ldr	r3, [pc, #144]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800338a:	4a23      	ldr	r2, [pc, #140]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003390:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003394:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800339c:	4a1e      	ldr	r2, [pc, #120]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2232      	movs	r2, #50	; 0x32
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	0c9b      	lsrs	r3, r3, #18
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ba:	e002      	b.n	80033c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3b01      	subs	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ce:	d102      	bne.n	80033d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f2      	bne.n	80033bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e2:	d112      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e011      	b.n	800340c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ee:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033f8:	e007      	b.n	800340a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003402:	4a05      	ldr	r2, [pc, #20]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003404:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003408:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40007000 	.word	0x40007000
 800341c:	20000000 	.word	0x20000000
 8003420:	431bde83 	.word	0x431bde83

08003424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e306      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d075      	beq.n	800352e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003442:	4b97      	ldr	r3, [pc, #604]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800344c:	4b94      	ldr	r3, [pc, #592]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b0c      	cmp	r3, #12
 800345a:	d102      	bne.n	8003462 <HAL_RCC_OscConfig+0x3e>
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b03      	cmp	r3, #3
 8003460:	d002      	beq.n	8003468 <HAL_RCC_OscConfig+0x44>
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d10b      	bne.n	8003480 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003468:	4b8d      	ldr	r3, [pc, #564]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d05b      	beq.n	800352c <HAL_RCC_OscConfig+0x108>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d157      	bne.n	800352c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e2e1      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d106      	bne.n	8003498 <HAL_RCC_OscConfig+0x74>
 800348a:	4b85      	ldr	r3, [pc, #532]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a84      	ldr	r2, [pc, #528]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e01d      	b.n	80034d4 <HAL_RCC_OscConfig+0xb0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x98>
 80034a2:	4b7f      	ldr	r3, [pc, #508]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7e      	ldr	r2, [pc, #504]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80034a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b7c      	ldr	r3, [pc, #496]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a7b      	ldr	r2, [pc, #492]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0xb0>
 80034bc:	4b78      	ldr	r3, [pc, #480]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a77      	ldr	r2, [pc, #476]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b75      	ldr	r3, [pc, #468]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a74      	ldr	r2, [pc, #464]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d013      	beq.n	8003504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe fc3e 	bl	8001d5c <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e4:	f7fe fc3a 	bl	8001d5c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e2a6      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f6:	4b6a      	ldr	r3, [pc, #424]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0xc0>
 8003502:	e014      	b.n	800352e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe fc2a 	bl	8001d5c <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe fc26 	bl	8001d5c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e292      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800351e:	4b60      	ldr	r3, [pc, #384]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0xe8>
 800352a:	e000      	b.n	800352e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d075      	beq.n	8003626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800353a:	4b59      	ldr	r3, [pc, #356]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003544:	4b56      	ldr	r3, [pc, #344]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b0c      	cmp	r3, #12
 8003552:	d102      	bne.n	800355a <HAL_RCC_OscConfig+0x136>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d002      	beq.n	8003560 <HAL_RCC_OscConfig+0x13c>
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2b04      	cmp	r3, #4
 800355e:	d11f      	bne.n	80035a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003560:	4b4f      	ldr	r3, [pc, #316]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_OscConfig+0x154>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e265      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003578:	4b49      	ldr	r3, [pc, #292]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	061b      	lsls	r3, r3, #24
 8003586:	4946      	ldr	r1, [pc, #280]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800358c:	4b45      	ldr	r3, [pc, #276]	; (80036a4 <HAL_RCC_OscConfig+0x280>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fe fb97 	bl	8001cc4 <HAL_InitTick>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d043      	beq.n	8003624 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e251      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d023      	beq.n	80035f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a8:	4b3d      	ldr	r3, [pc, #244]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a3c      	ldr	r2, [pc, #240]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80035ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe fbd2 	bl	8001d5c <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035bc:	f7fe fbce 	bl	8001d5c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e23a      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ce:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	061b      	lsls	r3, r3, #24
 80035e8:	492d      	ldr	r1, [pc, #180]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
 80035ee:	e01a      	b.n	8003626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f0:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2a      	ldr	r2, [pc, #168]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 80035f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fe fbae 	bl	8001d5c <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003604:	f7fe fbaa 	bl	8001d5c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e216      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003616:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x1e0>
 8003622:	e000      	b.n	8003626 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003624:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d041      	beq.n	80036b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01c      	beq.n	8003674 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363a:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 800363c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003640:	4a17      	ldr	r2, [pc, #92]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364a:	f7fe fb87 	bl	8001d5c <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003652:	f7fe fb83 	bl	8001d5c <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e1ef      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003664:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 8003666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0ef      	beq.n	8003652 <HAL_RCC_OscConfig+0x22e>
 8003672:	e020      	b.n	80036b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 8003676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800367a:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <HAL_RCC_OscConfig+0x27c>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003684:	f7fe fb6a 	bl	8001d5c <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800368a:	e00d      	b.n	80036a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368c:	f7fe fb66 	bl	8001d5c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d906      	bls.n	80036a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e1d2      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036a8:	4b8c      	ldr	r3, [pc, #560]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 80036aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1ea      	bne.n	800368c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80a6 	beq.w	8003810 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c4:	2300      	movs	r3, #0
 80036c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036c8:	4b84      	ldr	r3, [pc, #528]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_OscConfig+0x2b4>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x2b6>
 80036d8:	2300      	movs	r3, #0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00d      	beq.n	80036fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	4b7f      	ldr	r3, [pc, #508]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	4a7e      	ldr	r2, [pc, #504]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e8:	6593      	str	r3, [r2, #88]	; 0x58
 80036ea:	4b7c      	ldr	r3, [pc, #496]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036f6:	2301      	movs	r3, #1
 80036f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036fa:	4b79      	ldr	r3, [pc, #484]	; (80038e0 <HAL_RCC_OscConfig+0x4bc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d118      	bne.n	8003738 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003706:	4b76      	ldr	r3, [pc, #472]	; (80038e0 <HAL_RCC_OscConfig+0x4bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a75      	ldr	r2, [pc, #468]	; (80038e0 <HAL_RCC_OscConfig+0x4bc>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003712:	f7fe fb23 	bl	8001d5c <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371a:	f7fe fb1f 	bl	8001d5c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e18b      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372c:	4b6c      	ldr	r3, [pc, #432]	; (80038e0 <HAL_RCC_OscConfig+0x4bc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d108      	bne.n	8003752 <HAL_RCC_OscConfig+0x32e>
 8003740:	4b66      	ldr	r3, [pc, #408]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	4a65      	ldr	r2, [pc, #404]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003750:	e024      	b.n	800379c <HAL_RCC_OscConfig+0x378>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b05      	cmp	r3, #5
 8003758:	d110      	bne.n	800377c <HAL_RCC_OscConfig+0x358>
 800375a:	4b60      	ldr	r3, [pc, #384]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	4a5e      	ldr	r2, [pc, #376]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 8003762:	f043 0304 	orr.w	r3, r3, #4
 8003766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800376a:	4b5c      	ldr	r3, [pc, #368]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	4a5a      	ldr	r2, [pc, #360]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800377a:	e00f      	b.n	800379c <HAL_RCC_OscConfig+0x378>
 800377c:	4b57      	ldr	r3, [pc, #348]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	4a56      	ldr	r2, [pc, #344]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800378c:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	4a52      	ldr	r2, [pc, #328]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 8003794:	f023 0304 	bic.w	r3, r3, #4
 8003798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d016      	beq.n	80037d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fe fada 	bl	8001d5c <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ac:	f7fe fad6 	bl	8001d5c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e140      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c2:	4b46      	ldr	r3, [pc, #280]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ed      	beq.n	80037ac <HAL_RCC_OscConfig+0x388>
 80037d0:	e015      	b.n	80037fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fe fac3 	bl	8001d5c <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fe fabf 	bl	8001d5c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e129      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037f0:	4b3a      	ldr	r3, [pc, #232]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1ed      	bne.n	80037da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037fe:	7ffb      	ldrb	r3, [r7, #31]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003804:	4b35      	ldr	r3, [pc, #212]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	4a34      	ldr	r2, [pc, #208]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 800380a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d03c      	beq.n	8003896 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01c      	beq.n	800385e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003824:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 8003826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800382a:	4a2c      	ldr	r2, [pc, #176]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fe fa92 	bl	8001d5c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800383c:	f7fe fa8e 	bl	8001d5c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e0fa      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800384e:	4b23      	ldr	r3, [pc, #140]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 8003850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ef      	beq.n	800383c <HAL_RCC_OscConfig+0x418>
 800385c:	e01b      	b.n	8003896 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800385e:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 8003860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003864:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386e:	f7fe fa75 	bl	8001d5c <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003876:	f7fe fa71 	bl	8001d5c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e0dd      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003888:	4b14      	ldr	r3, [pc, #80]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 800388a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ef      	bne.n	8003876 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80d1 	beq.w	8003a42 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a0:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	f000 808b 	beq.w	80039c4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d15e      	bne.n	8003974 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a08      	ldr	r2, [pc, #32]	; (80038dc <HAL_RCC_OscConfig+0x4b8>)
 80038bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fe fa4b 	bl	8001d5c <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c8:	e00c      	b.n	80038e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ca:	f7fe fa47 	bl	8001d5c <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d905      	bls.n	80038e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e0b3      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e4:	4b59      	ldr	r3, [pc, #356]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1ec      	bne.n	80038ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f0:	4b56      	ldr	r3, [pc, #344]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	4b56      	ldr	r3, [pc, #344]	; (8003a50 <HAL_RCC_OscConfig+0x62c>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6a11      	ldr	r1, [r2, #32]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003900:	3a01      	subs	r2, #1
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	4311      	orrs	r1, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800390a:	0212      	lsls	r2, r2, #8
 800390c:	4311      	orrs	r1, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003912:	0852      	lsrs	r2, r2, #1
 8003914:	3a01      	subs	r2, #1
 8003916:	0552      	lsls	r2, r2, #21
 8003918:	4311      	orrs	r1, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800391e:	0852      	lsrs	r2, r2, #1
 8003920:	3a01      	subs	r2, #1
 8003922:	0652      	lsls	r2, r2, #25
 8003924:	4311      	orrs	r1, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800392a:	06d2      	lsls	r2, r2, #27
 800392c:	430a      	orrs	r2, r1
 800392e:	4947      	ldr	r1, [pc, #284]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 8003930:	4313      	orrs	r3, r2
 8003932:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003934:	4b45      	ldr	r3, [pc, #276]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a44      	ldr	r2, [pc, #272]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 800393a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800393e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003940:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4a41      	ldr	r2, [pc, #260]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 8003946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800394a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fe fa06 	bl	8001d5c <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003954:	f7fe fa02 	bl	8001d5c <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e06e      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003966:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x530>
 8003972:	e066      	b.n	8003a42 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003974:	4b35      	ldr	r3, [pc, #212]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a34      	ldr	r2, [pc, #208]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 800397a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800397e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003980:	4b32      	ldr	r3, [pc, #200]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4a31      	ldr	r2, [pc, #196]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800398c:	4b2f      	ldr	r3, [pc, #188]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4a2e      	ldr	r2, [pc, #184]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 8003992:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe f9de 	bl	8001d5c <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fe f9da 	bl	8001d5c <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e046      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b6:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x580>
 80039c2:	e03e      	b.n	8003a42 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e039      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039d0:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <HAL_RCC_OscConfig+0x628>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f003 0203 	and.w	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d12c      	bne.n	8003a3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	3b01      	subs	r3, #1
 80039f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d123      	bne.n	8003a3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d11b      	bne.n	8003a3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d113      	bne.n	8003a3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	085b      	lsrs	r3, r3, #1
 8003a22:	3b01      	subs	r3, #1
 8003a24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d109      	bne.n	8003a3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	3b01      	subs	r3, #1
 8003a38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d001      	beq.n	8003a42 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	019f800c 	.word	0x019f800c

08003a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e11e      	b.n	8003caa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b91      	ldr	r3, [pc, #580]	; (8003cb4 <HAL_RCC_ClockConfig+0x260>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d910      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b8e      	ldr	r3, [pc, #568]	; (8003cb4 <HAL_RCC_ClockConfig+0x260>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 020f 	bic.w	r2, r3, #15
 8003a82:	498c      	ldr	r1, [pc, #560]	; (8003cb4 <HAL_RCC_ClockConfig+0x260>)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b8a      	ldr	r3, [pc, #552]	; (8003cb4 <HAL_RCC_ClockConfig+0x260>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e106      	b.n	8003caa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d073      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d129      	bne.n	8003b04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab0:	4b81      	ldr	r3, [pc, #516]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0f4      	b.n	8003caa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ac0:	f000 f99e 	bl	8003e00 <RCC_GetSysClockFreqFromPLLSource>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4a7c      	ldr	r2, [pc, #496]	; (8003cbc <HAL_RCC_ClockConfig+0x268>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d93f      	bls.n	8003b4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ace:	4b7a      	ldr	r3, [pc, #488]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d033      	beq.n	8003b4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d12f      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003aee:	4b72      	ldr	r3, [pc, #456]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af6:	4a70      	ldr	r2, [pc, #448]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003afc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	e024      	b.n	8003b4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0c6      	b.n	8003caa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b1c:	4b66      	ldr	r3, [pc, #408]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0be      	b.n	8003caa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b2c:	f000 f8ce 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4a61      	ldr	r2, [pc, #388]	; (8003cbc <HAL_RCC_ClockConfig+0x268>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d909      	bls.n	8003b4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b3a:	4b5f      	ldr	r3, [pc, #380]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b42:	4a5d      	ldr	r2, [pc, #372]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b4e:	4b5a      	ldr	r3, [pc, #360]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4957      	ldr	r1, [pc, #348]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b60:	f7fe f8fc 	bl	8001d5c <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7fe f8f8 	bl	8001d5c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e095      	b.n	8003caa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	4b4e      	ldr	r3, [pc, #312]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 020c 	and.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1eb      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d023      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba8:	4b43      	ldr	r3, [pc, #268]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a42      	ldr	r2, [pc, #264]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003bae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bb2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003bc0:	4b3d      	ldr	r3, [pc, #244]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bc8:	4a3b      	ldr	r2, [pc, #236]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd0:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4936      	ldr	r1, [pc, #216]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b80      	cmp	r3, #128	; 0x80
 8003be8:	d105      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bea:	4b33      	ldr	r3, [pc, #204]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	4a32      	ldr	r2, [pc, #200]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf6:	4b2f      	ldr	r3, [pc, #188]	; (8003cb4 <HAL_RCC_ClockConfig+0x260>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d21d      	bcs.n	8003c40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c04:	4b2b      	ldr	r3, [pc, #172]	; (8003cb4 <HAL_RCC_ClockConfig+0x260>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 020f 	bic.w	r2, r3, #15
 8003c0c:	4929      	ldr	r1, [pc, #164]	; (8003cb4 <HAL_RCC_ClockConfig+0x260>)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c14:	f7fe f8a2 	bl	8001d5c <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c1c:	f7fe f89e 	bl	8001d5c <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e03b      	b.n	8003caa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <HAL_RCC_ClockConfig+0x260>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1ed      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4917      	ldr	r1, [pc, #92]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c6a:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	490f      	ldr	r1, [pc, #60]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c7e:	f000 f825 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003c82:	4602      	mov	r2, r0
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <HAL_RCC_ClockConfig+0x264>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	490c      	ldr	r1, [pc, #48]	; (8003cc0 <HAL_RCC_ClockConfig+0x26c>)
 8003c90:	5ccb      	ldrb	r3, [r1, r3]
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9a:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <HAL_RCC_ClockConfig+0x270>)
 8003c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_RCC_ClockConfig+0x274>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe f80e 	bl	8001cc4 <HAL_InitTick>
 8003ca8:	4603      	mov	r3, r0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40022000 	.word	0x40022000
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	04c4b400 	.word	0x04c4b400
 8003cc0:	08007960 	.word	0x08007960
 8003cc4:	20000000 	.word	0x20000000
 8003cc8:	20000004 	.word	0x20000004

08003ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d102      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cde:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	e047      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ce4:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d102      	bne.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cf0:	4b26      	ldr	r3, [pc, #152]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	e03e      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cf6:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	d136      	bne.n	8003d70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d02:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	3301      	adds	r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d10c      	bne.n	8003d3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d20:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d28:	4a16      	ldr	r2, [pc, #88]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d2a:	68d2      	ldr	r2, [r2, #12]
 8003d2c:	0a12      	lsrs	r2, r2, #8
 8003d2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	617b      	str	r3, [r7, #20]
      break;
 8003d38:	e00c      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d3a:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d42:	4a10      	ldr	r2, [pc, #64]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d44:	68d2      	ldr	r2, [r2, #12]
 8003d46:	0a12      	lsrs	r2, r2, #8
 8003d48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]
      break;
 8003d52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	0e5b      	lsrs	r3, r3, #25
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	e001      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d74:	693b      	ldr	r3, [r7, #16]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40021000 	.word	0x40021000
 8003d88:	00f42400 	.word	0x00f42400
 8003d8c:	007a1200 	.word	0x007a1200

08003d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000000 	.word	0x20000000

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dac:	f7ff fff0 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4904      	ldr	r1, [pc, #16]	; (8003dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	08007970 	.word	0x08007970

08003dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dd8:	f7ff ffda 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0adb      	lsrs	r3, r3, #11
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4904      	ldr	r1, [pc, #16]	; (8003dfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	08007970 	.word	0x08007970

08003e00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e06:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d10c      	bne.n	8003e3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e24:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e2e:	68d2      	ldr	r2, [r2, #12]
 8003e30:	0a12      	lsrs	r2, r2, #8
 8003e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	617b      	str	r3, [r7, #20]
    break;
 8003e3c:	e00c      	b.n	8003e58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e46:	4a0e      	ldr	r2, [pc, #56]	; (8003e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e48:	68d2      	ldr	r2, [r2, #12]
 8003e4a:	0a12      	lsrs	r2, r2, #8
 8003e4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]
    break;
 8003e56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	0e5b      	lsrs	r3, r3, #25
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	3301      	adds	r3, #1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e72:	687b      	ldr	r3, [r7, #4]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40021000 	.word	0x40021000
 8003e84:	007a1200 	.word	0x007a1200
 8003e88:	00f42400 	.word	0x00f42400

08003e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e94:	2300      	movs	r3, #0
 8003e96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e98:	2300      	movs	r3, #0
 8003e9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8098 	beq.w	8003fda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eae:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	4b40      	ldr	r3, [pc, #256]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	4a3f      	ldr	r2, [pc, #252]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec6:	4b3d      	ldr	r3, [pc, #244]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed6:	4b3a      	ldr	r3, [pc, #232]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a39      	ldr	r2, [pc, #228]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ee2:	f7fd ff3b 	bl	8001d5c <HAL_GetTick>
 8003ee6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee8:	e009      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eea:	f7fd ff37 	bl	8001d5c <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d902      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	74fb      	strb	r3, [r7, #19]
        break;
 8003efc:	e005      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003efe:	4b30      	ldr	r3, [pc, #192]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0ef      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f0a:	7cfb      	ldrb	r3, [r7, #19]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d159      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f10:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d01e      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d019      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f2c:	4b23      	ldr	r3, [pc, #140]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f38:	4b20      	ldr	r3, [pc, #128]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f48:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f58:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d016      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6a:	f7fd fef7 	bl	8001d5c <HAL_GetTick>
 8003f6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f70:	e00b      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fd fef3 	bl	8001d5c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d902      	bls.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	74fb      	strb	r3, [r7, #19]
            break;
 8003f88:	e006      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0ec      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10b      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	4903      	ldr	r1, [pc, #12]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fb6:	7cfb      	ldrb	r3, [r7, #19]
 8003fb8:	74bb      	strb	r3, [r7, #18]
 8003fba:	e005      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc8:	7c7b      	ldrb	r3, [r7, #17]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d105      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fce:	4ba6      	ldr	r3, [pc, #664]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	4aa5      	ldr	r2, [pc, #660]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fe6:	4ba0      	ldr	r3, [pc, #640]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f023 0203 	bic.w	r2, r3, #3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	499c      	ldr	r1, [pc, #624]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004008:	4b97      	ldr	r3, [pc, #604]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	f023 020c 	bic.w	r2, r3, #12
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	4994      	ldr	r1, [pc, #592]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800402a:	4b8f      	ldr	r3, [pc, #572]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	498b      	ldr	r1, [pc, #556]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800404c:	4b86      	ldr	r3, [pc, #536]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	4983      	ldr	r1, [pc, #524]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800406e:	4b7e      	ldr	r3, [pc, #504]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	497a      	ldr	r1, [pc, #488]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004090:	4b75      	ldr	r3, [pc, #468]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	4972      	ldr	r1, [pc, #456]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040b2:	4b6d      	ldr	r3, [pc, #436]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4969      	ldr	r1, [pc, #420]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040d4:	4b64      	ldr	r3, [pc, #400]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	4961      	ldr	r1, [pc, #388]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040f6:	4b5c      	ldr	r3, [pc, #368]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	4958      	ldr	r1, [pc, #352]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d015      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004118:	4b53      	ldr	r3, [pc, #332]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	4950      	ldr	r1, [pc, #320]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004136:	d105      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004138:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a4a      	ldr	r2, [pc, #296]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004142:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414c:	2b00      	cmp	r3, #0
 800414e:	d015      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004150:	4b45      	ldr	r3, [pc, #276]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	4942      	ldr	r1, [pc, #264]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800416e:	d105      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004170:	4b3d      	ldr	r3, [pc, #244]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4a3c      	ldr	r2, [pc, #240]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d015      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004188:	4b37      	ldr	r3, [pc, #220]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	4934      	ldr	r1, [pc, #208]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041a6:	d105      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a8:	4b2f      	ldr	r3, [pc, #188]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a2e      	ldr	r2, [pc, #184]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d015      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c0:	4b29      	ldr	r3, [pc, #164]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	4926      	ldr	r1, [pc, #152]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041de:	d105      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e0:	4b21      	ldr	r3, [pc, #132]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4a20      	ldr	r2, [pc, #128]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d015      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041f8:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	4918      	ldr	r1, [pc, #96]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004216:	d105      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004218:	4b13      	ldr	r3, [pc, #76]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4a12      	ldr	r2, [pc, #72]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800421e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004222:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d015      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004230:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004236:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423e:	490a      	ldr	r1, [pc, #40]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800424e:	d105      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4a04      	ldr	r2, [pc, #16]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800425c:	7cbb      	ldrb	r3, [r7, #18]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000

0800426c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e09d      	b.n	80043ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	2b00      	cmp	r3, #0
 8004284:	d108      	bne.n	8004298 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800428e:	d009      	beq.n	80042a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	61da      	str	r2, [r3, #28]
 8004296:	e005      	b.n	80042a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fd fb5a 	bl	8001978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042e4:	d902      	bls.n	80042ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	e002      	b.n	80042f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042fa:	d007      	beq.n	800430c <HAL_SPI_Init+0xa0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004304:	d002      	beq.n	800430c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434e:	ea42 0103 	orr.w	r1, r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	0c1b      	lsrs	r3, r3, #16
 8004368:	f003 0204 	and.w	r2, r3, #4
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004388:	ea42 0103 	orr.w	r1, r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b088      	sub	sp, #32
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_SPI_Transmit+0x22>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e158      	b.n	8004696 <HAL_SPI_Transmit+0x2d4>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ec:	f7fd fcb6 	bl	8001d5c <HAL_GetTick>
 80043f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043f2:	88fb      	ldrh	r3, [r7, #6]
 80043f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d002      	beq.n	8004408 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004402:	2302      	movs	r3, #2
 8004404:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004406:	e13d      	b.n	8004684 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_SPI_Transmit+0x52>
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004418:	e134      	b.n	8004684 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2203      	movs	r2, #3
 800441e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	88fa      	ldrh	r2, [r7, #6]
 8004432:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004464:	d10f      	bne.n	8004486 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004484:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d007      	beq.n	80044a4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044ac:	d94b      	bls.n	8004546 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_SPI_Transmit+0xfa>
 80044b6:	8afb      	ldrh	r3, [r7, #22]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d13e      	bne.n	800453a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	1c9a      	adds	r2, r3, #2
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044e0:	e02b      	b.n	800453a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d112      	bne.n	8004516 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	881a      	ldrh	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	1c9a      	adds	r2, r3, #2
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004514:	e011      	b.n	800453a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004516:	f7fd fc21 	bl	8001d5c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d803      	bhi.n	800452e <HAL_SPI_Transmit+0x16c>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800452c:	d102      	bne.n	8004534 <HAL_SPI_Transmit+0x172>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d102      	bne.n	800453a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004538:	e0a4      	b.n	8004684 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1ce      	bne.n	80044e2 <HAL_SPI_Transmit+0x120>
 8004544:	e07c      	b.n	8004640 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_SPI_Transmit+0x192>
 800454e:	8afb      	ldrh	r3, [r7, #22]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d170      	bne.n	8004636 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b01      	cmp	r3, #1
 800455c:	d912      	bls.n	8004584 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	881a      	ldrh	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	1c9a      	adds	r2, r3, #2
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b02      	subs	r3, #2
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004582:	e058      	b.n	8004636 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	7812      	ldrb	r2, [r2, #0]
 8004590:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045aa:	e044      	b.n	8004636 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d12b      	bne.n	8004612 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d912      	bls.n	80045ea <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	1c9a      	adds	r2, r3, #2
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b02      	subs	r3, #2
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045e8:	e025      	b.n	8004636 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	330c      	adds	r3, #12
 80045f4:	7812      	ldrb	r2, [r2, #0]
 80045f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004610:	e011      	b.n	8004636 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004612:	f7fd fba3 	bl	8001d5c <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d803      	bhi.n	800462a <HAL_SPI_Transmit+0x268>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004628:	d102      	bne.n	8004630 <HAL_SPI_Transmit+0x26e>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004634:	e026      	b.n	8004684 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1b5      	bne.n	80045ac <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	6839      	ldr	r1, [r7, #0]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fce3 	bl	8005010 <SPI_EndRxTxTransaction>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e000      	b.n	8004684 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004682:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004694:	7ffb      	ldrb	r3, [r7, #31]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b088      	sub	sp, #32
 80046a2:	af02      	add	r7, sp, #8
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	4613      	mov	r3, r2
 80046ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ba:	d112      	bne.n	80046e2 <HAL_SPI_Receive+0x44>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10e      	bne.n	80046e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2204      	movs	r2, #4
 80046c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	4613      	mov	r3, r2
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f910 	bl	80048fe <HAL_SPI_TransmitReceive>
 80046de:	4603      	mov	r3, r0
 80046e0:	e109      	b.n	80048f6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_SPI_Receive+0x52>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e102      	b.n	80048f6 <HAL_SPI_Receive+0x258>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046f8:	f7fd fb30 	bl	8001d5c <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d002      	beq.n	8004710 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800470a:	2302      	movs	r3, #2
 800470c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800470e:	e0e9      	b.n	80048e4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_SPI_Receive+0x7e>
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004720:	e0e0      	b.n	80048e4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2204      	movs	r2, #4
 8004726:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	88fa      	ldrh	r2, [r7, #6]
 800473a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	88fa      	ldrh	r2, [r7, #6]
 8004742:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800476c:	d908      	bls.n	8004780 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800477c:	605a      	str	r2, [r3, #4]
 800477e:	e007      	b.n	8004790 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800478e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004798:	d10f      	bne.n	80047ba <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d007      	beq.n	80047d8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047e0:	d867      	bhi.n	80048b2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80047e2:	e030      	b.n	8004846 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d117      	bne.n	8004822 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f103 020c 	add.w	r2, r3, #12
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	7812      	ldrb	r2, [r2, #0]
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004820:	e011      	b.n	8004846 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004822:	f7fd fa9b 	bl	8001d5c <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d803      	bhi.n	800483a <HAL_SPI_Receive+0x19c>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004838:	d102      	bne.n	8004840 <HAL_SPI_Receive+0x1a2>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004844:	e04e      	b.n	80048e4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1c8      	bne.n	80047e4 <HAL_SPI_Receive+0x146>
 8004852:	e034      	b.n	80048be <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d115      	bne.n	800488e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	b292      	uxth	r2, r2
 800486e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	1c9a      	adds	r2, r3, #2
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800488c:	e011      	b.n	80048b2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800488e:	f7fd fa65 	bl	8001d5c <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d803      	bhi.n	80048a6 <HAL_SPI_Receive+0x208>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048a4:	d102      	bne.n	80048ac <HAL_SPI_Receive+0x20e>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d102      	bne.n	80048b2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048b0:	e018      	b.n	80048e4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1ca      	bne.n	8004854 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	6839      	ldr	r1, [r7, #0]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fb4c 	bl	8004f60 <SPI_EndRxTransaction>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	75fb      	strb	r3, [r7, #23]
 80048e0:	e000      	b.n	80048e4 <HAL_SPI_Receive+0x246>
  }

error :
 80048e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b08a      	sub	sp, #40	; 0x28
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800490c:	2301      	movs	r3, #1
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_SPI_TransmitReceive+0x26>
 8004920:	2302      	movs	r3, #2
 8004922:	e1fb      	b.n	8004d1c <HAL_SPI_TransmitReceive+0x41e>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800492c:	f7fd fa16 	bl	8001d5c <HAL_GetTick>
 8004930:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004938:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004940:	887b      	ldrh	r3, [r7, #2]
 8004942:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004944:	887b      	ldrh	r3, [r7, #2]
 8004946:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004948:	7efb      	ldrb	r3, [r7, #27]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d00e      	beq.n	800496c <HAL_SPI_TransmitReceive+0x6e>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004954:	d106      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x66>
 800495e:	7efb      	ldrb	r3, [r7, #27]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d003      	beq.n	800496c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004964:	2302      	movs	r3, #2
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800496a:	e1cd      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_SPI_TransmitReceive+0x80>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_SPI_TransmitReceive+0x80>
 8004978:	887b      	ldrh	r3, [r7, #2]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004984:	e1c0      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b04      	cmp	r3, #4
 8004990:	d003      	beq.n	800499a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2205      	movs	r2, #5
 8004996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	887a      	ldrh	r2, [r7, #2]
 80049aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	887a      	ldrh	r2, [r7, #2]
 80049b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	887a      	ldrh	r2, [r7, #2]
 80049c6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049dc:	d802      	bhi.n	80049e4 <HAL_SPI_TransmitReceive+0xe6>
 80049de:	8a3b      	ldrh	r3, [r7, #16]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d908      	bls.n	80049f6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	e007      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a04:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d007      	beq.n	8004a24 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a2c:	d97c      	bls.n	8004b28 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_TransmitReceive+0x13e>
 8004a36:	8a7b      	ldrh	r3, [r7, #18]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d169      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	881a      	ldrh	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	1c9a      	adds	r2, r3, #2
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a60:	e056      	b.n	8004b10 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d11b      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x1aa>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x1aa>
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d113      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	881a      	ldrh	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	1c9a      	adds	r2, r3, #2
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d11c      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x1f2>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d016      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	b292      	uxth	r2, r2
 8004ace:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	1c9a      	adds	r2, r3, #2
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aec:	2301      	movs	r3, #1
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004af0:	f7fd f934 	bl	8001d5c <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d807      	bhi.n	8004b10 <HAL_SPI_TransmitReceive+0x212>
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b06:	d003      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b0e:	e0fb      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1a3      	bne.n	8004a62 <HAL_SPI_TransmitReceive+0x164>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d19d      	bne.n	8004a62 <HAL_SPI_TransmitReceive+0x164>
 8004b26:	e0df      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_SPI_TransmitReceive+0x23a>
 8004b30:	8a7b      	ldrh	r3, [r7, #18]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	f040 80cb 	bne.w	8004cce <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d912      	bls.n	8004b68 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	881a      	ldrh	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b02      	subs	r3, #2
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b66:	e0b2      	b.n	8004cce <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	7812      	ldrb	r2, [r2, #0]
 8004b74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b8e:	e09e      	b.n	8004cce <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d134      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x30a>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02f      	beq.n	8004c08 <HAL_SPI_TransmitReceive+0x30a>
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d12c      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d912      	bls.n	8004bde <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	881a      	ldrh	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	1c9a      	adds	r2, r3, #2
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b02      	subs	r3, #2
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bdc:	e012      	b.n	8004c04 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	7812      	ldrb	r2, [r2, #0]
 8004bea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d148      	bne.n	8004ca8 <HAL_SPI_TransmitReceive+0x3aa>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d042      	beq.n	8004ca8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d923      	bls.n	8004c76 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	b292      	uxth	r2, r2
 8004c3a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b02      	subs	r3, #2
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d81f      	bhi.n	8004ca4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	e016      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f103 020c 	add.w	r2, r3, #12
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	7812      	ldrb	r2, [r2, #0]
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ca8:	f7fd f858 	bl	8001d5c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d803      	bhi.n	8004cc0 <HAL_SPI_TransmitReceive+0x3c2>
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x3c8>
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d103      	bne.n	8004cce <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ccc:	e01c      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f47f af5b 	bne.w	8004b90 <HAL_SPI_TransmitReceive+0x292>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f47f af54 	bne.w	8004b90 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f98f 	bl	8005010 <SPI_EndRxTxTransaction>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d006      	beq.n	8004d06 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	661a      	str	r2, [r3, #96]	; 0x60
 8004d04:	e000      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3728      	adds	r7, #40	; 0x28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d34:	f7fd f812 	bl	8001d5c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	4413      	add	r3, r2
 8004d42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d44:	f7fd f80a 	bl	8001d5c <HAL_GetTick>
 8004d48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d4a:	4b39      	ldr	r3, [pc, #228]	; (8004e30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	015b      	lsls	r3, r3, #5
 8004d50:	0d1b      	lsrs	r3, r3, #20
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	fb02 f303 	mul.w	r3, r2, r3
 8004d58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d5a:	e054      	b.n	8004e06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d62:	d050      	beq.n	8004e06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d64:	f7fc fffa 	bl	8001d5c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d902      	bls.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d13d      	bne.n	8004df6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d92:	d111      	bne.n	8004db8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9c:	d004      	beq.n	8004da8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da6:	d107      	bne.n	8004db8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc0:	d10f      	bne.n	8004de2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e017      	b.n	8004e26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	bf0c      	ite	eq
 8004e16:	2301      	moveq	r3, #1
 8004e18:	2300      	movne	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d19b      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000000 	.word	0x20000000

08004e34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	; 0x28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e46:	f7fc ff89 	bl	8001d5c <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	4413      	add	r3, r2
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e56:	f7fc ff81 	bl	8001d5c <HAL_GetTick>
 8004e5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e64:	4b3d      	ldr	r3, [pc, #244]	; (8004f5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	00da      	lsls	r2, r3, #3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	0d1b      	lsrs	r3, r3, #20
 8004e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e7c:	e060      	b.n	8004f40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e84:	d107      	bne.n	8004e96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e9c:	d050      	beq.n	8004f40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e9e:	f7fc ff5d 	bl	8001d5c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d902      	bls.n	8004eb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d13d      	bne.n	8004f30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ec2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ecc:	d111      	bne.n	8004ef2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed6:	d004      	beq.n	8004ee2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee0:	d107      	bne.n	8004ef2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efa:	d10f      	bne.n	8004f1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e010      	b.n	8004f52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d196      	bne.n	8004e7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3728      	adds	r7, #40	; 0x28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000000 	.word	0x20000000

08004f60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f74:	d111      	bne.n	8004f9a <SPI_EndRxTransaction+0x3a>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7e:	d004      	beq.n	8004f8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f88:	d107      	bne.n	8004f9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f98:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2180      	movs	r1, #128	; 0x80
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff febd 	bl	8004d24 <SPI_WaitFlagStateUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb4:	f043 0220 	orr.w	r2, r3, #32
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e023      	b.n	8005008 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc8:	d11d      	bne.n	8005006 <SPI_EndRxTransaction+0xa6>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd2:	d004      	beq.n	8004fde <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fdc:	d113      	bne.n	8005006 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7ff ff22 	bl	8004e34 <SPI_WaitFifoStateUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffa:	f043 0220 	orr.w	r2, r3, #32
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e000      	b.n	8005008 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff ff03 	bl	8004e34 <SPI_WaitFifoStateUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005038:	f043 0220 	orr.w	r2, r3, #32
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e027      	b.n	8005094 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2200      	movs	r2, #0
 800504c:	2180      	movs	r1, #128	; 0x80
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f7ff fe68 	bl	8004d24 <SPI_WaitFlagStateUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505e:	f043 0220 	orr.w	r2, r3, #32
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e014      	b.n	8005094 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2200      	movs	r2, #0
 8005072:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff fedc 	bl	8004e34 <SPI_WaitFifoStateUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005086:	f043 0220 	orr.w	r2, r3, #32
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e000      	b.n	8005094 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e049      	b.n	8005142 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fc fc9a 	bl	80019fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f000 fba4 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e049      	b.n	80051f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f841 	bl	80051f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3304      	adds	r3, #4
 8005186:	4619      	mov	r1, r3
 8005188:	4610      	mov	r0, r2
 800518a:	f000 fb4d 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d109      	bne.n	8005230 <HAL_TIM_PWM_Start+0x24>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	bf14      	ite	ne
 8005228:	2301      	movne	r3, #1
 800522a:	2300      	moveq	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	e03c      	b.n	80052aa <HAL_TIM_PWM_Start+0x9e>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b04      	cmp	r3, #4
 8005234:	d109      	bne.n	800524a <HAL_TIM_PWM_Start+0x3e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	bf14      	ite	ne
 8005242:	2301      	movne	r3, #1
 8005244:	2300      	moveq	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e02f      	b.n	80052aa <HAL_TIM_PWM_Start+0x9e>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d109      	bne.n	8005264 <HAL_TIM_PWM_Start+0x58>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e022      	b.n	80052aa <HAL_TIM_PWM_Start+0x9e>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b0c      	cmp	r3, #12
 8005268:	d109      	bne.n	800527e <HAL_TIM_PWM_Start+0x72>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b01      	cmp	r3, #1
 8005274:	bf14      	ite	ne
 8005276:	2301      	movne	r3, #1
 8005278:	2300      	moveq	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	e015      	b.n	80052aa <HAL_TIM_PWM_Start+0x9e>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b10      	cmp	r3, #16
 8005282:	d109      	bne.n	8005298 <HAL_TIM_PWM_Start+0x8c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	bf14      	ite	ne
 8005290:	2301      	movne	r3, #1
 8005292:	2300      	moveq	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	e008      	b.n	80052aa <HAL_TIM_PWM_Start+0x9e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	bf14      	ite	ne
 80052a4:	2301      	movne	r3, #1
 80052a6:	2300      	moveq	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e097      	b.n	80053e2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_PWM_Start+0xb6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c0:	e023      	b.n	800530a <HAL_TIM_PWM_Start+0xfe>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_PWM_Start+0xc6>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d0:	e01b      	b.n	800530a <HAL_TIM_PWM_Start+0xfe>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_PWM_Start+0xd6>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e0:	e013      	b.n	800530a <HAL_TIM_PWM_Start+0xfe>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b0c      	cmp	r3, #12
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Start+0xe6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f0:	e00b      	b.n	800530a <HAL_TIM_PWM_Start+0xfe>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d104      	bne.n	8005302 <HAL_TIM_PWM_Start+0xf6>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005300:	e003      	b.n	800530a <HAL_TIM_PWM_Start+0xfe>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2202      	movs	r2, #2
 8005306:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2201      	movs	r2, #1
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 feaa 	bl	800606c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a33      	ldr	r2, [pc, #204]	; (80053ec <HAL_TIM_PWM_Start+0x1e0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <HAL_TIM_PWM_Start+0x13e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a32      	ldr	r2, [pc, #200]	; (80053f0 <HAL_TIM_PWM_Start+0x1e4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00e      	beq.n	800534a <HAL_TIM_PWM_Start+0x13e>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a30      	ldr	r2, [pc, #192]	; (80053f4 <HAL_TIM_PWM_Start+0x1e8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_TIM_PWM_Start+0x13e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2f      	ldr	r2, [pc, #188]	; (80053f8 <HAL_TIM_PWM_Start+0x1ec>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_TIM_PWM_Start+0x13e>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a2d      	ldr	r2, [pc, #180]	; (80053fc <HAL_TIM_PWM_Start+0x1f0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d101      	bne.n	800534e <HAL_TIM_PWM_Start+0x142>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <HAL_TIM_PWM_Start+0x144>
 800534e:	2300      	movs	r3, #0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005362:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a20      	ldr	r2, [pc, #128]	; (80053ec <HAL_TIM_PWM_Start+0x1e0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d018      	beq.n	80053a0 <HAL_TIM_PWM_Start+0x194>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d013      	beq.n	80053a0 <HAL_TIM_PWM_Start+0x194>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a20      	ldr	r2, [pc, #128]	; (8005400 <HAL_TIM_PWM_Start+0x1f4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00e      	beq.n	80053a0 <HAL_TIM_PWM_Start+0x194>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1f      	ldr	r2, [pc, #124]	; (8005404 <HAL_TIM_PWM_Start+0x1f8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d009      	beq.n	80053a0 <HAL_TIM_PWM_Start+0x194>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <HAL_TIM_PWM_Start+0x1e4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <HAL_TIM_PWM_Start+0x194>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <HAL_TIM_PWM_Start+0x1e8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d115      	bne.n	80053cc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	4b18      	ldr	r3, [pc, #96]	; (8005408 <HAL_TIM_PWM_Start+0x1fc>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b06      	cmp	r3, #6
 80053b0:	d015      	beq.n	80053de <HAL_TIM_PWM_Start+0x1d2>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b8:	d011      	beq.n	80053de <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	e008      	b.n	80053de <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e000      	b.n	80053e0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40013400 	.word	0x40013400
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40014400 	.word	0x40014400
 80053fc:	40014800 	.word	0x40014800
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	00010007 	.word	0x00010007

0800540c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005426:	2302      	movs	r3, #2
 8005428:	e0ff      	b.n	800562a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b14      	cmp	r3, #20
 8005436:	f200 80f0 	bhi.w	800561a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800543a:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005495 	.word	0x08005495
 8005444:	0800561b 	.word	0x0800561b
 8005448:	0800561b 	.word	0x0800561b
 800544c:	0800561b 	.word	0x0800561b
 8005450:	080054d5 	.word	0x080054d5
 8005454:	0800561b 	.word	0x0800561b
 8005458:	0800561b 	.word	0x0800561b
 800545c:	0800561b 	.word	0x0800561b
 8005460:	08005517 	.word	0x08005517
 8005464:	0800561b 	.word	0x0800561b
 8005468:	0800561b 	.word	0x0800561b
 800546c:	0800561b 	.word	0x0800561b
 8005470:	08005557 	.word	0x08005557
 8005474:	0800561b 	.word	0x0800561b
 8005478:	0800561b 	.word	0x0800561b
 800547c:	0800561b 	.word	0x0800561b
 8005480:	08005599 	.word	0x08005599
 8005484:	0800561b 	.word	0x0800561b
 8005488:	0800561b 	.word	0x0800561b
 800548c:	0800561b 	.word	0x0800561b
 8005490:	080055d9 	.word	0x080055d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fa54 	bl	8005948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0208 	orr.w	r2, r2, #8
 80054ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0204 	bic.w	r2, r2, #4
 80054be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6999      	ldr	r1, [r3, #24]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	619a      	str	r2, [r3, #24]
      break;
 80054d2:	e0a5      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fac4 	bl	8005a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6999      	ldr	r1, [r3, #24]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	021a      	lsls	r2, r3, #8
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	619a      	str	r2, [r3, #24]
      break;
 8005514:	e084      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fb2d 	bl	8005b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0208 	orr.w	r2, r2, #8
 8005530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0204 	bic.w	r2, r2, #4
 8005540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69d9      	ldr	r1, [r3, #28]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	61da      	str	r2, [r3, #28]
      break;
 8005554:	e064      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fb95 	bl	8005c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69d9      	ldr	r1, [r3, #28]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	021a      	lsls	r2, r3, #8
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	61da      	str	r2, [r3, #28]
      break;
 8005596:	e043      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fbfe 	bl	8005da0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0208 	orr.w	r2, r2, #8
 80055b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0204 	bic.w	r2, r2, #4
 80055c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80055d6:	e023      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fc42 	bl	8005e68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005602:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	021a      	lsls	r2, r3, #8
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005618:	e002      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	75fb      	strb	r3, [r7, #23]
      break;
 800561e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005628:	7dfb      	ldrb	r3, [r7, #23]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop

08005634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_TIM_ConfigClockSource+0x1c>
 800564c:	2302      	movs	r3, #2
 800564e:	e0de      	b.n	800580e <HAL_TIM_ConfigClockSource+0x1da>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800566e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a63      	ldr	r2, [pc, #396]	; (8005818 <HAL_TIM_ConfigClockSource+0x1e4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	f000 80a9 	beq.w	80057e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005690:	4a61      	ldr	r2, [pc, #388]	; (8005818 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	f200 80ae 	bhi.w	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005698:	4a60      	ldr	r2, [pc, #384]	; (800581c <HAL_TIM_ConfigClockSource+0x1e8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	f000 80a1 	beq.w	80057e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80056a0:	4a5e      	ldr	r2, [pc, #376]	; (800581c <HAL_TIM_ConfigClockSource+0x1e8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	f200 80a6 	bhi.w	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80056a8:	4a5d      	ldr	r2, [pc, #372]	; (8005820 <HAL_TIM_ConfigClockSource+0x1ec>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	f000 8099 	beq.w	80057e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80056b0:	4a5b      	ldr	r2, [pc, #364]	; (8005820 <HAL_TIM_ConfigClockSource+0x1ec>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	f200 809e 	bhi.w	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80056b8:	4a5a      	ldr	r2, [pc, #360]	; (8005824 <HAL_TIM_ConfigClockSource+0x1f0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	f000 8091 	beq.w	80057e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80056c0:	4a58      	ldr	r2, [pc, #352]	; (8005824 <HAL_TIM_ConfigClockSource+0x1f0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	f200 8096 	bhi.w	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80056c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056cc:	f000 8089 	beq.w	80057e2 <HAL_TIM_ConfigClockSource+0x1ae>
 80056d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80056d4:	f200 808e 	bhi.w	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056dc:	d03e      	beq.n	800575c <HAL_TIM_ConfigClockSource+0x128>
 80056de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e2:	f200 8087 	bhi.w	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ea:	f000 8086 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x1c6>
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f2:	d87f      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80056f4:	2b70      	cmp	r3, #112	; 0x70
 80056f6:	d01a      	beq.n	800572e <HAL_TIM_ConfigClockSource+0xfa>
 80056f8:	2b70      	cmp	r3, #112	; 0x70
 80056fa:	d87b      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 80056fc:	2b60      	cmp	r3, #96	; 0x60
 80056fe:	d050      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x16e>
 8005700:	2b60      	cmp	r3, #96	; 0x60
 8005702:	d877      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005704:	2b50      	cmp	r3, #80	; 0x50
 8005706:	d03c      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0x14e>
 8005708:	2b50      	cmp	r3, #80	; 0x50
 800570a:	d873      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d058      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x18e>
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d86f      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005714:	2b30      	cmp	r3, #48	; 0x30
 8005716:	d064      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005718:	2b30      	cmp	r3, #48	; 0x30
 800571a:	d86b      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 800571c:	2b20      	cmp	r3, #32
 800571e:	d060      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005720:	2b20      	cmp	r3, #32
 8005722:	d867      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d05c      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005728:	2b10      	cmp	r3, #16
 800572a:	d05a      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x1ae>
 800572c:	e062      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6899      	ldr	r1, [r3, #8]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f000 fc75 	bl	800602c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	609a      	str	r2, [r3, #8]
      break;
 800575a:	e04f      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	6899      	ldr	r1, [r3, #8]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f000 fc5e 	bl	800602c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800577e:	609a      	str	r2, [r3, #8]
      break;
 8005780:	e03c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6859      	ldr	r1, [r3, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	461a      	mov	r2, r3
 8005790:	f000 fbd0 	bl	8005f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2150      	movs	r1, #80	; 0x50
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fc29 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 80057a0:	e02c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6859      	ldr	r1, [r3, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f000 fbef 	bl	8005f92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2160      	movs	r1, #96	; 0x60
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fc19 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 80057c0:	e01c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6859      	ldr	r1, [r3, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	461a      	mov	r2, r3
 80057d0:	f000 fbb0 	bl	8005f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2140      	movs	r1, #64	; 0x40
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fc09 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 80057e0:	e00c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f000 fc00 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 80057f2:	e003      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
      break;
 80057f8:	e000      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80057fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	00100070 	.word	0x00100070
 800581c:	00100040 	.word	0x00100040
 8005820:	00100030 	.word	0x00100030
 8005824:	00100020 	.word	0x00100020

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3c      	ldr	r2, [pc, #240]	; (800592c <TIM_Base_SetConfig+0x104>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a39      	ldr	r2, [pc, #228]	; (8005930 <TIM_Base_SetConfig+0x108>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a38      	ldr	r2, [pc, #224]	; (8005934 <TIM_Base_SetConfig+0x10c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a37      	ldr	r2, [pc, #220]	; (8005938 <TIM_Base_SetConfig+0x110>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2d      	ldr	r2, [pc, #180]	; (800592c <TIM_Base_SetConfig+0x104>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01b      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d017      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2a      	ldr	r2, [pc, #168]	; (8005930 <TIM_Base_SetConfig+0x108>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d013      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a29      	ldr	r2, [pc, #164]	; (8005934 <TIM_Base_SetConfig+0x10c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00f      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a28      	ldr	r2, [pc, #160]	; (8005938 <TIM_Base_SetConfig+0x110>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00b      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a27      	ldr	r2, [pc, #156]	; (800593c <TIM_Base_SetConfig+0x114>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a26      	ldr	r2, [pc, #152]	; (8005940 <TIM_Base_SetConfig+0x118>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a25      	ldr	r2, [pc, #148]	; (8005944 <TIM_Base_SetConfig+0x11c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d108      	bne.n	80058c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a10      	ldr	r2, [pc, #64]	; (800592c <TIM_Base_SetConfig+0x104>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00f      	beq.n	8005910 <TIM_Base_SetConfig+0xe8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a11      	ldr	r2, [pc, #68]	; (8005938 <TIM_Base_SetConfig+0x110>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00b      	beq.n	8005910 <TIM_Base_SetConfig+0xe8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a10      	ldr	r2, [pc, #64]	; (800593c <TIM_Base_SetConfig+0x114>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <TIM_Base_SetConfig+0xe8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a0f      	ldr	r2, [pc, #60]	; (8005940 <TIM_Base_SetConfig+0x118>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_Base_SetConfig+0xe8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a0e      	ldr	r2, [pc, #56]	; (8005944 <TIM_Base_SetConfig+0x11c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d103      	bne.n	8005918 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	615a      	str	r2, [r3, #20]
}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40013400 	.word	0x40013400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800

08005948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0201 	bic.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f023 0302 	bic.w	r3, r3, #2
 8005994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a2c      	ldr	r2, [pc, #176]	; (8005a54 <TIM_OC1_SetConfig+0x10c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00f      	beq.n	80059c8 <TIM_OC1_SetConfig+0x80>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a2b      	ldr	r2, [pc, #172]	; (8005a58 <TIM_OC1_SetConfig+0x110>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00b      	beq.n	80059c8 <TIM_OC1_SetConfig+0x80>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a2a      	ldr	r2, [pc, #168]	; (8005a5c <TIM_OC1_SetConfig+0x114>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d007      	beq.n	80059c8 <TIM_OC1_SetConfig+0x80>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a29      	ldr	r2, [pc, #164]	; (8005a60 <TIM_OC1_SetConfig+0x118>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <TIM_OC1_SetConfig+0x80>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a28      	ldr	r2, [pc, #160]	; (8005a64 <TIM_OC1_SetConfig+0x11c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d10c      	bne.n	80059e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0308 	bic.w	r3, r3, #8
 80059ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f023 0304 	bic.w	r3, r3, #4
 80059e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1b      	ldr	r2, [pc, #108]	; (8005a54 <TIM_OC1_SetConfig+0x10c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00f      	beq.n	8005a0a <TIM_OC1_SetConfig+0xc2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a1a      	ldr	r2, [pc, #104]	; (8005a58 <TIM_OC1_SetConfig+0x110>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00b      	beq.n	8005a0a <TIM_OC1_SetConfig+0xc2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a19      	ldr	r2, [pc, #100]	; (8005a5c <TIM_OC1_SetConfig+0x114>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d007      	beq.n	8005a0a <TIM_OC1_SetConfig+0xc2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <TIM_OC1_SetConfig+0x118>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_OC1_SetConfig+0xc2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a17      	ldr	r2, [pc, #92]	; (8005a64 <TIM_OC1_SetConfig+0x11c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d111      	bne.n	8005a2e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	621a      	str	r2, [r3, #32]
}
 8005a48:	bf00      	nop
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	40012c00 	.word	0x40012c00
 8005a58:	40013400 	.word	0x40013400
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40014400 	.word	0x40014400
 8005a64:	40014800 	.word	0x40014800

08005a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f023 0210 	bic.w	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0320 	bic.w	r3, r3, #32
 8005ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a28      	ldr	r2, [pc, #160]	; (8005b68 <TIM_OC2_SetConfig+0x100>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_OC2_SetConfig+0x6c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a27      	ldr	r2, [pc, #156]	; (8005b6c <TIM_OC2_SetConfig+0x104>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d10d      	bne.n	8005af0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a1d      	ldr	r2, [pc, #116]	; (8005b68 <TIM_OC2_SetConfig+0x100>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00f      	beq.n	8005b18 <TIM_OC2_SetConfig+0xb0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a1c      	ldr	r2, [pc, #112]	; (8005b6c <TIM_OC2_SetConfig+0x104>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00b      	beq.n	8005b18 <TIM_OC2_SetConfig+0xb0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <TIM_OC2_SetConfig+0x108>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_OC2_SetConfig+0xb0>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a1a      	ldr	r2, [pc, #104]	; (8005b74 <TIM_OC2_SetConfig+0x10c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_OC2_SetConfig+0xb0>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a19      	ldr	r2, [pc, #100]	; (8005b78 <TIM_OC2_SetConfig+0x110>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d113      	bne.n	8005b40 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40013400 	.word	0x40013400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0303 	bic.w	r3, r3, #3
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a27      	ldr	r2, [pc, #156]	; (8005c78 <TIM_OC3_SetConfig+0xfc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d003      	beq.n	8005be6 <TIM_OC3_SetConfig+0x6a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a26      	ldr	r2, [pc, #152]	; (8005c7c <TIM_OC3_SetConfig+0x100>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d10d      	bne.n	8005c02 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <TIM_OC3_SetConfig+0xfc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00f      	beq.n	8005c2a <TIM_OC3_SetConfig+0xae>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <TIM_OC3_SetConfig+0x100>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00b      	beq.n	8005c2a <TIM_OC3_SetConfig+0xae>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a1a      	ldr	r2, [pc, #104]	; (8005c80 <TIM_OC3_SetConfig+0x104>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d007      	beq.n	8005c2a <TIM_OC3_SetConfig+0xae>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a19      	ldr	r2, [pc, #100]	; (8005c84 <TIM_OC3_SetConfig+0x108>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_OC3_SetConfig+0xae>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a18      	ldr	r2, [pc, #96]	; (8005c88 <TIM_OC3_SetConfig+0x10c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d113      	bne.n	8005c52 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800

08005c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	031b      	lsls	r3, r3, #12
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a28      	ldr	r2, [pc, #160]	; (8005d8c <TIM_OC4_SetConfig+0x100>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC4_SetConfig+0x6c>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a27      	ldr	r2, [pc, #156]	; (8005d90 <TIM_OC4_SetConfig+0x104>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d10d      	bne.n	8005d14 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	031b      	lsls	r3, r3, #12
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <TIM_OC4_SetConfig+0x100>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00f      	beq.n	8005d3c <TIM_OC4_SetConfig+0xb0>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	; (8005d90 <TIM_OC4_SetConfig+0x104>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00b      	beq.n	8005d3c <TIM_OC4_SetConfig+0xb0>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a1b      	ldr	r2, [pc, #108]	; (8005d94 <TIM_OC4_SetConfig+0x108>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d007      	beq.n	8005d3c <TIM_OC4_SetConfig+0xb0>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a1a      	ldr	r2, [pc, #104]	; (8005d98 <TIM_OC4_SetConfig+0x10c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d003      	beq.n	8005d3c <TIM_OC4_SetConfig+0xb0>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a19      	ldr	r2, [pc, #100]	; (8005d9c <TIM_OC4_SetConfig+0x110>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d113      	bne.n	8005d64 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	019b      	lsls	r3, r3, #6
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	019b      	lsls	r3, r3, #6
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	621a      	str	r2, [r3, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40013400 	.word	0x40013400
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40014400 	.word	0x40014400
 8005d9c:	40014800 	.word	0x40014800

08005da0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005de4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	041b      	lsls	r3, r3, #16
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <TIM_OC5_SetConfig+0xb4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00f      	beq.n	8005e1a <TIM_OC5_SetConfig+0x7a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a16      	ldr	r2, [pc, #88]	; (8005e58 <TIM_OC5_SetConfig+0xb8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00b      	beq.n	8005e1a <TIM_OC5_SetConfig+0x7a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <TIM_OC5_SetConfig+0xbc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d007      	beq.n	8005e1a <TIM_OC5_SetConfig+0x7a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a14      	ldr	r2, [pc, #80]	; (8005e60 <TIM_OC5_SetConfig+0xc0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d003      	beq.n	8005e1a <TIM_OC5_SetConfig+0x7a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <TIM_OC5_SetConfig+0xc4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d109      	bne.n	8005e2e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	021b      	lsls	r3, r3, #8
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	621a      	str	r2, [r3, #32]
}
 8005e48:	bf00      	nop
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	40012c00 	.word	0x40012c00
 8005e58:	40013400 	.word	0x40013400
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40014400 	.word	0x40014400
 8005e64:	40014800 	.word	0x40014800

08005e68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	051b      	lsls	r3, r3, #20
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <TIM_OC6_SetConfig+0xb8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00f      	beq.n	8005ee4 <TIM_OC6_SetConfig+0x7c>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <TIM_OC6_SetConfig+0xbc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <TIM_OC6_SetConfig+0x7c>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a16      	ldr	r2, [pc, #88]	; (8005f28 <TIM_OC6_SetConfig+0xc0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <TIM_OC6_SetConfig+0x7c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <TIM_OC6_SetConfig+0xc4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_OC6_SetConfig+0x7c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <TIM_OC6_SetConfig+0xc8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d109      	bne.n	8005ef8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	029b      	lsls	r3, r3, #10
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	bf00      	nop
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	40013400 	.word	0x40013400
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400
 8005f30:	40014800 	.word	0x40014800

08005f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f023 0201 	bic.w	r2, r3, #1
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f023 030a 	bic.w	r3, r3, #10
 8005f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b087      	sub	sp, #28
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f023 0210 	bic.w	r2, r3, #16
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	031b      	lsls	r3, r3, #12
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	621a      	str	r2, [r3, #32]
}
 8005fe6:	bf00      	nop
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	f043 0307 	orr.w	r3, r3, #7
 8006018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	609a      	str	r2, [r3, #8]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	021a      	lsls	r2, r3, #8
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	431a      	orrs	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4313      	orrs	r3, r2
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	609a      	str	r2, [r3, #8]
}
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	2201      	movs	r2, #1
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a1a      	ldr	r2, [r3, #32]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	43db      	mvns	r3, r3
 800608e:	401a      	ands	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1a      	ldr	r2, [r3, #32]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f003 031f 	and.w	r3, r3, #31
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	fa01 f303 	lsl.w	r3, r1, r3
 80060a4:	431a      	orrs	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	621a      	str	r2, [r3, #32]
}
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e065      	b.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2c      	ldr	r2, [pc, #176]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2b      	ldr	r2, [pc, #172]	; (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d108      	bne.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800610a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800611c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006120:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d018      	beq.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006146:	d013      	beq.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00e      	beq.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a17      	ldr	r2, [pc, #92]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d009      	beq.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a12      	ldr	r2, [pc, #72]	; (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d004      	beq.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a13      	ldr	r2, [pc, #76]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d10c      	bne.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006176:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	4313      	orrs	r3, r2
 8006180:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40013400 	.word	0x40013400
 80061b0:	40000400 	.word	0x40000400
 80061b4:	40000800 	.word	0x40000800
 80061b8:	40014000 	.word	0x40014000

080061bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d101      	bne.n	80061d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061d4:	2302      	movs	r3, #2
 80061d6:	e087      	b.n	80062e8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	041b      	lsls	r3, r3, #16
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a27      	ldr	r2, [pc, #156]	; (80062f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d004      	beq.n	8006266 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a25      	ldr	r2, [pc, #148]	; (80062f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d106      	bne.n	8006274 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a1e      	ldr	r2, [pc, #120]	; (80062f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1d      	ldr	r2, [pc, #116]	; (80062f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d126      	bne.n	80062d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	051b      	lsls	r3, r3, #20
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a0e      	ldr	r2, [pc, #56]	; (80062f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d004      	beq.n	80062c8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a0d      	ldr	r2, [pc, #52]	; (80062f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d106      	bne.n	80062d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40013400 	.word	0x40013400

080062fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e042      	b.n	8006394 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006314:	2b00      	cmp	r3, #0
 8006316:	d106      	bne.n	8006326 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7fb fbc3 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2224      	movs	r2, #36	; 0x24
 800632a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0201 	bic.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f8c2 	bl	80064c8 <UART_SetConfig>
 8006344:	4603      	mov	r3, r0
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e022      	b.n	8006394 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fb82 	bl	8006a60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800636a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800637a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fc09 	bl	8006ba4 <UART_CheckIdleState>
 8006392:	4603      	mov	r3, r0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	; 0x28
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	f040 8083 	bne.w	80064be <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_UART_Transmit+0x28>
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e07b      	b.n	80064c0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Transmit+0x3a>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e074      	b.n	80064c0 <HAL_UART_Transmit+0x124>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2221      	movs	r2, #33	; 0x21
 80063ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ee:	f7fb fcb5 	bl	8001d5c <HAL_GetTick>
 80063f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d108      	bne.n	8006420 <HAL_UART_Transmit+0x84>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d104      	bne.n	8006420 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	e003      	b.n	8006428 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006430:	e02c      	b.n	800648c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2200      	movs	r2, #0
 800643a:	2180      	movs	r1, #128	; 0x80
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fbfc 	bl	8006c3a <UART_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e039      	b.n	80064c0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006460:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	3302      	adds	r3, #2
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	e007      	b.n	800647a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	781a      	ldrb	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	3301      	adds	r3, #1
 8006478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1cc      	bne.n	8006432 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2200      	movs	r2, #0
 80064a0:	2140      	movs	r1, #64	; 0x40
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fbc9 	bl	8006c3a <UART_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e006      	b.n	80064c0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e000      	b.n	80064c0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80064be:	2302      	movs	r3, #2
  }
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064cc:	b08c      	sub	sp, #48	; 0x30
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4bab      	ldr	r3, [pc, #684]	; (80067a4 <UART_SetConfig+0x2dc>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006500:	430b      	orrs	r3, r1
 8006502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4aa0      	ldr	r2, [pc, #640]	; (80067a8 <UART_SetConfig+0x2e0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006530:	4313      	orrs	r3, r2
 8006532:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800653e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	6812      	ldr	r2, [r2, #0]
 8006546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006548:	430b      	orrs	r3, r1
 800654a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	f023 010f 	bic.w	r1, r3, #15
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a91      	ldr	r2, [pc, #580]	; (80067ac <UART_SetConfig+0x2e4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d125      	bne.n	80065b8 <UART_SetConfig+0xf0>
 800656c:	4b90      	ldr	r3, [pc, #576]	; (80067b0 <UART_SetConfig+0x2e8>)
 800656e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	2b03      	cmp	r3, #3
 8006578:	d81a      	bhi.n	80065b0 <UART_SetConfig+0xe8>
 800657a:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <UART_SetConfig+0xb8>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	08006591 	.word	0x08006591
 8006584:	080065a1 	.word	0x080065a1
 8006588:	08006599 	.word	0x08006599
 800658c:	080065a9 	.word	0x080065a9
 8006590:	2301      	movs	r3, #1
 8006592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006596:	e0d6      	b.n	8006746 <UART_SetConfig+0x27e>
 8006598:	2302      	movs	r3, #2
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800659e:	e0d2      	b.n	8006746 <UART_SetConfig+0x27e>
 80065a0:	2304      	movs	r3, #4
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065a6:	e0ce      	b.n	8006746 <UART_SetConfig+0x27e>
 80065a8:	2308      	movs	r3, #8
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ae:	e0ca      	b.n	8006746 <UART_SetConfig+0x27e>
 80065b0:	2310      	movs	r3, #16
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b6:	e0c6      	b.n	8006746 <UART_SetConfig+0x27e>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a7d      	ldr	r2, [pc, #500]	; (80067b4 <UART_SetConfig+0x2ec>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d138      	bne.n	8006634 <UART_SetConfig+0x16c>
 80065c2:	4b7b      	ldr	r3, [pc, #492]	; (80067b0 <UART_SetConfig+0x2e8>)
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c8:	f003 030c 	and.w	r3, r3, #12
 80065cc:	2b0c      	cmp	r3, #12
 80065ce:	d82d      	bhi.n	800662c <UART_SetConfig+0x164>
 80065d0:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <UART_SetConfig+0x110>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	0800660d 	.word	0x0800660d
 80065dc:	0800662d 	.word	0x0800662d
 80065e0:	0800662d 	.word	0x0800662d
 80065e4:	0800662d 	.word	0x0800662d
 80065e8:	0800661d 	.word	0x0800661d
 80065ec:	0800662d 	.word	0x0800662d
 80065f0:	0800662d 	.word	0x0800662d
 80065f4:	0800662d 	.word	0x0800662d
 80065f8:	08006615 	.word	0x08006615
 80065fc:	0800662d 	.word	0x0800662d
 8006600:	0800662d 	.word	0x0800662d
 8006604:	0800662d 	.word	0x0800662d
 8006608:	08006625 	.word	0x08006625
 800660c:	2300      	movs	r3, #0
 800660e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006612:	e098      	b.n	8006746 <UART_SetConfig+0x27e>
 8006614:	2302      	movs	r3, #2
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661a:	e094      	b.n	8006746 <UART_SetConfig+0x27e>
 800661c:	2304      	movs	r3, #4
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006622:	e090      	b.n	8006746 <UART_SetConfig+0x27e>
 8006624:	2308      	movs	r3, #8
 8006626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662a:	e08c      	b.n	8006746 <UART_SetConfig+0x27e>
 800662c:	2310      	movs	r3, #16
 800662e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006632:	e088      	b.n	8006746 <UART_SetConfig+0x27e>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a5f      	ldr	r2, [pc, #380]	; (80067b8 <UART_SetConfig+0x2f0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d125      	bne.n	800668a <UART_SetConfig+0x1c2>
 800663e:	4b5c      	ldr	r3, [pc, #368]	; (80067b0 <UART_SetConfig+0x2e8>)
 8006640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006644:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006648:	2b30      	cmp	r3, #48	; 0x30
 800664a:	d016      	beq.n	800667a <UART_SetConfig+0x1b2>
 800664c:	2b30      	cmp	r3, #48	; 0x30
 800664e:	d818      	bhi.n	8006682 <UART_SetConfig+0x1ba>
 8006650:	2b20      	cmp	r3, #32
 8006652:	d00a      	beq.n	800666a <UART_SetConfig+0x1a2>
 8006654:	2b20      	cmp	r3, #32
 8006656:	d814      	bhi.n	8006682 <UART_SetConfig+0x1ba>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <UART_SetConfig+0x19a>
 800665c:	2b10      	cmp	r3, #16
 800665e:	d008      	beq.n	8006672 <UART_SetConfig+0x1aa>
 8006660:	e00f      	b.n	8006682 <UART_SetConfig+0x1ba>
 8006662:	2300      	movs	r3, #0
 8006664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006668:	e06d      	b.n	8006746 <UART_SetConfig+0x27e>
 800666a:	2302      	movs	r3, #2
 800666c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006670:	e069      	b.n	8006746 <UART_SetConfig+0x27e>
 8006672:	2304      	movs	r3, #4
 8006674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006678:	e065      	b.n	8006746 <UART_SetConfig+0x27e>
 800667a:	2308      	movs	r3, #8
 800667c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006680:	e061      	b.n	8006746 <UART_SetConfig+0x27e>
 8006682:	2310      	movs	r3, #16
 8006684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006688:	e05d      	b.n	8006746 <UART_SetConfig+0x27e>
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a4b      	ldr	r2, [pc, #300]	; (80067bc <UART_SetConfig+0x2f4>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d125      	bne.n	80066e0 <UART_SetConfig+0x218>
 8006694:	4b46      	ldr	r3, [pc, #280]	; (80067b0 <UART_SetConfig+0x2e8>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800669e:	2bc0      	cmp	r3, #192	; 0xc0
 80066a0:	d016      	beq.n	80066d0 <UART_SetConfig+0x208>
 80066a2:	2bc0      	cmp	r3, #192	; 0xc0
 80066a4:	d818      	bhi.n	80066d8 <UART_SetConfig+0x210>
 80066a6:	2b80      	cmp	r3, #128	; 0x80
 80066a8:	d00a      	beq.n	80066c0 <UART_SetConfig+0x1f8>
 80066aa:	2b80      	cmp	r3, #128	; 0x80
 80066ac:	d814      	bhi.n	80066d8 <UART_SetConfig+0x210>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <UART_SetConfig+0x1f0>
 80066b2:	2b40      	cmp	r3, #64	; 0x40
 80066b4:	d008      	beq.n	80066c8 <UART_SetConfig+0x200>
 80066b6:	e00f      	b.n	80066d8 <UART_SetConfig+0x210>
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066be:	e042      	b.n	8006746 <UART_SetConfig+0x27e>
 80066c0:	2302      	movs	r3, #2
 80066c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066c6:	e03e      	b.n	8006746 <UART_SetConfig+0x27e>
 80066c8:	2304      	movs	r3, #4
 80066ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ce:	e03a      	b.n	8006746 <UART_SetConfig+0x27e>
 80066d0:	2308      	movs	r3, #8
 80066d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d6:	e036      	b.n	8006746 <UART_SetConfig+0x27e>
 80066d8:	2310      	movs	r3, #16
 80066da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066de:	e032      	b.n	8006746 <UART_SetConfig+0x27e>
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a30      	ldr	r2, [pc, #192]	; (80067a8 <UART_SetConfig+0x2e0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d12a      	bne.n	8006740 <UART_SetConfig+0x278>
 80066ea:	4b31      	ldr	r3, [pc, #196]	; (80067b0 <UART_SetConfig+0x2e8>)
 80066ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066f8:	d01a      	beq.n	8006730 <UART_SetConfig+0x268>
 80066fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066fe:	d81b      	bhi.n	8006738 <UART_SetConfig+0x270>
 8006700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006704:	d00c      	beq.n	8006720 <UART_SetConfig+0x258>
 8006706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800670a:	d815      	bhi.n	8006738 <UART_SetConfig+0x270>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <UART_SetConfig+0x250>
 8006710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006714:	d008      	beq.n	8006728 <UART_SetConfig+0x260>
 8006716:	e00f      	b.n	8006738 <UART_SetConfig+0x270>
 8006718:	2300      	movs	r3, #0
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671e:	e012      	b.n	8006746 <UART_SetConfig+0x27e>
 8006720:	2302      	movs	r3, #2
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006726:	e00e      	b.n	8006746 <UART_SetConfig+0x27e>
 8006728:	2304      	movs	r3, #4
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800672e:	e00a      	b.n	8006746 <UART_SetConfig+0x27e>
 8006730:	2308      	movs	r3, #8
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006736:	e006      	b.n	8006746 <UART_SetConfig+0x27e>
 8006738:	2310      	movs	r3, #16
 800673a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800673e:	e002      	b.n	8006746 <UART_SetConfig+0x27e>
 8006740:	2310      	movs	r3, #16
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a17      	ldr	r2, [pc, #92]	; (80067a8 <UART_SetConfig+0x2e0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	f040 80a8 	bne.w	80068a2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006752:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006756:	2b08      	cmp	r3, #8
 8006758:	d834      	bhi.n	80067c4 <UART_SetConfig+0x2fc>
 800675a:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <UART_SetConfig+0x298>)
 800675c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006760:	08006785 	.word	0x08006785
 8006764:	080067c5 	.word	0x080067c5
 8006768:	0800678d 	.word	0x0800678d
 800676c:	080067c5 	.word	0x080067c5
 8006770:	08006793 	.word	0x08006793
 8006774:	080067c5 	.word	0x080067c5
 8006778:	080067c5 	.word	0x080067c5
 800677c:	080067c5 	.word	0x080067c5
 8006780:	0800679b 	.word	0x0800679b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006784:	f7fd fb10 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8006788:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800678a:	e021      	b.n	80067d0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800678c:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <UART_SetConfig+0x2f8>)
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006790:	e01e      	b.n	80067d0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006792:	f7fd fa9b 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8006796:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006798:	e01a      	b.n	80067d0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067a0:	e016      	b.n	80067d0 <UART_SetConfig+0x308>
 80067a2:	bf00      	nop
 80067a4:	cfff69f3 	.word	0xcfff69f3
 80067a8:	40008000 	.word	0x40008000
 80067ac:	40013800 	.word	0x40013800
 80067b0:	40021000 	.word	0x40021000
 80067b4:	40004400 	.word	0x40004400
 80067b8:	40004800 	.word	0x40004800
 80067bc:	40004c00 	.word	0x40004c00
 80067c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 812a 	beq.w	8006a2c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	4a9e      	ldr	r2, [pc, #632]	; (8006a58 <UART_SetConfig+0x590>)
 80067de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067e2:	461a      	mov	r2, r3
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80067ea:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	4613      	mov	r3, r2
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	4413      	add	r3, r2
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d305      	bcc.n	8006808 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	429a      	cmp	r2, r3
 8006806:	d903      	bls.n	8006810 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800680e:	e10d      	b.n	8006a2c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	2200      	movs	r2, #0
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	60fa      	str	r2, [r7, #12]
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	4a8e      	ldr	r2, [pc, #568]	; (8006a58 <UART_SetConfig+0x590>)
 800681e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006822:	b29b      	uxth	r3, r3
 8006824:	2200      	movs	r2, #0
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	607a      	str	r2, [r7, #4]
 800682a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800682e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006832:	f7fa f9eb 	bl	8000c0c <__aeabi_uldivmod>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4610      	mov	r0, r2
 800683c:	4619      	mov	r1, r3
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	f04f 0300 	mov.w	r3, #0
 8006846:	020b      	lsls	r3, r1, #8
 8006848:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800684c:	0202      	lsls	r2, r0, #8
 800684e:	6979      	ldr	r1, [r7, #20]
 8006850:	6849      	ldr	r1, [r1, #4]
 8006852:	0849      	lsrs	r1, r1, #1
 8006854:	2000      	movs	r0, #0
 8006856:	460c      	mov	r4, r1
 8006858:	4605      	mov	r5, r0
 800685a:	eb12 0804 	adds.w	r8, r2, r4
 800685e:	eb43 0905 	adc.w	r9, r3, r5
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	469a      	mov	sl, r3
 800686a:	4693      	mov	fp, r2
 800686c:	4652      	mov	r2, sl
 800686e:	465b      	mov	r3, fp
 8006870:	4640      	mov	r0, r8
 8006872:	4649      	mov	r1, r9
 8006874:	f7fa f9ca 	bl	8000c0c <__aeabi_uldivmod>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4613      	mov	r3, r2
 800687e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006886:	d308      	bcc.n	800689a <UART_SetConfig+0x3d2>
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800688e:	d204      	bcs.n	800689a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6a3a      	ldr	r2, [r7, #32]
 8006896:	60da      	str	r2, [r3, #12]
 8006898:	e0c8      	b.n	8006a2c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068a0:	e0c4      	b.n	8006a2c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068aa:	d167      	bne.n	800697c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80068ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d828      	bhi.n	8006906 <UART_SetConfig+0x43e>
 80068b4:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <UART_SetConfig+0x3f4>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	080068e1 	.word	0x080068e1
 80068c0:	080068e9 	.word	0x080068e9
 80068c4:	080068f1 	.word	0x080068f1
 80068c8:	08006907 	.word	0x08006907
 80068cc:	080068f7 	.word	0x080068f7
 80068d0:	08006907 	.word	0x08006907
 80068d4:	08006907 	.word	0x08006907
 80068d8:	08006907 	.word	0x08006907
 80068dc:	080068ff 	.word	0x080068ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e0:	f7fd fa62 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 80068e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068e6:	e014      	b.n	8006912 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068e8:	f7fd fa74 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 80068ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068ee:	e010      	b.n	8006912 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068f0:	4b5a      	ldr	r3, [pc, #360]	; (8006a5c <UART_SetConfig+0x594>)
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068f4:	e00d      	b.n	8006912 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068f6:	f7fd f9e9 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 80068fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068fc:	e009      	b.n	8006912 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006904:	e005      	b.n	8006912 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006910:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 8089 	beq.w	8006a2c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	4a4e      	ldr	r2, [pc, #312]	; (8006a58 <UART_SetConfig+0x590>)
 8006920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006924:	461a      	mov	r2, r3
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	fbb3 f3f2 	udiv	r3, r3, r2
 800692c:	005a      	lsls	r2, r3, #1
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	085b      	lsrs	r3, r3, #1
 8006934:	441a      	add	r2, r3
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	fbb2 f3f3 	udiv	r3, r2, r3
 800693e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	2b0f      	cmp	r3, #15
 8006944:	d916      	bls.n	8006974 <UART_SetConfig+0x4ac>
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800694c:	d212      	bcs.n	8006974 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	b29b      	uxth	r3, r3
 8006952:	f023 030f 	bic.w	r3, r3, #15
 8006956:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	085b      	lsrs	r3, r3, #1
 800695c:	b29b      	uxth	r3, r3
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	b29a      	uxth	r2, r3
 8006964:	8bfb      	ldrh	r3, [r7, #30]
 8006966:	4313      	orrs	r3, r2
 8006968:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	8bfa      	ldrh	r2, [r7, #30]
 8006970:	60da      	str	r2, [r3, #12]
 8006972:	e05b      	b.n	8006a2c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800697a:	e057      	b.n	8006a2c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800697c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006980:	2b08      	cmp	r3, #8
 8006982:	d828      	bhi.n	80069d6 <UART_SetConfig+0x50e>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x4c4>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069b1 	.word	0x080069b1
 8006990:	080069b9 	.word	0x080069b9
 8006994:	080069c1 	.word	0x080069c1
 8006998:	080069d7 	.word	0x080069d7
 800699c:	080069c7 	.word	0x080069c7
 80069a0:	080069d7 	.word	0x080069d7
 80069a4:	080069d7 	.word	0x080069d7
 80069a8:	080069d7 	.word	0x080069d7
 80069ac:	080069cf 	.word	0x080069cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b0:	f7fd f9fa 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 80069b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069b6:	e014      	b.n	80069e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069b8:	f7fd fa0c 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 80069bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069be:	e010      	b.n	80069e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c0:	4b26      	ldr	r3, [pc, #152]	; (8006a5c <UART_SetConfig+0x594>)
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069c4:	e00d      	b.n	80069e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069c6:	f7fd f981 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 80069ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069cc:	e009      	b.n	80069e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069d4:	e005      	b.n	80069e2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069e0:	bf00      	nop
    }

    if (pclk != 0U)
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d021      	beq.n	8006a2c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	4a1a      	ldr	r2, [pc, #104]	; (8006a58 <UART_SetConfig+0x590>)
 80069ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069f2:	461a      	mov	r2, r3
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	085b      	lsrs	r3, r3, #1
 8006a00:	441a      	add	r2, r3
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	2b0f      	cmp	r3, #15
 8006a10:	d909      	bls.n	8006a26 <UART_SetConfig+0x55e>
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a18:	d205      	bcs.n	8006a26 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60da      	str	r2, [r3, #12]
 8006a24:	e002      	b.n	8006a2c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2200      	movs	r2, #0
 8006a46:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006a48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3730      	adds	r7, #48	; 0x30
 8006a50:	46bd      	mov	sp, r7
 8006a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a56:	bf00      	nop
 8006a58:	08007978 	.word	0x08007978
 8006a5c:	00f42400 	.word	0x00f42400

08006a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00a      	beq.n	8006a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00a      	beq.n	8006af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01a      	beq.n	8006b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b5e:	d10a      	bne.n	8006b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	605a      	str	r2, [r3, #4]
  }
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bb4:	f7fb f8d2 	bl	8001d5c <HAL_GetTick>
 8006bb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d10e      	bne.n	8006be6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f82f 	bl	8006c3a <UART_WaitOnFlagUntilTimeout>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e025      	b.n	8006c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d10e      	bne.n	8006c12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f819 	bl	8006c3a <UART_WaitOnFlagUntilTimeout>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e00f      	b.n	8006c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b09c      	sub	sp, #112	; 0x70
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	603b      	str	r3, [r7, #0]
 8006c46:	4613      	mov	r3, r2
 8006c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c4a:	e0a9      	b.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c52:	f000 80a5 	beq.w	8006da0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c56:	f7fb f881 	bl	8001d5c <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d302      	bcc.n	8006c6c <UART_WaitOnFlagUntilTimeout+0x32>
 8006c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d140      	bne.n	8006cee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c80:	667b      	str	r3, [r7, #100]	; 0x64
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e6      	bne.n	8006c6c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	663b      	str	r3, [r7, #96]	; 0x60
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3308      	adds	r3, #8
 8006cbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006cc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e5      	bne.n	8006c9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e069      	b.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d051      	beq.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d0a:	d149      	bne.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d34:	637b      	str	r3, [r7, #52]	; 0x34
 8006d36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e6      	bne.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	613b      	str	r3, [r7, #16]
   return(result);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f023 0301 	bic.w	r3, r3, #1
 8006d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3308      	adds	r3, #8
 8006d66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d68:	623a      	str	r2, [r7, #32]
 8006d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	69f9      	ldr	r1, [r7, #28]
 8006d6e:	6a3a      	ldr	r2, [r7, #32]
 8006d70:	e841 2300 	strex	r3, r2, [r1]
 8006d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e5      	bne.n	8006d48 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e010      	b.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69da      	ldr	r2, [r3, #28]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	4013      	ands	r3, r2
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	bf0c      	ite	eq
 8006db0:	2301      	moveq	r3, #1
 8006db2:	2300      	movne	r3, #0
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	f43f af46 	beq.w	8006c4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3770      	adds	r7, #112	; 0x70
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b085      	sub	sp, #20
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e027      	b.n	8006e30 <HAL_UARTEx_DisableFifoMode+0x66>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2224      	movs	r2, #36	; 0x24
 8006dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0201 	bic.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e02d      	b.n	8006eb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2224      	movs	r2, #36	; 0x24
 8006e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0201 	bic.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f84f 	bl	8006f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e02d      	b.n	8006f2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2224      	movs	r2, #36	; 0x24
 8006edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0201 	bic.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f811 	bl	8006f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d108      	bne.n	8006f56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f54:	e031      	b.n	8006fba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f56:	2308      	movs	r3, #8
 8006f58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f5a:	2308      	movs	r3, #8
 8006f5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	0e5b      	lsrs	r3, r3, #25
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	0f5b      	lsrs	r3, r3, #29
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	f003 0307 	and.w	r3, r3, #7
 8006f7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	7b3a      	ldrb	r2, [r7, #12]
 8006f82:	4911      	ldr	r1, [pc, #68]	; (8006fc8 <UARTEx_SetNbDataToProcess+0x94>)
 8006f84:	5c8a      	ldrb	r2, [r1, r2]
 8006f86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f8a:	7b3a      	ldrb	r2, [r7, #12]
 8006f8c:	490f      	ldr	r1, [pc, #60]	; (8006fcc <UARTEx_SetNbDataToProcess+0x98>)
 8006f8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f90:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	7b7a      	ldrb	r2, [r7, #13]
 8006fa0:	4909      	ldr	r1, [pc, #36]	; (8006fc8 <UARTEx_SetNbDataToProcess+0x94>)
 8006fa2:	5c8a      	ldrb	r2, [r1, r2]
 8006fa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006fa8:	7b7a      	ldrb	r2, [r7, #13]
 8006faa:	4908      	ldr	r1, [pc, #32]	; (8006fcc <UARTEx_SetNbDataToProcess+0x98>)
 8006fac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fae:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006fba:	bf00      	nop
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	08007990 	.word	0x08007990
 8006fcc:	08007998 	.word	0x08007998

08006fd0 <__errno>:
 8006fd0:	4b01      	ldr	r3, [pc, #4]	; (8006fd8 <__errno+0x8>)
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	2000000c 	.word	0x2000000c

08006fdc <__libc_init_array>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	4d0d      	ldr	r5, [pc, #52]	; (8007014 <__libc_init_array+0x38>)
 8006fe0:	4c0d      	ldr	r4, [pc, #52]	; (8007018 <__libc_init_array+0x3c>)
 8006fe2:	1b64      	subs	r4, r4, r5
 8006fe4:	10a4      	asrs	r4, r4, #2
 8006fe6:	2600      	movs	r6, #0
 8006fe8:	42a6      	cmp	r6, r4
 8006fea:	d109      	bne.n	8007000 <__libc_init_array+0x24>
 8006fec:	4d0b      	ldr	r5, [pc, #44]	; (800701c <__libc_init_array+0x40>)
 8006fee:	4c0c      	ldr	r4, [pc, #48]	; (8007020 <__libc_init_array+0x44>)
 8006ff0:	f000 fc9c 	bl	800792c <_init>
 8006ff4:	1b64      	subs	r4, r4, r5
 8006ff6:	10a4      	asrs	r4, r4, #2
 8006ff8:	2600      	movs	r6, #0
 8006ffa:	42a6      	cmp	r6, r4
 8006ffc:	d105      	bne.n	800700a <__libc_init_array+0x2e>
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	f855 3b04 	ldr.w	r3, [r5], #4
 8007004:	4798      	blx	r3
 8007006:	3601      	adds	r6, #1
 8007008:	e7ee      	b.n	8006fe8 <__libc_init_array+0xc>
 800700a:	f855 3b04 	ldr.w	r3, [r5], #4
 800700e:	4798      	blx	r3
 8007010:	3601      	adds	r6, #1
 8007012:	e7f2      	b.n	8006ffa <__libc_init_array+0x1e>
 8007014:	080079dc 	.word	0x080079dc
 8007018:	080079dc 	.word	0x080079dc
 800701c:	080079dc 	.word	0x080079dc
 8007020:	080079e0 	.word	0x080079e0

08007024 <memset>:
 8007024:	4402      	add	r2, r0
 8007026:	4603      	mov	r3, r0
 8007028:	4293      	cmp	r3, r2
 800702a:	d100      	bne.n	800702e <memset+0xa>
 800702c:	4770      	bx	lr
 800702e:	f803 1b01 	strb.w	r1, [r3], #1
 8007032:	e7f9      	b.n	8007028 <memset+0x4>

08007034 <siprintf>:
 8007034:	b40e      	push	{r1, r2, r3}
 8007036:	b500      	push	{lr}
 8007038:	b09c      	sub	sp, #112	; 0x70
 800703a:	ab1d      	add	r3, sp, #116	; 0x74
 800703c:	9002      	str	r0, [sp, #8]
 800703e:	9006      	str	r0, [sp, #24]
 8007040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007044:	4809      	ldr	r0, [pc, #36]	; (800706c <siprintf+0x38>)
 8007046:	9107      	str	r1, [sp, #28]
 8007048:	9104      	str	r1, [sp, #16]
 800704a:	4909      	ldr	r1, [pc, #36]	; (8007070 <siprintf+0x3c>)
 800704c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007050:	9105      	str	r1, [sp, #20]
 8007052:	6800      	ldr	r0, [r0, #0]
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	a902      	add	r1, sp, #8
 8007058:	f000 f876 	bl	8007148 <_svfiprintf_r>
 800705c:	9b02      	ldr	r3, [sp, #8]
 800705e:	2200      	movs	r2, #0
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	b01c      	add	sp, #112	; 0x70
 8007064:	f85d eb04 	ldr.w	lr, [sp], #4
 8007068:	b003      	add	sp, #12
 800706a:	4770      	bx	lr
 800706c:	2000000c 	.word	0x2000000c
 8007070:	ffff0208 	.word	0xffff0208

08007074 <strcat>:
 8007074:	b510      	push	{r4, lr}
 8007076:	4602      	mov	r2, r0
 8007078:	7814      	ldrb	r4, [r2, #0]
 800707a:	4613      	mov	r3, r2
 800707c:	3201      	adds	r2, #1
 800707e:	2c00      	cmp	r4, #0
 8007080:	d1fa      	bne.n	8007078 <strcat+0x4>
 8007082:	3b01      	subs	r3, #1
 8007084:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007088:	f803 2f01 	strb.w	r2, [r3, #1]!
 800708c:	2a00      	cmp	r2, #0
 800708e:	d1f9      	bne.n	8007084 <strcat+0x10>
 8007090:	bd10      	pop	{r4, pc}

08007092 <__ssputs_r>:
 8007092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007096:	688e      	ldr	r6, [r1, #8]
 8007098:	429e      	cmp	r6, r3
 800709a:	4682      	mov	sl, r0
 800709c:	460c      	mov	r4, r1
 800709e:	4690      	mov	r8, r2
 80070a0:	461f      	mov	r7, r3
 80070a2:	d838      	bhi.n	8007116 <__ssputs_r+0x84>
 80070a4:	898a      	ldrh	r2, [r1, #12]
 80070a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070aa:	d032      	beq.n	8007112 <__ssputs_r+0x80>
 80070ac:	6825      	ldr	r5, [r4, #0]
 80070ae:	6909      	ldr	r1, [r1, #16]
 80070b0:	eba5 0901 	sub.w	r9, r5, r1
 80070b4:	6965      	ldr	r5, [r4, #20]
 80070b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070be:	3301      	adds	r3, #1
 80070c0:	444b      	add	r3, r9
 80070c2:	106d      	asrs	r5, r5, #1
 80070c4:	429d      	cmp	r5, r3
 80070c6:	bf38      	it	cc
 80070c8:	461d      	movcc	r5, r3
 80070ca:	0553      	lsls	r3, r2, #21
 80070cc:	d531      	bpl.n	8007132 <__ssputs_r+0xa0>
 80070ce:	4629      	mov	r1, r5
 80070d0:	f000 fb62 	bl	8007798 <_malloc_r>
 80070d4:	4606      	mov	r6, r0
 80070d6:	b950      	cbnz	r0, 80070ee <__ssputs_r+0x5c>
 80070d8:	230c      	movs	r3, #12
 80070da:	f8ca 3000 	str.w	r3, [sl]
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e4:	81a3      	strh	r3, [r4, #12]
 80070e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ee:	6921      	ldr	r1, [r4, #16]
 80070f0:	464a      	mov	r2, r9
 80070f2:	f000 fabd 	bl	8007670 <memcpy>
 80070f6:	89a3      	ldrh	r3, [r4, #12]
 80070f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007100:	81a3      	strh	r3, [r4, #12]
 8007102:	6126      	str	r6, [r4, #16]
 8007104:	6165      	str	r5, [r4, #20]
 8007106:	444e      	add	r6, r9
 8007108:	eba5 0509 	sub.w	r5, r5, r9
 800710c:	6026      	str	r6, [r4, #0]
 800710e:	60a5      	str	r5, [r4, #8]
 8007110:	463e      	mov	r6, r7
 8007112:	42be      	cmp	r6, r7
 8007114:	d900      	bls.n	8007118 <__ssputs_r+0x86>
 8007116:	463e      	mov	r6, r7
 8007118:	6820      	ldr	r0, [r4, #0]
 800711a:	4632      	mov	r2, r6
 800711c:	4641      	mov	r1, r8
 800711e:	f000 fab5 	bl	800768c <memmove>
 8007122:	68a3      	ldr	r3, [r4, #8]
 8007124:	1b9b      	subs	r3, r3, r6
 8007126:	60a3      	str	r3, [r4, #8]
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	4433      	add	r3, r6
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	2000      	movs	r0, #0
 8007130:	e7db      	b.n	80070ea <__ssputs_r+0x58>
 8007132:	462a      	mov	r2, r5
 8007134:	f000 fba4 	bl	8007880 <_realloc_r>
 8007138:	4606      	mov	r6, r0
 800713a:	2800      	cmp	r0, #0
 800713c:	d1e1      	bne.n	8007102 <__ssputs_r+0x70>
 800713e:	6921      	ldr	r1, [r4, #16]
 8007140:	4650      	mov	r0, sl
 8007142:	f000 fabd 	bl	80076c0 <_free_r>
 8007146:	e7c7      	b.n	80070d8 <__ssputs_r+0x46>

08007148 <_svfiprintf_r>:
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	4698      	mov	r8, r3
 800714e:	898b      	ldrh	r3, [r1, #12]
 8007150:	061b      	lsls	r3, r3, #24
 8007152:	b09d      	sub	sp, #116	; 0x74
 8007154:	4607      	mov	r7, r0
 8007156:	460d      	mov	r5, r1
 8007158:	4614      	mov	r4, r2
 800715a:	d50e      	bpl.n	800717a <_svfiprintf_r+0x32>
 800715c:	690b      	ldr	r3, [r1, #16]
 800715e:	b963      	cbnz	r3, 800717a <_svfiprintf_r+0x32>
 8007160:	2140      	movs	r1, #64	; 0x40
 8007162:	f000 fb19 	bl	8007798 <_malloc_r>
 8007166:	6028      	str	r0, [r5, #0]
 8007168:	6128      	str	r0, [r5, #16]
 800716a:	b920      	cbnz	r0, 8007176 <_svfiprintf_r+0x2e>
 800716c:	230c      	movs	r3, #12
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007174:	e0d1      	b.n	800731a <_svfiprintf_r+0x1d2>
 8007176:	2340      	movs	r3, #64	; 0x40
 8007178:	616b      	str	r3, [r5, #20]
 800717a:	2300      	movs	r3, #0
 800717c:	9309      	str	r3, [sp, #36]	; 0x24
 800717e:	2320      	movs	r3, #32
 8007180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007184:	f8cd 800c 	str.w	r8, [sp, #12]
 8007188:	2330      	movs	r3, #48	; 0x30
 800718a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007334 <_svfiprintf_r+0x1ec>
 800718e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007192:	f04f 0901 	mov.w	r9, #1
 8007196:	4623      	mov	r3, r4
 8007198:	469a      	mov	sl, r3
 800719a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800719e:	b10a      	cbz	r2, 80071a4 <_svfiprintf_r+0x5c>
 80071a0:	2a25      	cmp	r2, #37	; 0x25
 80071a2:	d1f9      	bne.n	8007198 <_svfiprintf_r+0x50>
 80071a4:	ebba 0b04 	subs.w	fp, sl, r4
 80071a8:	d00b      	beq.n	80071c2 <_svfiprintf_r+0x7a>
 80071aa:	465b      	mov	r3, fp
 80071ac:	4622      	mov	r2, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	4638      	mov	r0, r7
 80071b2:	f7ff ff6e 	bl	8007092 <__ssputs_r>
 80071b6:	3001      	adds	r0, #1
 80071b8:	f000 80aa 	beq.w	8007310 <_svfiprintf_r+0x1c8>
 80071bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071be:	445a      	add	r2, fp
 80071c0:	9209      	str	r2, [sp, #36]	; 0x24
 80071c2:	f89a 3000 	ldrb.w	r3, [sl]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 80a2 	beq.w	8007310 <_svfiprintf_r+0x1c8>
 80071cc:	2300      	movs	r3, #0
 80071ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071d6:	f10a 0a01 	add.w	sl, sl, #1
 80071da:	9304      	str	r3, [sp, #16]
 80071dc:	9307      	str	r3, [sp, #28]
 80071de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071e2:	931a      	str	r3, [sp, #104]	; 0x68
 80071e4:	4654      	mov	r4, sl
 80071e6:	2205      	movs	r2, #5
 80071e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ec:	4851      	ldr	r0, [pc, #324]	; (8007334 <_svfiprintf_r+0x1ec>)
 80071ee:	f7f9 f81f 	bl	8000230 <memchr>
 80071f2:	9a04      	ldr	r2, [sp, #16]
 80071f4:	b9d8      	cbnz	r0, 800722e <_svfiprintf_r+0xe6>
 80071f6:	06d0      	lsls	r0, r2, #27
 80071f8:	bf44      	itt	mi
 80071fa:	2320      	movmi	r3, #32
 80071fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007200:	0711      	lsls	r1, r2, #28
 8007202:	bf44      	itt	mi
 8007204:	232b      	movmi	r3, #43	; 0x2b
 8007206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800720a:	f89a 3000 	ldrb.w	r3, [sl]
 800720e:	2b2a      	cmp	r3, #42	; 0x2a
 8007210:	d015      	beq.n	800723e <_svfiprintf_r+0xf6>
 8007212:	9a07      	ldr	r2, [sp, #28]
 8007214:	4654      	mov	r4, sl
 8007216:	2000      	movs	r0, #0
 8007218:	f04f 0c0a 	mov.w	ip, #10
 800721c:	4621      	mov	r1, r4
 800721e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007222:	3b30      	subs	r3, #48	; 0x30
 8007224:	2b09      	cmp	r3, #9
 8007226:	d94e      	bls.n	80072c6 <_svfiprintf_r+0x17e>
 8007228:	b1b0      	cbz	r0, 8007258 <_svfiprintf_r+0x110>
 800722a:	9207      	str	r2, [sp, #28]
 800722c:	e014      	b.n	8007258 <_svfiprintf_r+0x110>
 800722e:	eba0 0308 	sub.w	r3, r0, r8
 8007232:	fa09 f303 	lsl.w	r3, r9, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	46a2      	mov	sl, r4
 800723c:	e7d2      	b.n	80071e4 <_svfiprintf_r+0x9c>
 800723e:	9b03      	ldr	r3, [sp, #12]
 8007240:	1d19      	adds	r1, r3, #4
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	9103      	str	r1, [sp, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	bfbb      	ittet	lt
 800724a:	425b      	neglt	r3, r3
 800724c:	f042 0202 	orrlt.w	r2, r2, #2
 8007250:	9307      	strge	r3, [sp, #28]
 8007252:	9307      	strlt	r3, [sp, #28]
 8007254:	bfb8      	it	lt
 8007256:	9204      	strlt	r2, [sp, #16]
 8007258:	7823      	ldrb	r3, [r4, #0]
 800725a:	2b2e      	cmp	r3, #46	; 0x2e
 800725c:	d10c      	bne.n	8007278 <_svfiprintf_r+0x130>
 800725e:	7863      	ldrb	r3, [r4, #1]
 8007260:	2b2a      	cmp	r3, #42	; 0x2a
 8007262:	d135      	bne.n	80072d0 <_svfiprintf_r+0x188>
 8007264:	9b03      	ldr	r3, [sp, #12]
 8007266:	1d1a      	adds	r2, r3, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	9203      	str	r2, [sp, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	bfb8      	it	lt
 8007270:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007274:	3402      	adds	r4, #2
 8007276:	9305      	str	r3, [sp, #20]
 8007278:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007344 <_svfiprintf_r+0x1fc>
 800727c:	7821      	ldrb	r1, [r4, #0]
 800727e:	2203      	movs	r2, #3
 8007280:	4650      	mov	r0, sl
 8007282:	f7f8 ffd5 	bl	8000230 <memchr>
 8007286:	b140      	cbz	r0, 800729a <_svfiprintf_r+0x152>
 8007288:	2340      	movs	r3, #64	; 0x40
 800728a:	eba0 000a 	sub.w	r0, r0, sl
 800728e:	fa03 f000 	lsl.w	r0, r3, r0
 8007292:	9b04      	ldr	r3, [sp, #16]
 8007294:	4303      	orrs	r3, r0
 8007296:	3401      	adds	r4, #1
 8007298:	9304      	str	r3, [sp, #16]
 800729a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800729e:	4826      	ldr	r0, [pc, #152]	; (8007338 <_svfiprintf_r+0x1f0>)
 80072a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072a4:	2206      	movs	r2, #6
 80072a6:	f7f8 ffc3 	bl	8000230 <memchr>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d038      	beq.n	8007320 <_svfiprintf_r+0x1d8>
 80072ae:	4b23      	ldr	r3, [pc, #140]	; (800733c <_svfiprintf_r+0x1f4>)
 80072b0:	bb1b      	cbnz	r3, 80072fa <_svfiprintf_r+0x1b2>
 80072b2:	9b03      	ldr	r3, [sp, #12]
 80072b4:	3307      	adds	r3, #7
 80072b6:	f023 0307 	bic.w	r3, r3, #7
 80072ba:	3308      	adds	r3, #8
 80072bc:	9303      	str	r3, [sp, #12]
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	4433      	add	r3, r6
 80072c2:	9309      	str	r3, [sp, #36]	; 0x24
 80072c4:	e767      	b.n	8007196 <_svfiprintf_r+0x4e>
 80072c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ca:	460c      	mov	r4, r1
 80072cc:	2001      	movs	r0, #1
 80072ce:	e7a5      	b.n	800721c <_svfiprintf_r+0xd4>
 80072d0:	2300      	movs	r3, #0
 80072d2:	3401      	adds	r4, #1
 80072d4:	9305      	str	r3, [sp, #20]
 80072d6:	4619      	mov	r1, r3
 80072d8:	f04f 0c0a 	mov.w	ip, #10
 80072dc:	4620      	mov	r0, r4
 80072de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e2:	3a30      	subs	r2, #48	; 0x30
 80072e4:	2a09      	cmp	r2, #9
 80072e6:	d903      	bls.n	80072f0 <_svfiprintf_r+0x1a8>
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0c5      	beq.n	8007278 <_svfiprintf_r+0x130>
 80072ec:	9105      	str	r1, [sp, #20]
 80072ee:	e7c3      	b.n	8007278 <_svfiprintf_r+0x130>
 80072f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80072f4:	4604      	mov	r4, r0
 80072f6:	2301      	movs	r3, #1
 80072f8:	e7f0      	b.n	80072dc <_svfiprintf_r+0x194>
 80072fa:	ab03      	add	r3, sp, #12
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	462a      	mov	r2, r5
 8007300:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <_svfiprintf_r+0x1f8>)
 8007302:	a904      	add	r1, sp, #16
 8007304:	4638      	mov	r0, r7
 8007306:	f3af 8000 	nop.w
 800730a:	1c42      	adds	r2, r0, #1
 800730c:	4606      	mov	r6, r0
 800730e:	d1d6      	bne.n	80072be <_svfiprintf_r+0x176>
 8007310:	89ab      	ldrh	r3, [r5, #12]
 8007312:	065b      	lsls	r3, r3, #25
 8007314:	f53f af2c 	bmi.w	8007170 <_svfiprintf_r+0x28>
 8007318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800731a:	b01d      	add	sp, #116	; 0x74
 800731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007320:	ab03      	add	r3, sp, #12
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	462a      	mov	r2, r5
 8007326:	4b06      	ldr	r3, [pc, #24]	; (8007340 <_svfiprintf_r+0x1f8>)
 8007328:	a904      	add	r1, sp, #16
 800732a:	4638      	mov	r0, r7
 800732c:	f000 f87a 	bl	8007424 <_printf_i>
 8007330:	e7eb      	b.n	800730a <_svfiprintf_r+0x1c2>
 8007332:	bf00      	nop
 8007334:	080079a0 	.word	0x080079a0
 8007338:	080079aa 	.word	0x080079aa
 800733c:	00000000 	.word	0x00000000
 8007340:	08007093 	.word	0x08007093
 8007344:	080079a6 	.word	0x080079a6

08007348 <_printf_common>:
 8007348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800734c:	4616      	mov	r6, r2
 800734e:	4699      	mov	r9, r3
 8007350:	688a      	ldr	r2, [r1, #8]
 8007352:	690b      	ldr	r3, [r1, #16]
 8007354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007358:	4293      	cmp	r3, r2
 800735a:	bfb8      	it	lt
 800735c:	4613      	movlt	r3, r2
 800735e:	6033      	str	r3, [r6, #0]
 8007360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007364:	4607      	mov	r7, r0
 8007366:	460c      	mov	r4, r1
 8007368:	b10a      	cbz	r2, 800736e <_printf_common+0x26>
 800736a:	3301      	adds	r3, #1
 800736c:	6033      	str	r3, [r6, #0]
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	0699      	lsls	r1, r3, #26
 8007372:	bf42      	ittt	mi
 8007374:	6833      	ldrmi	r3, [r6, #0]
 8007376:	3302      	addmi	r3, #2
 8007378:	6033      	strmi	r3, [r6, #0]
 800737a:	6825      	ldr	r5, [r4, #0]
 800737c:	f015 0506 	ands.w	r5, r5, #6
 8007380:	d106      	bne.n	8007390 <_printf_common+0x48>
 8007382:	f104 0a19 	add.w	sl, r4, #25
 8007386:	68e3      	ldr	r3, [r4, #12]
 8007388:	6832      	ldr	r2, [r6, #0]
 800738a:	1a9b      	subs	r3, r3, r2
 800738c:	42ab      	cmp	r3, r5
 800738e:	dc26      	bgt.n	80073de <_printf_common+0x96>
 8007390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007394:	1e13      	subs	r3, r2, #0
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	bf18      	it	ne
 800739a:	2301      	movne	r3, #1
 800739c:	0692      	lsls	r2, r2, #26
 800739e:	d42b      	bmi.n	80073f8 <_printf_common+0xb0>
 80073a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073a4:	4649      	mov	r1, r9
 80073a6:	4638      	mov	r0, r7
 80073a8:	47c0      	blx	r8
 80073aa:	3001      	adds	r0, #1
 80073ac:	d01e      	beq.n	80073ec <_printf_common+0xa4>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	68e5      	ldr	r5, [r4, #12]
 80073b2:	6832      	ldr	r2, [r6, #0]
 80073b4:	f003 0306 	and.w	r3, r3, #6
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	bf08      	it	eq
 80073bc:	1aad      	subeq	r5, r5, r2
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	6922      	ldr	r2, [r4, #16]
 80073c2:	bf0c      	ite	eq
 80073c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073c8:	2500      	movne	r5, #0
 80073ca:	4293      	cmp	r3, r2
 80073cc:	bfc4      	itt	gt
 80073ce:	1a9b      	subgt	r3, r3, r2
 80073d0:	18ed      	addgt	r5, r5, r3
 80073d2:	2600      	movs	r6, #0
 80073d4:	341a      	adds	r4, #26
 80073d6:	42b5      	cmp	r5, r6
 80073d8:	d11a      	bne.n	8007410 <_printf_common+0xc8>
 80073da:	2000      	movs	r0, #0
 80073dc:	e008      	b.n	80073f0 <_printf_common+0xa8>
 80073de:	2301      	movs	r3, #1
 80073e0:	4652      	mov	r2, sl
 80073e2:	4649      	mov	r1, r9
 80073e4:	4638      	mov	r0, r7
 80073e6:	47c0      	blx	r8
 80073e8:	3001      	adds	r0, #1
 80073ea:	d103      	bne.n	80073f4 <_printf_common+0xac>
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f4:	3501      	adds	r5, #1
 80073f6:	e7c6      	b.n	8007386 <_printf_common+0x3e>
 80073f8:	18e1      	adds	r1, r4, r3
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	2030      	movs	r0, #48	; 0x30
 80073fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007402:	4422      	add	r2, r4
 8007404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800740c:	3302      	adds	r3, #2
 800740e:	e7c7      	b.n	80073a0 <_printf_common+0x58>
 8007410:	2301      	movs	r3, #1
 8007412:	4622      	mov	r2, r4
 8007414:	4649      	mov	r1, r9
 8007416:	4638      	mov	r0, r7
 8007418:	47c0      	blx	r8
 800741a:	3001      	adds	r0, #1
 800741c:	d0e6      	beq.n	80073ec <_printf_common+0xa4>
 800741e:	3601      	adds	r6, #1
 8007420:	e7d9      	b.n	80073d6 <_printf_common+0x8e>
	...

08007424 <_printf_i>:
 8007424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	7e0f      	ldrb	r7, [r1, #24]
 800742a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800742c:	2f78      	cmp	r7, #120	; 0x78
 800742e:	4691      	mov	r9, r2
 8007430:	4680      	mov	r8, r0
 8007432:	460c      	mov	r4, r1
 8007434:	469a      	mov	sl, r3
 8007436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800743a:	d807      	bhi.n	800744c <_printf_i+0x28>
 800743c:	2f62      	cmp	r7, #98	; 0x62
 800743e:	d80a      	bhi.n	8007456 <_printf_i+0x32>
 8007440:	2f00      	cmp	r7, #0
 8007442:	f000 80d8 	beq.w	80075f6 <_printf_i+0x1d2>
 8007446:	2f58      	cmp	r7, #88	; 0x58
 8007448:	f000 80a3 	beq.w	8007592 <_printf_i+0x16e>
 800744c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007454:	e03a      	b.n	80074cc <_printf_i+0xa8>
 8007456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800745a:	2b15      	cmp	r3, #21
 800745c:	d8f6      	bhi.n	800744c <_printf_i+0x28>
 800745e:	a101      	add	r1, pc, #4	; (adr r1, 8007464 <_printf_i+0x40>)
 8007460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007464:	080074bd 	.word	0x080074bd
 8007468:	080074d1 	.word	0x080074d1
 800746c:	0800744d 	.word	0x0800744d
 8007470:	0800744d 	.word	0x0800744d
 8007474:	0800744d 	.word	0x0800744d
 8007478:	0800744d 	.word	0x0800744d
 800747c:	080074d1 	.word	0x080074d1
 8007480:	0800744d 	.word	0x0800744d
 8007484:	0800744d 	.word	0x0800744d
 8007488:	0800744d 	.word	0x0800744d
 800748c:	0800744d 	.word	0x0800744d
 8007490:	080075dd 	.word	0x080075dd
 8007494:	08007501 	.word	0x08007501
 8007498:	080075bf 	.word	0x080075bf
 800749c:	0800744d 	.word	0x0800744d
 80074a0:	0800744d 	.word	0x0800744d
 80074a4:	080075ff 	.word	0x080075ff
 80074a8:	0800744d 	.word	0x0800744d
 80074ac:	08007501 	.word	0x08007501
 80074b0:	0800744d 	.word	0x0800744d
 80074b4:	0800744d 	.word	0x0800744d
 80074b8:	080075c7 	.word	0x080075c7
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	602a      	str	r2, [r5, #0]
 80074c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074cc:	2301      	movs	r3, #1
 80074ce:	e0a3      	b.n	8007618 <_printf_i+0x1f4>
 80074d0:	6820      	ldr	r0, [r4, #0]
 80074d2:	6829      	ldr	r1, [r5, #0]
 80074d4:	0606      	lsls	r6, r0, #24
 80074d6:	f101 0304 	add.w	r3, r1, #4
 80074da:	d50a      	bpl.n	80074f2 <_printf_i+0xce>
 80074dc:	680e      	ldr	r6, [r1, #0]
 80074de:	602b      	str	r3, [r5, #0]
 80074e0:	2e00      	cmp	r6, #0
 80074e2:	da03      	bge.n	80074ec <_printf_i+0xc8>
 80074e4:	232d      	movs	r3, #45	; 0x2d
 80074e6:	4276      	negs	r6, r6
 80074e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ec:	485e      	ldr	r0, [pc, #376]	; (8007668 <_printf_i+0x244>)
 80074ee:	230a      	movs	r3, #10
 80074f0:	e019      	b.n	8007526 <_printf_i+0x102>
 80074f2:	680e      	ldr	r6, [r1, #0]
 80074f4:	602b      	str	r3, [r5, #0]
 80074f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074fa:	bf18      	it	ne
 80074fc:	b236      	sxthne	r6, r6
 80074fe:	e7ef      	b.n	80074e0 <_printf_i+0xbc>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	6820      	ldr	r0, [r4, #0]
 8007504:	1d19      	adds	r1, r3, #4
 8007506:	6029      	str	r1, [r5, #0]
 8007508:	0601      	lsls	r1, r0, #24
 800750a:	d501      	bpl.n	8007510 <_printf_i+0xec>
 800750c:	681e      	ldr	r6, [r3, #0]
 800750e:	e002      	b.n	8007516 <_printf_i+0xf2>
 8007510:	0646      	lsls	r6, r0, #25
 8007512:	d5fb      	bpl.n	800750c <_printf_i+0xe8>
 8007514:	881e      	ldrh	r6, [r3, #0]
 8007516:	4854      	ldr	r0, [pc, #336]	; (8007668 <_printf_i+0x244>)
 8007518:	2f6f      	cmp	r7, #111	; 0x6f
 800751a:	bf0c      	ite	eq
 800751c:	2308      	moveq	r3, #8
 800751e:	230a      	movne	r3, #10
 8007520:	2100      	movs	r1, #0
 8007522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007526:	6865      	ldr	r5, [r4, #4]
 8007528:	60a5      	str	r5, [r4, #8]
 800752a:	2d00      	cmp	r5, #0
 800752c:	bfa2      	ittt	ge
 800752e:	6821      	ldrge	r1, [r4, #0]
 8007530:	f021 0104 	bicge.w	r1, r1, #4
 8007534:	6021      	strge	r1, [r4, #0]
 8007536:	b90e      	cbnz	r6, 800753c <_printf_i+0x118>
 8007538:	2d00      	cmp	r5, #0
 800753a:	d04d      	beq.n	80075d8 <_printf_i+0x1b4>
 800753c:	4615      	mov	r5, r2
 800753e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007542:	fb03 6711 	mls	r7, r3, r1, r6
 8007546:	5dc7      	ldrb	r7, [r0, r7]
 8007548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800754c:	4637      	mov	r7, r6
 800754e:	42bb      	cmp	r3, r7
 8007550:	460e      	mov	r6, r1
 8007552:	d9f4      	bls.n	800753e <_printf_i+0x11a>
 8007554:	2b08      	cmp	r3, #8
 8007556:	d10b      	bne.n	8007570 <_printf_i+0x14c>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	07de      	lsls	r6, r3, #31
 800755c:	d508      	bpl.n	8007570 <_printf_i+0x14c>
 800755e:	6923      	ldr	r3, [r4, #16]
 8007560:	6861      	ldr	r1, [r4, #4]
 8007562:	4299      	cmp	r1, r3
 8007564:	bfde      	ittt	le
 8007566:	2330      	movle	r3, #48	; 0x30
 8007568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800756c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007570:	1b52      	subs	r2, r2, r5
 8007572:	6122      	str	r2, [r4, #16]
 8007574:	f8cd a000 	str.w	sl, [sp]
 8007578:	464b      	mov	r3, r9
 800757a:	aa03      	add	r2, sp, #12
 800757c:	4621      	mov	r1, r4
 800757e:	4640      	mov	r0, r8
 8007580:	f7ff fee2 	bl	8007348 <_printf_common>
 8007584:	3001      	adds	r0, #1
 8007586:	d14c      	bne.n	8007622 <_printf_i+0x1fe>
 8007588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800758c:	b004      	add	sp, #16
 800758e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007592:	4835      	ldr	r0, [pc, #212]	; (8007668 <_printf_i+0x244>)
 8007594:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007598:	6829      	ldr	r1, [r5, #0]
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	f851 6b04 	ldr.w	r6, [r1], #4
 80075a0:	6029      	str	r1, [r5, #0]
 80075a2:	061d      	lsls	r5, r3, #24
 80075a4:	d514      	bpl.n	80075d0 <_printf_i+0x1ac>
 80075a6:	07df      	lsls	r7, r3, #31
 80075a8:	bf44      	itt	mi
 80075aa:	f043 0320 	orrmi.w	r3, r3, #32
 80075ae:	6023      	strmi	r3, [r4, #0]
 80075b0:	b91e      	cbnz	r6, 80075ba <_printf_i+0x196>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	f023 0320 	bic.w	r3, r3, #32
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	2310      	movs	r3, #16
 80075bc:	e7b0      	b.n	8007520 <_printf_i+0xfc>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f043 0320 	orr.w	r3, r3, #32
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	2378      	movs	r3, #120	; 0x78
 80075c8:	4828      	ldr	r0, [pc, #160]	; (800766c <_printf_i+0x248>)
 80075ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075ce:	e7e3      	b.n	8007598 <_printf_i+0x174>
 80075d0:	0659      	lsls	r1, r3, #25
 80075d2:	bf48      	it	mi
 80075d4:	b2b6      	uxthmi	r6, r6
 80075d6:	e7e6      	b.n	80075a6 <_printf_i+0x182>
 80075d8:	4615      	mov	r5, r2
 80075da:	e7bb      	b.n	8007554 <_printf_i+0x130>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	6826      	ldr	r6, [r4, #0]
 80075e0:	6961      	ldr	r1, [r4, #20]
 80075e2:	1d18      	adds	r0, r3, #4
 80075e4:	6028      	str	r0, [r5, #0]
 80075e6:	0635      	lsls	r5, r6, #24
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	d501      	bpl.n	80075f0 <_printf_i+0x1cc>
 80075ec:	6019      	str	r1, [r3, #0]
 80075ee:	e002      	b.n	80075f6 <_printf_i+0x1d2>
 80075f0:	0670      	lsls	r0, r6, #25
 80075f2:	d5fb      	bpl.n	80075ec <_printf_i+0x1c8>
 80075f4:	8019      	strh	r1, [r3, #0]
 80075f6:	2300      	movs	r3, #0
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	4615      	mov	r5, r2
 80075fc:	e7ba      	b.n	8007574 <_printf_i+0x150>
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	1d1a      	adds	r2, r3, #4
 8007602:	602a      	str	r2, [r5, #0]
 8007604:	681d      	ldr	r5, [r3, #0]
 8007606:	6862      	ldr	r2, [r4, #4]
 8007608:	2100      	movs	r1, #0
 800760a:	4628      	mov	r0, r5
 800760c:	f7f8 fe10 	bl	8000230 <memchr>
 8007610:	b108      	cbz	r0, 8007616 <_printf_i+0x1f2>
 8007612:	1b40      	subs	r0, r0, r5
 8007614:	6060      	str	r0, [r4, #4]
 8007616:	6863      	ldr	r3, [r4, #4]
 8007618:	6123      	str	r3, [r4, #16]
 800761a:	2300      	movs	r3, #0
 800761c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007620:	e7a8      	b.n	8007574 <_printf_i+0x150>
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	462a      	mov	r2, r5
 8007626:	4649      	mov	r1, r9
 8007628:	4640      	mov	r0, r8
 800762a:	47d0      	blx	sl
 800762c:	3001      	adds	r0, #1
 800762e:	d0ab      	beq.n	8007588 <_printf_i+0x164>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	079b      	lsls	r3, r3, #30
 8007634:	d413      	bmi.n	800765e <_printf_i+0x23a>
 8007636:	68e0      	ldr	r0, [r4, #12]
 8007638:	9b03      	ldr	r3, [sp, #12]
 800763a:	4298      	cmp	r0, r3
 800763c:	bfb8      	it	lt
 800763e:	4618      	movlt	r0, r3
 8007640:	e7a4      	b.n	800758c <_printf_i+0x168>
 8007642:	2301      	movs	r3, #1
 8007644:	4632      	mov	r2, r6
 8007646:	4649      	mov	r1, r9
 8007648:	4640      	mov	r0, r8
 800764a:	47d0      	blx	sl
 800764c:	3001      	adds	r0, #1
 800764e:	d09b      	beq.n	8007588 <_printf_i+0x164>
 8007650:	3501      	adds	r5, #1
 8007652:	68e3      	ldr	r3, [r4, #12]
 8007654:	9903      	ldr	r1, [sp, #12]
 8007656:	1a5b      	subs	r3, r3, r1
 8007658:	42ab      	cmp	r3, r5
 800765a:	dcf2      	bgt.n	8007642 <_printf_i+0x21e>
 800765c:	e7eb      	b.n	8007636 <_printf_i+0x212>
 800765e:	2500      	movs	r5, #0
 8007660:	f104 0619 	add.w	r6, r4, #25
 8007664:	e7f5      	b.n	8007652 <_printf_i+0x22e>
 8007666:	bf00      	nop
 8007668:	080079b1 	.word	0x080079b1
 800766c:	080079c2 	.word	0x080079c2

08007670 <memcpy>:
 8007670:	440a      	add	r2, r1
 8007672:	4291      	cmp	r1, r2
 8007674:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007678:	d100      	bne.n	800767c <memcpy+0xc>
 800767a:	4770      	bx	lr
 800767c:	b510      	push	{r4, lr}
 800767e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007686:	4291      	cmp	r1, r2
 8007688:	d1f9      	bne.n	800767e <memcpy+0xe>
 800768a:	bd10      	pop	{r4, pc}

0800768c <memmove>:
 800768c:	4288      	cmp	r0, r1
 800768e:	b510      	push	{r4, lr}
 8007690:	eb01 0402 	add.w	r4, r1, r2
 8007694:	d902      	bls.n	800769c <memmove+0x10>
 8007696:	4284      	cmp	r4, r0
 8007698:	4623      	mov	r3, r4
 800769a:	d807      	bhi.n	80076ac <memmove+0x20>
 800769c:	1e43      	subs	r3, r0, #1
 800769e:	42a1      	cmp	r1, r4
 80076a0:	d008      	beq.n	80076b4 <memmove+0x28>
 80076a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076aa:	e7f8      	b.n	800769e <memmove+0x12>
 80076ac:	4402      	add	r2, r0
 80076ae:	4601      	mov	r1, r0
 80076b0:	428a      	cmp	r2, r1
 80076b2:	d100      	bne.n	80076b6 <memmove+0x2a>
 80076b4:	bd10      	pop	{r4, pc}
 80076b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076be:	e7f7      	b.n	80076b0 <memmove+0x24>

080076c0 <_free_r>:
 80076c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076c2:	2900      	cmp	r1, #0
 80076c4:	d044      	beq.n	8007750 <_free_r+0x90>
 80076c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ca:	9001      	str	r0, [sp, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f1a1 0404 	sub.w	r4, r1, #4
 80076d2:	bfb8      	it	lt
 80076d4:	18e4      	addlt	r4, r4, r3
 80076d6:	f000 f913 	bl	8007900 <__malloc_lock>
 80076da:	4a1e      	ldr	r2, [pc, #120]	; (8007754 <_free_r+0x94>)
 80076dc:	9801      	ldr	r0, [sp, #4]
 80076de:	6813      	ldr	r3, [r2, #0]
 80076e0:	b933      	cbnz	r3, 80076f0 <_free_r+0x30>
 80076e2:	6063      	str	r3, [r4, #4]
 80076e4:	6014      	str	r4, [r2, #0]
 80076e6:	b003      	add	sp, #12
 80076e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076ec:	f000 b90e 	b.w	800790c <__malloc_unlock>
 80076f0:	42a3      	cmp	r3, r4
 80076f2:	d908      	bls.n	8007706 <_free_r+0x46>
 80076f4:	6825      	ldr	r5, [r4, #0]
 80076f6:	1961      	adds	r1, r4, r5
 80076f8:	428b      	cmp	r3, r1
 80076fa:	bf01      	itttt	eq
 80076fc:	6819      	ldreq	r1, [r3, #0]
 80076fe:	685b      	ldreq	r3, [r3, #4]
 8007700:	1949      	addeq	r1, r1, r5
 8007702:	6021      	streq	r1, [r4, #0]
 8007704:	e7ed      	b.n	80076e2 <_free_r+0x22>
 8007706:	461a      	mov	r2, r3
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	b10b      	cbz	r3, 8007710 <_free_r+0x50>
 800770c:	42a3      	cmp	r3, r4
 800770e:	d9fa      	bls.n	8007706 <_free_r+0x46>
 8007710:	6811      	ldr	r1, [r2, #0]
 8007712:	1855      	adds	r5, r2, r1
 8007714:	42a5      	cmp	r5, r4
 8007716:	d10b      	bne.n	8007730 <_free_r+0x70>
 8007718:	6824      	ldr	r4, [r4, #0]
 800771a:	4421      	add	r1, r4
 800771c:	1854      	adds	r4, r2, r1
 800771e:	42a3      	cmp	r3, r4
 8007720:	6011      	str	r1, [r2, #0]
 8007722:	d1e0      	bne.n	80076e6 <_free_r+0x26>
 8007724:	681c      	ldr	r4, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	6053      	str	r3, [r2, #4]
 800772a:	4421      	add	r1, r4
 800772c:	6011      	str	r1, [r2, #0]
 800772e:	e7da      	b.n	80076e6 <_free_r+0x26>
 8007730:	d902      	bls.n	8007738 <_free_r+0x78>
 8007732:	230c      	movs	r3, #12
 8007734:	6003      	str	r3, [r0, #0]
 8007736:	e7d6      	b.n	80076e6 <_free_r+0x26>
 8007738:	6825      	ldr	r5, [r4, #0]
 800773a:	1961      	adds	r1, r4, r5
 800773c:	428b      	cmp	r3, r1
 800773e:	bf04      	itt	eq
 8007740:	6819      	ldreq	r1, [r3, #0]
 8007742:	685b      	ldreq	r3, [r3, #4]
 8007744:	6063      	str	r3, [r4, #4]
 8007746:	bf04      	itt	eq
 8007748:	1949      	addeq	r1, r1, r5
 800774a:	6021      	streq	r1, [r4, #0]
 800774c:	6054      	str	r4, [r2, #4]
 800774e:	e7ca      	b.n	80076e6 <_free_r+0x26>
 8007750:	b003      	add	sp, #12
 8007752:	bd30      	pop	{r4, r5, pc}
 8007754:	20000240 	.word	0x20000240

08007758 <sbrk_aligned>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	4e0e      	ldr	r6, [pc, #56]	; (8007794 <sbrk_aligned+0x3c>)
 800775c:	460c      	mov	r4, r1
 800775e:	6831      	ldr	r1, [r6, #0]
 8007760:	4605      	mov	r5, r0
 8007762:	b911      	cbnz	r1, 800776a <sbrk_aligned+0x12>
 8007764:	f000 f8bc 	bl	80078e0 <_sbrk_r>
 8007768:	6030      	str	r0, [r6, #0]
 800776a:	4621      	mov	r1, r4
 800776c:	4628      	mov	r0, r5
 800776e:	f000 f8b7 	bl	80078e0 <_sbrk_r>
 8007772:	1c43      	adds	r3, r0, #1
 8007774:	d00a      	beq.n	800778c <sbrk_aligned+0x34>
 8007776:	1cc4      	adds	r4, r0, #3
 8007778:	f024 0403 	bic.w	r4, r4, #3
 800777c:	42a0      	cmp	r0, r4
 800777e:	d007      	beq.n	8007790 <sbrk_aligned+0x38>
 8007780:	1a21      	subs	r1, r4, r0
 8007782:	4628      	mov	r0, r5
 8007784:	f000 f8ac 	bl	80078e0 <_sbrk_r>
 8007788:	3001      	adds	r0, #1
 800778a:	d101      	bne.n	8007790 <sbrk_aligned+0x38>
 800778c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007790:	4620      	mov	r0, r4
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	20000244 	.word	0x20000244

08007798 <_malloc_r>:
 8007798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800779c:	1ccd      	adds	r5, r1, #3
 800779e:	f025 0503 	bic.w	r5, r5, #3
 80077a2:	3508      	adds	r5, #8
 80077a4:	2d0c      	cmp	r5, #12
 80077a6:	bf38      	it	cc
 80077a8:	250c      	movcc	r5, #12
 80077aa:	2d00      	cmp	r5, #0
 80077ac:	4607      	mov	r7, r0
 80077ae:	db01      	blt.n	80077b4 <_malloc_r+0x1c>
 80077b0:	42a9      	cmp	r1, r5
 80077b2:	d905      	bls.n	80077c0 <_malloc_r+0x28>
 80077b4:	230c      	movs	r3, #12
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	2600      	movs	r6, #0
 80077ba:	4630      	mov	r0, r6
 80077bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c0:	4e2e      	ldr	r6, [pc, #184]	; (800787c <_malloc_r+0xe4>)
 80077c2:	f000 f89d 	bl	8007900 <__malloc_lock>
 80077c6:	6833      	ldr	r3, [r6, #0]
 80077c8:	461c      	mov	r4, r3
 80077ca:	bb34      	cbnz	r4, 800781a <_malloc_r+0x82>
 80077cc:	4629      	mov	r1, r5
 80077ce:	4638      	mov	r0, r7
 80077d0:	f7ff ffc2 	bl	8007758 <sbrk_aligned>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	4604      	mov	r4, r0
 80077d8:	d14d      	bne.n	8007876 <_malloc_r+0xde>
 80077da:	6834      	ldr	r4, [r6, #0]
 80077dc:	4626      	mov	r6, r4
 80077de:	2e00      	cmp	r6, #0
 80077e0:	d140      	bne.n	8007864 <_malloc_r+0xcc>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	4631      	mov	r1, r6
 80077e6:	4638      	mov	r0, r7
 80077e8:	eb04 0803 	add.w	r8, r4, r3
 80077ec:	f000 f878 	bl	80078e0 <_sbrk_r>
 80077f0:	4580      	cmp	r8, r0
 80077f2:	d13a      	bne.n	800786a <_malloc_r+0xd2>
 80077f4:	6821      	ldr	r1, [r4, #0]
 80077f6:	3503      	adds	r5, #3
 80077f8:	1a6d      	subs	r5, r5, r1
 80077fa:	f025 0503 	bic.w	r5, r5, #3
 80077fe:	3508      	adds	r5, #8
 8007800:	2d0c      	cmp	r5, #12
 8007802:	bf38      	it	cc
 8007804:	250c      	movcc	r5, #12
 8007806:	4629      	mov	r1, r5
 8007808:	4638      	mov	r0, r7
 800780a:	f7ff ffa5 	bl	8007758 <sbrk_aligned>
 800780e:	3001      	adds	r0, #1
 8007810:	d02b      	beq.n	800786a <_malloc_r+0xd2>
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	442b      	add	r3, r5
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	e00e      	b.n	8007838 <_malloc_r+0xa0>
 800781a:	6822      	ldr	r2, [r4, #0]
 800781c:	1b52      	subs	r2, r2, r5
 800781e:	d41e      	bmi.n	800785e <_malloc_r+0xc6>
 8007820:	2a0b      	cmp	r2, #11
 8007822:	d916      	bls.n	8007852 <_malloc_r+0xba>
 8007824:	1961      	adds	r1, r4, r5
 8007826:	42a3      	cmp	r3, r4
 8007828:	6025      	str	r5, [r4, #0]
 800782a:	bf18      	it	ne
 800782c:	6059      	strne	r1, [r3, #4]
 800782e:	6863      	ldr	r3, [r4, #4]
 8007830:	bf08      	it	eq
 8007832:	6031      	streq	r1, [r6, #0]
 8007834:	5162      	str	r2, [r4, r5]
 8007836:	604b      	str	r3, [r1, #4]
 8007838:	4638      	mov	r0, r7
 800783a:	f104 060b 	add.w	r6, r4, #11
 800783e:	f000 f865 	bl	800790c <__malloc_unlock>
 8007842:	f026 0607 	bic.w	r6, r6, #7
 8007846:	1d23      	adds	r3, r4, #4
 8007848:	1af2      	subs	r2, r6, r3
 800784a:	d0b6      	beq.n	80077ba <_malloc_r+0x22>
 800784c:	1b9b      	subs	r3, r3, r6
 800784e:	50a3      	str	r3, [r4, r2]
 8007850:	e7b3      	b.n	80077ba <_malloc_r+0x22>
 8007852:	6862      	ldr	r2, [r4, #4]
 8007854:	42a3      	cmp	r3, r4
 8007856:	bf0c      	ite	eq
 8007858:	6032      	streq	r2, [r6, #0]
 800785a:	605a      	strne	r2, [r3, #4]
 800785c:	e7ec      	b.n	8007838 <_malloc_r+0xa0>
 800785e:	4623      	mov	r3, r4
 8007860:	6864      	ldr	r4, [r4, #4]
 8007862:	e7b2      	b.n	80077ca <_malloc_r+0x32>
 8007864:	4634      	mov	r4, r6
 8007866:	6876      	ldr	r6, [r6, #4]
 8007868:	e7b9      	b.n	80077de <_malloc_r+0x46>
 800786a:	230c      	movs	r3, #12
 800786c:	603b      	str	r3, [r7, #0]
 800786e:	4638      	mov	r0, r7
 8007870:	f000 f84c 	bl	800790c <__malloc_unlock>
 8007874:	e7a1      	b.n	80077ba <_malloc_r+0x22>
 8007876:	6025      	str	r5, [r4, #0]
 8007878:	e7de      	b.n	8007838 <_malloc_r+0xa0>
 800787a:	bf00      	nop
 800787c:	20000240 	.word	0x20000240

08007880 <_realloc_r>:
 8007880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007884:	4680      	mov	r8, r0
 8007886:	4614      	mov	r4, r2
 8007888:	460e      	mov	r6, r1
 800788a:	b921      	cbnz	r1, 8007896 <_realloc_r+0x16>
 800788c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007890:	4611      	mov	r1, r2
 8007892:	f7ff bf81 	b.w	8007798 <_malloc_r>
 8007896:	b92a      	cbnz	r2, 80078a4 <_realloc_r+0x24>
 8007898:	f7ff ff12 	bl	80076c0 <_free_r>
 800789c:	4625      	mov	r5, r4
 800789e:	4628      	mov	r0, r5
 80078a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a4:	f000 f838 	bl	8007918 <_malloc_usable_size_r>
 80078a8:	4284      	cmp	r4, r0
 80078aa:	4607      	mov	r7, r0
 80078ac:	d802      	bhi.n	80078b4 <_realloc_r+0x34>
 80078ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078b2:	d812      	bhi.n	80078da <_realloc_r+0x5a>
 80078b4:	4621      	mov	r1, r4
 80078b6:	4640      	mov	r0, r8
 80078b8:	f7ff ff6e 	bl	8007798 <_malloc_r>
 80078bc:	4605      	mov	r5, r0
 80078be:	2800      	cmp	r0, #0
 80078c0:	d0ed      	beq.n	800789e <_realloc_r+0x1e>
 80078c2:	42bc      	cmp	r4, r7
 80078c4:	4622      	mov	r2, r4
 80078c6:	4631      	mov	r1, r6
 80078c8:	bf28      	it	cs
 80078ca:	463a      	movcs	r2, r7
 80078cc:	f7ff fed0 	bl	8007670 <memcpy>
 80078d0:	4631      	mov	r1, r6
 80078d2:	4640      	mov	r0, r8
 80078d4:	f7ff fef4 	bl	80076c0 <_free_r>
 80078d8:	e7e1      	b.n	800789e <_realloc_r+0x1e>
 80078da:	4635      	mov	r5, r6
 80078dc:	e7df      	b.n	800789e <_realloc_r+0x1e>
	...

080078e0 <_sbrk_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d06      	ldr	r5, [pc, #24]	; (80078fc <_sbrk_r+0x1c>)
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7fa f960 	bl	8001bb0 <_sbrk>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_sbrk_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_sbrk_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	20000248 	.word	0x20000248

08007900 <__malloc_lock>:
 8007900:	4801      	ldr	r0, [pc, #4]	; (8007908 <__malloc_lock+0x8>)
 8007902:	f000 b811 	b.w	8007928 <__retarget_lock_acquire_recursive>
 8007906:	bf00      	nop
 8007908:	2000024c 	.word	0x2000024c

0800790c <__malloc_unlock>:
 800790c:	4801      	ldr	r0, [pc, #4]	; (8007914 <__malloc_unlock+0x8>)
 800790e:	f000 b80c 	b.w	800792a <__retarget_lock_release_recursive>
 8007912:	bf00      	nop
 8007914:	2000024c 	.word	0x2000024c

08007918 <_malloc_usable_size_r>:
 8007918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791c:	1f18      	subs	r0, r3, #4
 800791e:	2b00      	cmp	r3, #0
 8007920:	bfbc      	itt	lt
 8007922:	580b      	ldrlt	r3, [r1, r0]
 8007924:	18c0      	addlt	r0, r0, r3
 8007926:	4770      	bx	lr

08007928 <__retarget_lock_acquire_recursive>:
 8007928:	4770      	bx	lr

0800792a <__retarget_lock_release_recursive>:
 800792a:	4770      	bx	lr

0800792c <_init>:
 800792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792e:	bf00      	nop
 8007930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007932:	bc08      	pop	{r3}
 8007934:	469e      	mov	lr, r3
 8007936:	4770      	bx	lr

08007938 <_fini>:
 8007938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793a:	bf00      	nop
 800793c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793e:	bc08      	pop	{r3}
 8007940:	469e      	mov	lr, r3
 8007942:	4770      	bx	lr
