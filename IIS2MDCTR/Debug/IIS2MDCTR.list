
IIS2MDCTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080092d0  080092d0  000192d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009388  08009388  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009388  08009388  00019388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009390  08009390  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009394  08009394  00019394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000070  08009408  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08009408  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfc8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d51  00000000  00000000  0003c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0003edc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  00040690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002197a  00000000  00000000  00041e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c2da  00000000  00000000  000637c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e14af  00000000  00000000  0007fa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160f4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075e8  00000000  00000000  00160f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080092b4 	.word	0x080092b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080092b4 	.word	0x080092b4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	0000      	movs	r0, r0
	...

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b0b0      	sub	sp, #192	; 0xc0
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f001 f954 	bl	80021b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 fa7d 	bl	8001408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f000 fd07 	bl	8001920 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f12:	f000 fcb9 	bl	8001888 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f16:	f000 fbb9 	bl	800168c <MX_TIM1_Init>
  MX_SPI1_Init();
 8000f1a:	f000 fb79 	bl	8001610 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000f1e:	f000 fc65 	bl	80017ec <MX_TIM2_Init>
  MX_ADC1_Init();
 8000f22:	f000 fabd 	bl	80014a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f26:	f000 fb33 	bl	8001590 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	int pwm_val = 500;
 8000f2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  	uint32_t adc1_val;
  	double adc1_value;

  	int xMag = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  	int yMag = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  	int zMag = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  	double xMagRef = 0;
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  	double yMagRef = 0;
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  	double zMagRef = 0;
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

  	int BNOxAccel = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  	int BNOyAccel = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  	int BNOzAccel = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  	int BNOxMag = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  	int BNOyMag = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	67fb      	str	r3, [r7, #124]	; 0x7c
  	int BNOzMag = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	67bb      	str	r3, [r7, #120]	; 0x78
  	int BNOxGyro = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	677b      	str	r3, [r7, #116]	; 0x74
  	int BNOyGyro = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	673b      	str	r3, [r7, #112]	; 0x70
  	int BNOzGyro = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	66fb      	str	r3, [r7, #108]	; 0x6c
  	double BNOxAccelRef = 0;
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  	double BNOyAccelRef = 0;
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  	double BNOzAccelRef = 0;
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  	double BNOxMagRef = 0;
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  	double BNOyMagRef = 0;
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  	double BNOzMagRef = 0;
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  	double BNOxGyroRef = 0;
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  	double BNOyGyroRef = 0;
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  	double BNOzGyroRef = 0;
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	e9c7 2308 	strd	r2, r3, [r7, #32]

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001000:	2100      	movs	r1, #0
 8001002:	488d      	ldr	r0, [pc, #564]	; (8001238 <main+0x338>)
 8001004:	f004 fe7e 	bl	8005d04 <HAL_TIM_PWM_Start>
  	TIM1->CCR1 = 500;
 8001008:	4b8c      	ldr	r3, [pc, #560]	; (800123c <main+0x33c>)
 800100a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
  	HAL_TIM_Base_Start(&htim2);
 8001010:	488b      	ldr	r0, [pc, #556]	; (8001240 <main+0x340>)
 8001012:	f004 fdb3 	bl	8005b7c <HAL_TIM_Base_Start>

  	//BNO055_INIT();
  	IIS2_INIT();
 8001016:	f000 fdb9 	bl	8001b8c <IIS2_INIT>

  	double magCyclePeriod = 20;
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	4b89      	ldr	r3, [pc, #548]	; (8001244 <main+0x344>)
 8001020:	e9c7 2306 	strd	r2, r3, [r7, #24]
  	double currentTime = 0;
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  	double IPROPI_res_value = 50;
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	4b84      	ldr	r3, [pc, #528]	; (8001248 <main+0x348>)
 8001036:	e9c7 2302 	strd	r2, r3, [r7, #8]
  	double magCurrent = 0;
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	e9c7 2300 	strd	r2, r3, [r7]
  	double prevMagCurrent = 0;
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	f04f 0300 	mov.w	r3, #0
 800104e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
//	  UART_PRINT_VAL(BNOzGyroRef);
//	  UART_PRINT_TEXT(" )\n");
//	  HAL_Delay(100);

	  // magnetorquer driver
	  currentTime = ((double)(TIM2->CNT)) / 100000.0;
 8001052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa7b 	bl	8000554 <__aeabi_ui2d>
 800105e:	a374      	add	r3, pc, #464	; (adr r3, 8001230 <main+0x330>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fc1a 	bl	800089c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  if(currentTime < magCyclePeriod * 0.25){
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	4b75      	ldr	r3, [pc, #468]	; (800124c <main+0x34c>)
 8001076:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800107a:	f7ff fae5 	bl	8000648 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001086:	f7ff fd51 	bl	8000b2c <__aeabi_dcmplt>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d01a      	beq.n	80010c6 <main+0x1c6>
		  MAGNETORQUER_SET_PWM((int)(currentTime * (4000.0 / magCyclePeriod)), 1);
 8001090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001094:	f04f 0000 	mov.w	r0, #0
 8001098:	496d      	ldr	r1, [pc, #436]	; (8001250 <main+0x350>)
 800109a:	f7ff fbff 	bl	800089c <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010aa:	f7ff facd 	bl	8000648 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f7ff fd77 	bl	8000ba8 <__aeabi_d2iz>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2101      	movs	r1, #1
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fd42 	bl	8001b48 <MAGNETORQUER_SET_PWM>
 80010c4:	e0d0      	b.n	8001268 <main+0x368>
	  }
	  else if(currentTime < magCyclePeriod * 0.5){
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	4b62      	ldr	r3, [pc, #392]	; (8001254 <main+0x354>)
 80010cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010d0:	f7ff faba 	bl	8000648 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010dc:	f7ff fd26 	bl	8000b2c <__aeabi_dcmplt>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d030      	beq.n	8001148 <main+0x248>
		  MAGNETORQUER_SET_PWM((int)(1000.0 - (currentTime - (magCyclePeriod * 0.25)) * (4000.0 / magCyclePeriod)), 1);
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b58      	ldr	r3, [pc, #352]	; (800124c <main+0x34c>)
 80010ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010f0:	f7ff faaa 	bl	8000648 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010fc:	f7ff f8ec 	bl	80002d8 <__aeabi_dsub>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4614      	mov	r4, r2
 8001106:	461d      	mov	r5, r3
 8001108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800110c:	f04f 0000 	mov.w	r0, #0
 8001110:	494f      	ldr	r1, [pc, #316]	; (8001250 <main+0x350>)
 8001112:	f7ff fbc3 	bl	800089c <__aeabi_ddiv>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4620      	mov	r0, r4
 800111c:	4629      	mov	r1, r5
 800111e:	f7ff fa93 	bl	8000648 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	494b      	ldr	r1, [pc, #300]	; (8001258 <main+0x358>)
 800112c:	f7ff f8d4 	bl	80002d8 <__aeabi_dsub>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fd36 	bl	8000ba8 <__aeabi_d2iz>
 800113c:	4603      	mov	r3, r0
 800113e:	2101      	movs	r1, #1
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fd01 	bl	8001b48 <MAGNETORQUER_SET_PWM>
 8001146:	e08f      	b.n	8001268 <main+0x368>
	  }
	  else if(currentTime < magCyclePeriod * 0.75){
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b43      	ldr	r3, [pc, #268]	; (800125c <main+0x35c>)
 800114e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001152:	f7ff fa79 	bl	8000648 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800115e:	f7ff fce5 	bl	8000b2c <__aeabi_dcmplt>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d029      	beq.n	80011bc <main+0x2bc>
		  MAGNETORQUER_SET_PWM((int)((currentTime - (magCyclePeriod * 0.5)) * (4000.0 / magCyclePeriod)), 0);
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	4b39      	ldr	r3, [pc, #228]	; (8001254 <main+0x354>)
 800116e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001172:	f7ff fa69 	bl	8000648 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800117e:	f7ff f8ab 	bl	80002d8 <__aeabi_dsub>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4614      	mov	r4, r2
 8001188:	461d      	mov	r5, r3
 800118a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800118e:	f04f 0000 	mov.w	r0, #0
 8001192:	492f      	ldr	r1, [pc, #188]	; (8001250 <main+0x350>)
 8001194:	f7ff fb82 	bl	800089c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4620      	mov	r0, r4
 800119e:	4629      	mov	r1, r5
 80011a0:	f7ff fa52 	bl	8000648 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fcfc 	bl	8000ba8 <__aeabi_d2iz>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fcc7 	bl	8001b48 <MAGNETORQUER_SET_PWM>
 80011ba:	e055      	b.n	8001268 <main+0x368>
	  }
	  else if(currentTime < magCyclePeriod){
 80011bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011c4:	f7ff fcb2 	bl	8000b2c <__aeabi_dcmplt>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d048      	beq.n	8001260 <main+0x360>
		  MAGNETORQUER_SET_PWM((int)(1000.0 - (currentTime - (magCyclePeriod * 0.75)) * (4000.0 / magCyclePeriod)), 0);
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <main+0x35c>)
 80011d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011d8:	f7ff fa36 	bl	8000648 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011e4:	f7ff f878 	bl	80002d8 <__aeabi_dsub>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4614      	mov	r4, r2
 80011ee:	461d      	mov	r5, r3
 80011f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011f4:	f04f 0000 	mov.w	r0, #0
 80011f8:	4915      	ldr	r1, [pc, #84]	; (8001250 <main+0x350>)
 80011fa:	f7ff fb4f 	bl	800089c <__aeabi_ddiv>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4620      	mov	r0, r4
 8001204:	4629      	mov	r1, r5
 8001206:	f7ff fa1f 	bl	8000648 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	f04f 0000 	mov.w	r0, #0
 8001212:	4911      	ldr	r1, [pc, #68]	; (8001258 <main+0x358>)
 8001214:	f7ff f860 	bl	80002d8 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fcc2 	bl	8000ba8 <__aeabi_d2iz>
 8001224:	4603      	mov	r3, r0
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fc8d 	bl	8001b48 <MAGNETORQUER_SET_PWM>
 800122e:	e01b      	b.n	8001268 <main+0x368>
 8001230:	00000000 	.word	0x00000000
 8001234:	40f86a00 	.word	0x40f86a00
 8001238:	200001a8 	.word	0x200001a8
 800123c:	40012c00 	.word	0x40012c00
 8001240:	200001f4 	.word	0x200001f4
 8001244:	40340000 	.word	0x40340000
 8001248:	40490000 	.word	0x40490000
 800124c:	3fd00000 	.word	0x3fd00000
 8001250:	40af4000 	.word	0x40af4000
 8001254:	3fe00000 	.word	0x3fe00000
 8001258:	408f4000 	.word	0x408f4000
 800125c:	3fe80000 	.word	0x3fe80000
	  }
	  else{
		  TIM2->CNT = 0;
 8001260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
	  }
	  HAL_ADC_Start(&hadc1);
 8001268:	4861      	ldr	r0, [pc, #388]	; (80013f0 <main+0x4f0>)
 800126a:	f001 fbad 	bl	80029c8 <HAL_ADC_Start>
	  magCurrent = ((((double) HAL_ADC_GetValue(&hadc1)) / 4096.0) * 3.3) / IPROPI_res_value;
 800126e:	4860      	ldr	r0, [pc, #384]	; (80013f0 <main+0x4f0>)
 8001270:	f001 fc66 	bl	8002b40 <HAL_ADC_GetValue>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f96c 	bl	8000554 <__aeabi_ui2d>
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <main+0x4f4>)
 8001282:	f7ff fb0b 	bl	800089c <__aeabi_ddiv>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	a350      	add	r3, pc, #320	; (adr r3, 80013d0 <main+0x4d0>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f9d8 	bl	8000648 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012a4:	f7ff fafa 	bl	800089c <__aeabi_ddiv>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	e9c7 2300 	strd	r2, r3, [r7]

	  // IIS2MDCTR data outputs
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 80012b0:	2102      	movs	r1, #2
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f002 fbd3 	bl	8003a60 <HAL_GPIO_ReadPin>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f43f aec8 	beq.w	8001052 <main+0x152>
		  xMag = IIS2_GET_DATA(OUTX_L, 1);
 80012c2:	2101      	movs	r1, #1
 80012c4:	2068      	movs	r0, #104	; 0x68
 80012c6:	f000 fc95 	bl	8001bf4 <IIS2_GET_DATA>
 80012ca:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		  xMagRef = ((double) xMag) * 0.15;
 80012ce:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80012d2:	f7ff f94f 	bl	8000574 <__aeabi_i2d>
 80012d6:	a340      	add	r3, pc, #256	; (adr r3, 80013d8 <main+0x4d8>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff f9b4 	bl	8000648 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		  yMag = IIS2_GET_DATA(OUTY_L, 1);
 80012e8:	2101      	movs	r1, #1
 80012ea:	206a      	movs	r0, #106	; 0x6a
 80012ec:	f000 fc82 	bl	8001bf4 <IIS2_GET_DATA>
 80012f0:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
		  yMagRef = ((double) yMag) * 0.15;
 80012f4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80012f8:	f7ff f93c 	bl	8000574 <__aeabi_i2d>
 80012fc:	a336      	add	r3, pc, #216	; (adr r3, 80013d8 <main+0x4d8>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff f9a1 	bl	8000648 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		  zMag = IIS2_GET_DATA(OUTZ_L, 1);
 800130e:	2101      	movs	r1, #1
 8001310:	206c      	movs	r0, #108	; 0x6c
 8001312:	f000 fc6f 	bl	8001bf4 <IIS2_GET_DATA>
 8001316:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
		  zMagRef = ((double) zMag) * 0.15;
 800131a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800131e:	f7ff f929 	bl	8000574 <__aeabi_i2d>
 8001322:	a32d      	add	r3, pc, #180	; (adr r3, 80013d8 <main+0x4d8>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f98e 	bl	8000648 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
//		  UART_PRINT_TEXT(", ");
//		  UART_PRINT_VAL(yMagRef);
//		  UART_PRINT_TEXT(", ");
//		  UART_PRINT_VAL(zMagRef);
//		  UART_PRINT_TEXT(")\n");
		  if(sqrt(pow(magCurrent - prevMagCurrent, 2)) > 0.00025){
 8001334:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800133c:	f7fe ffcc 	bl	80002d8 <__aeabi_dsub>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	ec43 2b17 	vmov	d7, r2, r3
 8001348:	ed9f 1b25 	vldr	d1, [pc, #148]	; 80013e0 <main+0x4e0>
 800134c:	eeb0 0a47 	vmov.f32	s0, s14
 8001350:	eef0 0a67 	vmov.f32	s1, s15
 8001354:	f007 f866 	bl	8008424 <pow>
 8001358:	eeb0 7a40 	vmov.f32	s14, s0
 800135c:	eef0 7a60 	vmov.f32	s15, s1
 8001360:	eeb0 0a47 	vmov.f32	s0, s14
 8001364:	eef0 0a67 	vmov.f32	s1, s15
 8001368:	f007 f8cc 	bl	8008504 <sqrt>
 800136c:	ec51 0b10 	vmov	r0, r1, d0
 8001370:	a31d      	add	r3, pc, #116	; (adr r3, 80013e8 <main+0x4e8>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff fbf7 	bl	8000b68 <__aeabi_dcmpgt>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d024      	beq.n	80013ca <main+0x4ca>
			  if(currentTime < magCyclePeriod * 0.5){
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <main+0x4f8>)
 8001386:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800138a:	f7ff f95d 	bl	8000648 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001396:	f7ff fbc9 	bl	8000b2c <__aeabi_dcmplt>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <main+0x4a6>
				  UART_PRINT_TEXT("-");
 80013a0:	4816      	ldr	r0, [pc, #88]	; (80013fc <main+0x4fc>)
 80013a2:	f000 fbbd 	bl	8001b20 <UART_PRINT_TEXT>
			  }
			  UART_PRINT_VAL(magCurrent);
 80013a6:	ed97 0b00 	vldr	d0, [r7]
 80013aa:	f000 fb1d 	bl	80019e8 <UART_PRINT_VAL>
			  UART_PRINT_TEXT(" ");
 80013ae:	4814      	ldr	r0, [pc, #80]	; (8001400 <main+0x500>)
 80013b0:	f000 fbb6 	bl	8001b20 <UART_PRINT_TEXT>
			  UART_PRINT_VAL(yMagRef);
 80013b4:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 80013b8:	f000 fb16 	bl	80019e8 <UART_PRINT_VAL>
			  UART_PRINT_TEXT("\n");
 80013bc:	4811      	ldr	r0, [pc, #68]	; (8001404 <main+0x504>)
 80013be:	f000 fbaf 	bl	8001b20 <UART_PRINT_TEXT>
			  prevMagCurrent = magCurrent;
 80013c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013c6:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	  currentTime = ((double)(TIM2->CNT)) / 100000.0;
 80013ca:	e642      	b.n	8001052 <main+0x152>
 80013cc:	f3af 8000 	nop.w
 80013d0:	66666666 	.word	0x66666666
 80013d4:	400a6666 	.word	0x400a6666
 80013d8:	33333333 	.word	0x33333333
 80013dc:	3fc33333 	.word	0x3fc33333
 80013e0:	00000000 	.word	0x00000000
 80013e4:	40000000 	.word	0x40000000
 80013e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80013ec:	3f30624d 	.word	0x3f30624d
 80013f0:	2000008c 	.word	0x2000008c
 80013f4:	40b00000 	.word	0x40b00000
 80013f8:	3fe00000 	.word	0x3fe00000
 80013fc:	080092d0 	.word	0x080092d0
 8001400:	080092d4 	.word	0x080092d4
 8001404:	080092d8 	.word	0x080092d8

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b094      	sub	sp, #80	; 0x50
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0318 	add.w	r3, r7, #24
 8001412:	2238      	movs	r2, #56	; 0x38
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f006 fb80 	bl	8007b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800142a:	2000      	movs	r0, #0
 800142c:	f002 fc6e 	bl	8003d0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001430:	2302      	movs	r3, #2
 8001432:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143a:	2340      	movs	r3, #64	; 0x40
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143e:	2302      	movs	r3, #2
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001442:	2302      	movs	r3, #2
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001446:	2304      	movs	r3, #4
 8001448:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800144a:	2355      	movs	r3, #85	; 0x55
 800144c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144e:	2302      	movs	r3, #2
 8001450:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001452:	2302      	movs	r3, #2
 8001454:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001456:	2302      	movs	r3, #2
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fcf8 	bl	8003e54 <HAL_RCC_OscConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800146a:	f000 fc0f 	bl	8001c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146e:	230f      	movs	r3, #15
 8001470:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001472:	2303      	movs	r3, #3
 8001474:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2104      	movs	r1, #4
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fffc 	bl	8004484 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001492:	f000 fbfb 	bl	8001c8c <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	3750      	adds	r7, #80	; 0x50
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2220      	movs	r2, #32
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f006 fb2f 	bl	8007b1c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014be:	4b32      	ldr	r3, [pc, #200]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80014da:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014e8:	2204      	movs	r2, #4
 80014ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014f2:	4b25      	ldr	r3, [pc, #148]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <MX_ADC1_Init+0xe8>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MX_ADC1_Init+0xe8>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <MX_ADC1_Init+0xe8>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <MX_ADC1_Init+0xe8>)
 800150e:	2200      	movs	r2, #0
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <MX_ADC1_Init+0xe8>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_ADC1_Init+0xe8>)
 800151c:	2200      	movs	r2, #0
 800151e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <MX_ADC1_Init+0xe8>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001528:	4817      	ldr	r0, [pc, #92]	; (8001588 <MX_ADC1_Init+0xe8>)
 800152a:	f001 f8c3 	bl	80026b4 <HAL_ADC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001534:	f000 fbaa 	bl	8001c8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800153c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001540:	4619      	mov	r1, r3
 8001542:	4811      	ldr	r0, [pc, #68]	; (8001588 <MX_ADC1_Init+0xe8>)
 8001544:	f001 ff82 	bl	800344c <HAL_ADCEx_MultiModeConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800154e:	f000 fb9d 	bl	8001c8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_ADC1_Init+0xec>)
 8001554:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001556:	2306      	movs	r3, #6
 8001558:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800155e:	237f      	movs	r3, #127	; 0x7f
 8001560:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001562:	2304      	movs	r3, #4
 8001564:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <MX_ADC1_Init+0xe8>)
 8001570:	f001 faf4 	bl	8002b5c <HAL_ADC_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800157a:	f000 fb87 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3730      	adds	r7, #48	; 0x30
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000008c 	.word	0x2000008c
 800158c:	3ef08000 	.word	0x3ef08000

08001590 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_I2C1_Init+0x74>)
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <MX_I2C1_Init+0x78>)
 8001598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_I2C1_Init+0x74>)
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <MX_I2C1_Init+0x7c>)
 800159e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_I2C1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <MX_I2C1_Init+0x74>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_I2C1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_I2C1_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <MX_I2C1_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_I2C1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_I2C1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <MX_I2C1_Init+0x74>)
 80015cc:	f002 fa78 	bl	8003ac0 <HAL_I2C_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015d6:	f000 fb59 	bl	8001c8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015da:	2100      	movs	r1, #0
 80015dc:	4809      	ldr	r0, [pc, #36]	; (8001604 <MX_I2C1_Init+0x74>)
 80015de:	f002 fafe 	bl	8003bde <HAL_I2CEx_ConfigAnalogFilter>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015e8:	f000 fb50 	bl	8001c8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015ec:	2100      	movs	r1, #0
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_I2C1_Init+0x74>)
 80015f0:	f002 fb40 	bl	8003c74 <HAL_I2CEx_ConfigDigitalFilter>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015fa:	f000 fb47 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200000f8 	.word	0x200000f8
 8001608:	40005400 	.word	0x40005400
 800160c:	30a0a7fb 	.word	0x30a0a7fb

08001610 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_SPI1_Init+0x74>)
 8001616:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <MX_SPI1_Init+0x78>)
 8001618:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_SPI1_Init+0x74>)
 800161c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001620:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_SPI1_Init+0x74>)
 8001624:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001628:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_SPI1_Init+0x74>)
 800162c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001630:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_SPI1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_SPI1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_SPI1_Init+0x74>)
 8001640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001644:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_SPI1_Init+0x74>)
 8001648:	2238      	movs	r2, #56	; 0x38
 800164a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <MX_SPI1_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_SPI1_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <MX_SPI1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_SPI1_Init+0x74>)
 8001660:	2207      	movs	r2, #7
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <MX_SPI1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_SPI1_Init+0x74>)
 800166c:	2208      	movs	r2, #8
 800166e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <MX_SPI1_Init+0x74>)
 8001672:	f003 fb13 	bl	8004c9c <HAL_SPI_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800167c:	f000 fb06 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000144 	.word	0x20000144
 8001688:	40013000 	.word	0x40013000

0800168c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b09c      	sub	sp, #112	; 0x70
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001692:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
 80016bc:	615a      	str	r2, [r3, #20]
 80016be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2234      	movs	r2, #52	; 0x34
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f006 fa28 	bl	8007b1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016cc:	4b45      	ldr	r3, [pc, #276]	; (80017e4 <MX_TIM1_Init+0x158>)
 80016ce:	4a46      	ldr	r2, [pc, #280]	; (80017e8 <MX_TIM1_Init+0x15c>)
 80016d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016d2:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <MX_TIM1_Init+0x158>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <MX_TIM1_Init+0x158>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <MX_TIM1_Init+0x158>)
 80016e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <MX_TIM1_Init+0x158>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ec:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <MX_TIM1_Init+0x158>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <MX_TIM1_Init+0x158>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016f8:	483a      	ldr	r0, [pc, #232]	; (80017e4 <MX_TIM1_Init+0x158>)
 80016fa:	f004 f9e7 	bl	8005acc <HAL_TIM_Base_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001704:	f000 fac2 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800170e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001712:	4619      	mov	r1, r3
 8001714:	4833      	ldr	r0, [pc, #204]	; (80017e4 <MX_TIM1_Init+0x158>)
 8001716:	f004 fd09 	bl	800612c <HAL_TIM_ConfigClockSource>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001720:	f000 fab4 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001724:	482f      	ldr	r0, [pc, #188]	; (80017e4 <MX_TIM1_Init+0x158>)
 8001726:	f004 fa8b 	bl	8005c40 <HAL_TIM_PWM_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001730:	f000 faac 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001734:	2300      	movs	r3, #0
 8001736:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001740:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001744:	4619      	mov	r1, r3
 8001746:	4827      	ldr	r0, [pc, #156]	; (80017e4 <MX_TIM1_Init+0x158>)
 8001748:	f005 fa32 	bl	8006bb0 <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001752:	f000 fa9b 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001756:	2360      	movs	r3, #96	; 0x60
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175e:	2300      	movs	r3, #0
 8001760:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001762:	2300      	movs	r3, #0
 8001764:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001772:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001776:	2200      	movs	r2, #0
 8001778:	4619      	mov	r1, r3
 800177a:	481a      	ldr	r0, [pc, #104]	; (80017e4 <MX_TIM1_Init+0x158>)
 800177c:	f004 fbc2 	bl	8005f04 <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001786:	f000 fa81 	bl	8001c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800179e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	; (80017e4 <MX_TIM1_Init+0x158>)
 80017c8:	f005 fa74 	bl	8006cb4 <HAL_TIMEx_ConfigBreakDeadTime>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80017d2:	f000 fa5b 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <MX_TIM1_Init+0x158>)
 80017d8:	f000 fbc0 	bl	8001f5c <HAL_TIM_MspPostInit>

}
 80017dc:	bf00      	nop
 80017de:	3770      	adds	r7, #112	; 0x70
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200001a8 	.word	0x200001a8
 80017e8:	40012c00 	.word	0x40012c00

080017ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <MX_TIM2_Init+0x98>)
 800180c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001810:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1700;
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <MX_TIM2_Init+0x98>)
 8001814:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001818:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_TIM2_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_TIM2_Init+0x98>)
 8001822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001826:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <MX_TIM2_Init+0x98>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_TIM2_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001834:	4813      	ldr	r0, [pc, #76]	; (8001884 <MX_TIM2_Init+0x98>)
 8001836:	f004 f949 	bl	8005acc <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001840:	f000 fa24 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001848:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	4619      	mov	r1, r3
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <MX_TIM2_Init+0x98>)
 8001852:	f004 fc6b 	bl	800612c <HAL_TIM_ConfigClockSource>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800185c:	f000 fa16 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_TIM2_Init+0x98>)
 800186e:	f005 f99f 	bl	8006bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001878:	f000 fa08 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200001f4 	.word	0x200001f4

08001888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_USART2_UART_Init+0x90>)
 800188e:	4a23      	ldr	r2, [pc, #140]	; (800191c <MX_USART2_UART_Init+0x94>)
 8001890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_USART2_UART_Init+0x90>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_USART2_UART_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d0:	4811      	ldr	r0, [pc, #68]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018d2:	f005 fa8f 	bl	8006df4 <HAL_UART_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018dc:	f000 f9d6 	bl	8001c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e0:	2100      	movs	r1, #0
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018e4:	f006 f826 	bl	8007934 <HAL_UARTEx_SetTxFifoThreshold>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018ee:	f000 f9cd 	bl	8001c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f2:	2100      	movs	r1, #0
 80018f4:	4808      	ldr	r0, [pc, #32]	; (8001918 <MX_USART2_UART_Init+0x90>)
 80018f6:	f006 f85b 	bl	80079b0 <HAL_UARTEx_SetRxFifoThreshold>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001900:	f000 f9c4 	bl	8001c8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_USART2_UART_Init+0x90>)
 8001906:	f005 ffdc 	bl	80078c2 <HAL_UARTEx_DisableFifoMode>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001910:	f000 f9bc 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000240 	.word	0x20000240
 800191c:	40004400 	.word	0x40004400

08001920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <MX_GPIO_Init+0xc0>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a29      	ldr	r2, [pc, #164]	; (80019e0 <MX_GPIO_Init+0xc0>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <MX_GPIO_Init+0xc0>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <MX_GPIO_Init+0xc0>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <MX_GPIO_Init+0xc0>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <MX_GPIO_Init+0xc0>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800196c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001970:	f002 f88e 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800197a:	481a      	ldr	r0, [pc, #104]	; (80019e4 <MX_GPIO_Init+0xc4>)
 800197c:	f002 f888 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001980:	2302      	movs	r3, #2
 8001982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	4619      	mov	r1, r3
 8001992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001996:	f001 fee1 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800199a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800199e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	4619      	mov	r1, r3
 80019b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b6:	f001 fed1 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	4619      	mov	r1, r3
 80019d2:	4804      	ldr	r0, [pc, #16]	; (80019e4 <MX_GPIO_Init+0xc4>)
 80019d4:	f001 fec2 	bl	800375c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	48000400 	.word	0x48000400

080019e8 <UART_PRINT_VAL>:

/* USER CODE BEGIN 4 */
void UART_PRINT_VAL(double value){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b096      	sub	sp, #88	; 0x58
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0b00 	vstr	d0, [r7]
    char total[50];
    char temp[10];
    if(value < 0){
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019fe:	f7ff f895 	bl	8000b2c <__aeabi_dcmplt>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <UART_PRINT_VAL+0x26>
       UART_PRINT_TEXT("-");
 8001a08:	4840      	ldr	r0, [pc, #256]	; (8001b0c <UART_PRINT_VAL+0x124>)
 8001a0a:	f000 f889 	bl	8001b20 <UART_PRINT_TEXT>
    }
    sprintf(total, "%i", abs((int)value));
 8001a0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a12:	f7ff f8c9 	bl	8000ba8 <__aeabi_d2iz>
 8001a16:	4603      	mov	r3, r0
 8001a18:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a1c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a20:	f107 0318 	add.w	r3, r7, #24
 8001a24:	493a      	ldr	r1, [pc, #232]	; (8001b10 <UART_PRINT_VAL+0x128>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f006 f880 	bl	8007b2c <siprintf>
    strcat(total, ".");
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fbf5 	bl	8000220 <strlen>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	f107 0318 	add.w	r3, r7, #24
 8001a3e:	4413      	add	r3, r2
 8001a40:	4934      	ldr	r1, [pc, #208]	; (8001b14 <UART_PRINT_VAL+0x12c>)
 8001a42:	461a      	mov	r2, r3
 8001a44:	460b      	mov	r3, r1
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	8013      	strh	r3, [r2, #0]
    double currentVal = (value - (int) value);
 8001a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a4e:	f7ff f8ab 	bl	8000ba8 <__aeabi_d2iz>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd8d 	bl	8000574 <__aeabi_i2d>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a62:	f7fe fc39 	bl	80002d8 <__aeabi_dsub>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    for(int a=0;a<6;a++){
 8001a6e:	2300      	movs	r3, #0
 8001a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a72:	e036      	b.n	8001ae2 <UART_PRINT_VAL+0xfa>
        currentVal *= 10;
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <UART_PRINT_VAL+0x130>)
 8001a7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a7e:	f7fe fde3 	bl	8000648 <__aeabi_dmul>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        sprintf(temp, "%i", abs((int)currentVal));
 8001a8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a8e:	f7ff f88b 	bl	8000ba8 <__aeabi_d2iz>
 8001a92:	4603      	mov	r3, r0
 8001a94:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a98:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	491b      	ldr	r1, [pc, #108]	; (8001b10 <UART_PRINT_VAL+0x128>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f006 f842 	bl	8007b2c <siprintf>
        strcat(total, temp);
 8001aa8:	f107 020c 	add.w	r2, r7, #12
 8001aac:	f107 0318 	add.w	r3, r7, #24
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f006 f85a 	bl	8007b6c <strcat>
        currentVal -= (int)currentVal;
 8001ab8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001abc:	f7ff f874 	bl	8000ba8 <__aeabi_d2iz>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fd56 	bl	8000574 <__aeabi_i2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001ad0:	f7fe fc02 	bl	80002d8 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    for(int a=0;a<6;a++){
 8001adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ade:	3301      	adds	r3, #1
 8001ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	ddc5      	ble.n	8001a74 <UART_PRINT_VAL+0x8c>
    }
    HAL_UART_Transmit(&huart2, total, strlen(total), 100);
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fb97 	bl	8000220 <strlen>
 8001af2:	4603      	mov	r3, r0
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	f107 0118 	add.w	r1, r7, #24
 8001afa:	2364      	movs	r3, #100	; 0x64
 8001afc:	4807      	ldr	r0, [pc, #28]	; (8001b1c <UART_PRINT_VAL+0x134>)
 8001afe:	f005 f9c9 	bl	8006e94 <HAL_UART_Transmit>
}
 8001b02:	bf00      	nop
 8001b04:	3758      	adds	r7, #88	; 0x58
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	080092d0 	.word	0x080092d0
 8001b10:	080092dc 	.word	0x080092dc
 8001b14:	080092e0 	.word	0x080092e0
 8001b18:	40240000 	.word	0x40240000
 8001b1c:	20000240 	.word	0x20000240

08001b20 <UART_PRINT_TEXT>:
void UART_PRINT_TEXT(uint8_t* MSG){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, MSG, strlen(MSG), 100);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7fe fb79 	bl	8000220 <strlen>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	2364      	movs	r3, #100	; 0x64
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4803      	ldr	r0, [pc, #12]	; (8001b44 <UART_PRINT_TEXT+0x24>)
 8001b38:	f005 f9ac 	bl	8006e94 <HAL_UART_Transmit>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000240 	.word	0x20000240

08001b48 <MAGNETORQUER_SET_PWM>:
void MAGNETORQUER_SET_PWM(int val, int dir){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
	if(dir){
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <MAGNETORQUER_SET_PWM+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b62:	f001 ff95 	bl	8003a90 <HAL_GPIO_WritePin>
 8001b66:	e006      	b.n	8001b76 <MAGNETORQUER_SET_PWM+0x2e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b72:	f001 ff8d 	bl	8003a90 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, val);
 8001b76:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <MAGNETORQUER_SET_PWM+0x40>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200001a8 	.word	0x200001a8

08001b8c <IIS2_INIT>:
void IIS2_INIT(void){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
	uint8_t data1[2] = {CFG_REG_A, 0x8c};
 8001b92:	f648 4360 	movw	r3, #35936	; 0x8c60
 8001b96:	81bb      	strh	r3, [r7, #12]
	uint8_t data2[2] = {CFG_REG_B, 0x01};
 8001b98:	f240 1361 	movw	r3, #353	; 0x161
 8001b9c:	813b      	strh	r3, [r7, #8]
	uint8_t data3[2] = {CFG_REG_C, 0x21};
 8001b9e:	f242 1362 	movw	r3, #8546	; 0x2162
 8001ba2:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bae:	f001 ff6f 	bl	8003a90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data1, 2, 100); // TEMP COMP, 100Hz, CONTINUOUS MODE
 8001bb2:	f107 010c 	add.w	r1, r7, #12
 8001bb6:	2364      	movs	r3, #100	; 0x64
 8001bb8:	2202      	movs	r2, #2
 8001bba:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <IIS2_INIT+0x64>)
 8001bbc:	f003 f919 	bl	8004df2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data2, 2, 100); // ENABLE LPF
 8001bc0:	f107 0108 	add.w	r1, r7, #8
 8001bc4:	2364      	movs	r3, #100	; 0x64
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <IIS2_INIT+0x64>)
 8001bca:	f003 f912 	bl	8004df2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data3, 2, 100); // DATA READY INT, DISABLE I2C
 8001bce:	1d39      	adds	r1, r7, #4
 8001bd0:	2364      	movs	r3, #100	; 0x64
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <IIS2_INIT+0x64>)
 8001bd6:	f003 f90c 	bl	8004df2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be4:	f001 ff54 	bl	8003a90 <HAL_GPIO_WritePin>
}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000144 	.word	0x20000144

08001bf4 <IIS2_GET_DATA>:
int IIS2_GET_DATA(uint8_t addr, uint16_t dataSize){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	71fb      	strb	r3, [r7, #7]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
	int val = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
	uint16_t value = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	827b      	strh	r3, [r7, #18]
	uint8_t sendData[1] = {0x80 | addr};
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	743b      	strb	r3, [r7, #16]
	uint8_t receiveData[2];
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c20:	f001 ff36 	bl	8003a90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, sendData, 1, 100);
 8001c24:	f107 0110 	add.w	r1, r7, #16
 8001c28:	2364      	movs	r3, #100	; 0x64
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4816      	ldr	r0, [pc, #88]	; (8001c88 <IIS2_GET_DATA+0x94>)
 8001c2e:	f003 f8e0 	bl	8004df2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, receiveData, 2, 100);
 8001c32:	f107 010c 	add.w	r1, r7, #12
 8001c36:	2364      	movs	r3, #100	; 0x64
 8001c38:	2202      	movs	r2, #2
 8001c3a:	4813      	ldr	r0, [pc, #76]	; (8001c88 <IIS2_GET_DATA+0x94>)
 8001c3c:	f003 fa47 	bl	80050ce <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4a:	f001 ff21 	bl	8003a90 <HAL_GPIO_WritePin>
	value = (receiveData[1] << 8 | receiveData[0]);
 8001c4e:	7b7b      	ldrb	r3, [r7, #13]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	b21a      	sxth	r2, r3
 8001c54:	7b3b      	ldrb	r3, [r7, #12]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	827b      	strh	r3, [r7, #18]
	if(value > 0x7fff){
 8001c5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da09      	bge.n	8001c7a <IIS2_GET_DATA+0x86>
		value = value - 0x01;
 8001c66:	8a7b      	ldrh	r3, [r7, #18]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	827b      	strh	r3, [r7, #18]
		value = ~value;
 8001c6c:	8a7b      	ldrh	r3, [r7, #18]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	827b      	strh	r3, [r7, #18]
		val = -value;
 8001c72:	8a7b      	ldrh	r3, [r7, #18]
 8001c74:	425b      	negs	r3, r3
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e001      	b.n	8001c7e <IIS2_GET_DATA+0x8a>
	}
	else{
		val = value;
 8001c7a:	8a7b      	ldrh	r3, [r7, #18]
 8001c7c:	617b      	str	r3, [r7, #20]
	}
	return val;
 8001c7e:	697b      	ldr	r3, [r7, #20]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000144 	.word	0x20000144

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <Error_Handler+0x8>
	...

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_MspInit+0x44>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_MspInit+0x44>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_MspInit+0x44>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_MspInit+0x44>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_MspInit+0x44>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_MspInit+0x44>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b09a      	sub	sp, #104	; 0x68
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	2244      	movs	r2, #68	; 0x44
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f005 ff0b 	bl	8007b1c <memset>
  if(hadc->Instance==ADC1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d0e:	d133      	bne.n	8001d78 <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d14:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001d16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 fdcb 	bl	80048bc <HAL_RCCEx_PeriphCLKConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001d2c:	f7ff ffae 	bl	8001c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_ADC_MspInit+0xa0>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <HAL_ADC_MspInit+0xa0>)
 8001d36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_ADC_MspInit+0xa0>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_ADC_MspInit+0xa0>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <HAL_ADC_MspInit+0xa0>)
 8001d4e:	f043 0302 	orr.w	r3, r3, #2
 8001d52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_ADC_MspInit+0xa0>)
 8001d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d60:	2301      	movs	r3, #1
 8001d62:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d64:	2303      	movs	r3, #3
 8001d66:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d70:	4619      	mov	r1, r3
 8001d72:	4804      	ldr	r0, [pc, #16]	; (8001d84 <HAL_ADC_MspInit+0xa4>)
 8001d74:	f001 fcf2 	bl	800375c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d78:	bf00      	nop
 8001d7a:	3768      	adds	r7, #104	; 0x68
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	48000400 	.word	0x48000400

08001d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09c      	sub	sp, #112	; 0x70
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	2244      	movs	r2, #68	; 0x44
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f005 feb7 	bl	8007b1c <memset>
  if(hi2c->Instance==I2C1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <HAL_I2C_MspInit+0xe0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d153      	bne.n	8001e60 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001db8:	2340      	movs	r3, #64	; 0x40
 8001dba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc0:	f107 0318 	add.w	r3, r7, #24
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 fd79 	bl	80048bc <HAL_RCCEx_PeriphCLKConfig>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001dd0:	f7ff ff5c 	bl	8001c8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <HAL_I2C_MspInit+0xe4>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <HAL_I2C_MspInit+0xe4>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_I2C_MspInit+0xe4>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <HAL_I2C_MspInit+0xe4>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	4a1e      	ldr	r2, [pc, #120]	; (8001e6c <HAL_I2C_MspInit+0xe4>)
 8001df2:	f043 0302 	orr.w	r3, r3, #2
 8001df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <HAL_I2C_MspInit+0xe4>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e08:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e0a:	2312      	movs	r3, #18
 8001e0c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e16:	2304      	movs	r3, #4
 8001e18:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e24:	f001 fc9a 	bl	800375c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2c:	2312      	movs	r3, #18
 8001e2e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e38:	2304      	movs	r3, #4
 8001e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e40:	4619      	mov	r1, r3
 8001e42:	480b      	ldr	r0, [pc, #44]	; (8001e70 <HAL_I2C_MspInit+0xe8>)
 8001e44:	f001 fc8a 	bl	800375c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_I2C_MspInit+0xe4>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <HAL_I2C_MspInit+0xe4>)
 8001e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_I2C_MspInit+0xe4>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e60:	bf00      	nop
 8001e62:	3770      	adds	r7, #112	; 0x70
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40005400 	.word	0x40005400
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	48000400 	.word	0x48000400

08001e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <HAL_SPI_MspInit+0x7c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d128      	bne.n	8001ee8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_SPI_MspInit+0x80>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9a:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <HAL_SPI_MspInit+0x80>)
 8001e9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ea2:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_SPI_MspInit+0x80>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_SPI_MspInit+0x80>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <HAL_SPI_MspInit+0x80>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_SPI_MspInit+0x80>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ec6:	23a0      	movs	r3, #160	; 0xa0
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee4:	f001 fc3a 	bl	800375c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ee8:	bf00      	nop
 8001eea:	3728      	adds	r7, #40	; 0x28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40013000 	.word	0x40013000
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a13      	ldr	r2, [pc, #76]	; (8001f54 <HAL_TIM_Base_MspInit+0x5c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10c      	bne.n	8001f24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_TIM_Base_MspInit+0x60>)
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <HAL_TIM_Base_MspInit+0x60>)
 8001f10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f14:	6613      	str	r3, [r2, #96]	; 0x60
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_TIM_Base_MspInit+0x60>)
 8001f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f22:	e010      	b.n	8001f46 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2c:	d10b      	bne.n	8001f46 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_TIM_Base_MspInit+0x60>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_TIM_Base_MspInit+0x60>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <HAL_TIM_Base_MspInit+0x60>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	40021000 	.word	0x40021000

08001f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <HAL_TIM_MspPostInit+0x68>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d11d      	bne.n	8001fba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_TIM_MspPostInit+0x6c>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <HAL_TIM_MspPostInit+0x6c>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_TIM_MspPostInit+0x6c>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001fa8:	2306      	movs	r3, #6
 8001faa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb6:	f001 fbd1 	bl	800375c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40012c00 	.word	0x40012c00
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b09a      	sub	sp, #104	; 0x68
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	2244      	movs	r2, #68	; 0x44
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f005 fd95 	bl	8007b1c <memset>
  if(huart->Instance==USART2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_UART_MspInit+0xa8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d136      	bne.n	800206a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fc57 	bl	80048bc <HAL_RCCEx_PeriphCLKConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002014:	f7ff fe3a 	bl	8001c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_UART_MspInit+0xac>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	4a16      	ldr	r2, [pc, #88]	; (8002078 <HAL_UART_MspInit+0xac>)
 800201e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002022:	6593      	str	r3, [r2, #88]	; 0x58
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_UART_MspInit+0xac>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_UART_MspInit+0xac>)
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	4a10      	ldr	r2, [pc, #64]	; (8002078 <HAL_UART_MspInit+0xac>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_UART_MspInit+0xac>)
 800203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002048:	230c      	movs	r3, #12
 800204a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002058:	2307      	movs	r3, #7
 800205a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002060:	4619      	mov	r1, r3
 8002062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002066:	f001 fb79 	bl	800375c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3768      	adds	r7, #104	; 0x68
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40004400 	.word	0x40004400
 8002078:	40021000 	.word	0x40021000

0800207c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <NMI_Handler+0x4>

08002082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <HardFault_Handler+0x4>

08002088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <MemManage_Handler+0x4>

0800208e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002092:	e7fe      	b.n	8002092 <BusFault_Handler+0x4>

08002094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <UsageFault_Handler+0x4>

0800209a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c8:	f000 f8c6 	bl	8002258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_sbrk>:
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <_sbrk+0x5c>)
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <_sbrk+0x60>)
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <_sbrk+0x22>
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <_sbrk+0x64>)
 80020ee:	4a12      	ldr	r2, [pc, #72]	; (8002138 <_sbrk+0x68>)
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <_sbrk+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d207      	bcs.n	8002110 <_sbrk+0x40>
 8002100:	f005 fce2 	bl	8007ac8 <__errno>
 8002104:	4603      	mov	r3, r0
 8002106:	220c      	movs	r2, #12
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800210e:	e009      	b.n	8002124 <_sbrk+0x54>
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	4a05      	ldr	r2, [pc, #20]	; (8002134 <_sbrk+0x64>)
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20008000 	.word	0x20008000
 8002130:	00000400 	.word	0x00000400
 8002134:	200002d0 	.word	0x200002d0
 8002138:	200002e8 	.word	0x200002e8

0800213c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <SystemInit+0x20>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <SystemInit+0x20>)
 8002148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800214c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002160:	480d      	ldr	r0, [pc, #52]	; (8002198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002162:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002164:	480d      	ldr	r0, [pc, #52]	; (800219c <LoopForever+0x6>)
  ldr r1, =_edata
 8002166:	490e      	ldr	r1, [pc, #56]	; (80021a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002168:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <LoopForever+0xe>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800217c:	4c0b      	ldr	r4, [pc, #44]	; (80021ac <LoopForever+0x16>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800218a:	f7ff ffd7 	bl	800213c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800218e:	f005 fca1 	bl	8007ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002192:	f7fe feb5 	bl	8000f00 <main>

08002196 <LoopForever>:

LoopForever:
    b LoopForever
 8002196:	e7fe      	b.n	8002196 <LoopForever>
  ldr   r0, =_estack
 8002198:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800219c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80021a4:	08009398 	.word	0x08009398
  ldr r2, =_sbss
 80021a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80021ac:	200002e8 	.word	0x200002e8

080021b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021b0:	e7fe      	b.n	80021b0 <ADC1_2_IRQHandler>

080021b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021bc:	2003      	movs	r0, #3
 80021be:	f001 fa9b 	bl	80036f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c2:	2000      	movs	r0, #0
 80021c4:	f000 f80e 	bl	80021e4 <HAL_InitTick>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	71fb      	strb	r3, [r7, #7]
 80021d2:	e001      	b.n	80021d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021d4:	f7ff fd60 	bl	8001c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021d8:	79fb      	ldrb	r3, [r7, #7]

}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_InitTick+0x68>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d022      	beq.n	800223e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_InitTick+0x6c>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_InitTick+0x68>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002204:	fbb1 f3f3 	udiv	r3, r1, r3
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	4618      	mov	r0, r3
 800220e:	f001 fa98 	bl	8003742 <HAL_SYSTICK_Config>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10f      	bne.n	8002238 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b0f      	cmp	r3, #15
 800221c:	d809      	bhi.n	8002232 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221e:	2200      	movs	r2, #0
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002226:	f001 fa72 	bl	800370e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_InitTick+0x70>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e007      	b.n	8002242 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e004      	b.n	8002242 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	e001      	b.n	8002242 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000008 	.word	0x20000008
 8002250:	20000000 	.word	0x20000000
 8002254:	20000004 	.word	0x20000004

08002258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_IncTick+0x1c>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_IncTick+0x20>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4413      	add	r3, r2
 8002266:	4a03      	ldr	r2, [pc, #12]	; (8002274 <HAL_IncTick+0x1c>)
 8002268:	6013      	str	r3, [r2, #0]
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	200002d4 	.word	0x200002d4
 8002278:	20000008 	.word	0x20000008

0800227c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return uwTick;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_GetTick+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	200002d4 	.word	0x200002d4

08002294 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	609a      	str	r2, [r3, #8]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3360      	adds	r3, #96	; 0x60
 800230e:	461a      	mov	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <LL_ADC_SetOffset+0x44>)
 800231e:	4013      	ands	r3, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	4313      	orrs	r3, r2
 800232c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002334:	bf00      	nop
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	03fff000 	.word	0x03fff000

08002344 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3360      	adds	r3, #96	; 0x60
 8002352:	461a      	mov	r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3360      	adds	r3, #96	; 0x60
 8002380:	461a      	mov	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	431a      	orrs	r2, r3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b087      	sub	sp, #28
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3360      	adds	r3, #96	; 0x60
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3360      	adds	r3, #96	; 0x60
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	431a      	orrs	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	615a      	str	r2, [r3, #20]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3330      	adds	r3, #48	; 0x30
 8002448:	461a      	mov	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	4413      	add	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	211f      	movs	r1, #31
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	f003 011f 	and.w	r1, r3, #31
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	431a      	orrs	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002484:	bf00      	nop
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3314      	adds	r3, #20
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	0e5b      	lsrs	r3, r3, #25
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	4413      	add	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	0d1b      	lsrs	r3, r3, #20
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	2107      	movs	r1, #7
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	401a      	ands	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	0d1b      	lsrs	r3, r3, #20
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	431a      	orrs	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a0f      	ldr	r2, [pc, #60]	; (8002534 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d10a      	bne.n	8002512 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002508:	431a      	orrs	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002510:	e00a      	b.n	8002528 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	43db      	mvns	r3, r3
 8002520:	401a      	ands	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	407f0000 	.word	0x407f0000

08002538 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 031f 	and.w	r3, r3, #31
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002564:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6093      	str	r3, [r2, #8]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800258c:	d101      	bne.n	8002592 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80025b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025dc:	d101      	bne.n	80025e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <LL_ADC_IsEnabled+0x18>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <LL_ADC_IsEnabled+0x1a>
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800264e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002652:	f043 0204 	orr.w	r2, r3, #4
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b04      	cmp	r3, #4
 8002678:	d101      	bne.n	800267e <LL_ADC_REG_IsConversionOngoing+0x18>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b08      	cmp	r3, #8
 800269e:	d101      	bne.n	80026a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e177      	b.n	80029be <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff faff 	bl	8001ce0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff3f 	bl	8002578 <LL_ADC_IsDeepPowerDownEnabled>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff25 	bl	8002554 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ff5a 	bl	80025c8 <LL_ADC_IsInternalRegulatorEnabled>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d115      	bne.n	8002746 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff ff3e 	bl	80025a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002724:	4b9c      	ldr	r3, [pc, #624]	; (8002998 <HAL_ADC_Init+0x2e4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	099b      	lsrs	r3, r3, #6
 800272a:	4a9c      	ldr	r2, [pc, #624]	; (800299c <HAL_ADC_Init+0x2e8>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	3301      	adds	r3, #1
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002738:	e002      	b.n	8002740 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3b01      	subs	r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f9      	bne.n	800273a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff ff3c 	bl	80025c8 <LL_ADC_IsInternalRegulatorEnabled>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10d      	bne.n	8002772 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ff75 	bl	8002666 <LL_ADC_REG_IsConversionOngoing>
 800277c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 8110 	bne.w	80029ac <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 810c 	bne.w	80029ac <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800279c:	f043 0202 	orr.w	r2, r3, #2
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff35 	bl	8002618 <LL_ADC_IsEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d111      	bne.n	80027d8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027b8:	f7ff ff2e 	bl	8002618 <LL_ADC_IsEnabled>
 80027bc:	4604      	mov	r4, r0
 80027be:	4878      	ldr	r0, [pc, #480]	; (80029a0 <HAL_ADC_Init+0x2ec>)
 80027c0:	f7ff ff2a 	bl	8002618 <LL_ADC_IsEnabled>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4323      	orrs	r3, r4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d105      	bne.n	80027d8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4619      	mov	r1, r3
 80027d2:	4874      	ldr	r0, [pc, #464]	; (80029a4 <HAL_ADC_Init+0x2f0>)
 80027d4:	f7ff fd5e 	bl	8002294 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7f5b      	ldrb	r3, [r3, #29]
 80027dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80027e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80027ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002802:	2b01      	cmp	r3, #1
 8002804:	d106      	bne.n	8002814 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	3b01      	subs	r3, #1
 800280c:	045b      	lsls	r3, r3, #17
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d009      	beq.n	8002830 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	4b5c      	ldr	r3, [pc, #368]	; (80029a8 <HAL_ADC_Init+0x2f4>)
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	69b9      	ldr	r1, [r7, #24]
 8002840:	430b      	orrs	r3, r1
 8002842:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff01 	bl	8002666 <LL_ADC_REG_IsConversionOngoing>
 8002864:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff0e 	bl	800268c <LL_ADC_INJ_IsConversionOngoing>
 8002870:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d16d      	bne.n	8002954 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d16a      	bne.n	8002954 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002882:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800288a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800289a:	f023 0302 	bic.w	r3, r3, #2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	69b9      	ldr	r1, [r7, #24]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d017      	beq.n	80028e0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6911      	ldr	r1, [r2, #16]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	430b      	orrs	r3, r1
 80028da:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80028de:	e013      	b.n	8002908 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002904:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800290e:	2b01      	cmp	r3, #1
 8002910:	d118      	bne.n	8002944 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800291c:	f023 0304 	bic.w	r3, r3, #4
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002928:	4311      	orrs	r1, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002934:	430a      	orrs	r2, r1
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0201 	orr.w	r2, r2, #1
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	e007      	b.n	8002954 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10c      	bne.n	8002976 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f023 010f 	bic.w	r1, r3, #15
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	1e5a      	subs	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
 8002974:	e007      	b.n	8002986 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 020f 	bic.w	r2, r2, #15
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	f023 0303 	bic.w	r3, r3, #3
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	65da      	str	r2, [r3, #92]	; 0x5c
 8002996:	e011      	b.n	80029bc <HAL_ADC_Init+0x308>
 8002998:	20000000 	.word	0x20000000
 800299c:	053e2d63 	.word	0x053e2d63
 80029a0:	50000100 	.word	0x50000100
 80029a4:	50000300 	.word	0x50000300
 80029a8:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	f043 0210 	orr.w	r2, r3, #16
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd90      	pop	{r4, r7, pc}
 80029c6:	bf00      	nop

080029c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029d0:	4859      	ldr	r0, [pc, #356]	; (8002b38 <HAL_ADC_Start+0x170>)
 80029d2:	f7ff fdb1 	bl	8002538 <LL_ADC_GetMultimode>
 80029d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fe42 	bl	8002666 <LL_ADC_REG_IsConversionOngoing>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f040 809f 	bne.w	8002b28 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_Start+0x30>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e09a      	b.n	8002b2e <HAL_ADC_Start+0x166>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fc9b 	bl	800333c <ADC_Enable>
 8002a06:	4603      	mov	r3, r0
 8002a08:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f040 8086 	bne.w	8002b1e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a44      	ldr	r2, [pc, #272]	; (8002b3c <HAL_ADC_Start+0x174>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d002      	beq.n	8002a36 <HAL_ADC_Start+0x6e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	e001      	b.n	8002a3a <HAL_ADC_Start+0x72>
 8002a36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d002      	beq.n	8002a48 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a60:	d106      	bne.n	8002a70 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a66:	f023 0206 	bic.w	r2, r3, #6
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	661a      	str	r2, [r3, #96]	; 0x60
 8002a6e:	e002      	b.n	8002a76 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	221c      	movs	r2, #28
 8002a7c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2c      	ldr	r2, [pc, #176]	; (8002b3c <HAL_ADC_Start+0x174>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d002      	beq.n	8002a96 <HAL_ADC_Start+0xce>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	e001      	b.n	8002a9a <HAL_ADC_Start+0xd2>
 8002a96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d008      	beq.n	8002ab4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d002      	beq.n	8002ab4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d114      	bne.n	8002ade <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fdb1 	bl	800263e <LL_ADC_REG_StartConversion>
 8002adc:	e026      	b.n	8002b2c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <HAL_ADC_Start+0x174>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d002      	beq.n	8002afa <HAL_ADC_Start+0x132>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	e001      	b.n	8002afe <HAL_ADC_Start+0x136>
 8002afa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002afe:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00f      	beq.n	8002b2c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b1c:	e006      	b.n	8002b2c <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002b26:	e001      	b.n	8002b2c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	50000300 	.word	0x50000300
 8002b3c:	50000100 	.word	0x50000100

08002b40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b0b6      	sub	sp, #216	; 0xd8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x22>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e3c8      	b.n	8003310 <HAL_ADC_ConfigChannel+0x7b4>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fd6b 	bl	8002666 <LL_ADC_REG_IsConversionOngoing>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f040 83ad 	bne.w	80032f2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f7ff fc47 	bl	8002438 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fd59 	bl	8002666 <LL_ADC_REG_IsConversionOngoing>
 8002bb4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fd65 	bl	800268c <LL_ADC_INJ_IsConversionOngoing>
 8002bc2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f040 81d9 	bne.w	8002f82 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 81d4 	bne.w	8002f82 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002be2:	d10f      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2200      	movs	r2, #0
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f7ff fc4e 	bl	8002490 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fc08 	bl	8002412 <LL_ADC_SetSamplingTimeCommonConfig>
 8002c02:	e00e      	b.n	8002c22 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6819      	ldr	r1, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	461a      	mov	r2, r3
 8002c12:	f7ff fc3d 	bl	8002490 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fbf8 	bl	8002412 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	08db      	lsrs	r3, r3, #3
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d022      	beq.n	8002c8a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6919      	ldr	r1, [r3, #16]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c54:	f7ff fb52 	bl	80022fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6919      	ldr	r1, [r3, #16]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f7ff fb9e 	bl	80023a6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6919      	ldr	r1, [r3, #16]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	7f1b      	ldrb	r3, [r3, #28]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d102      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x124>
 8002c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c7e:	e000      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x126>
 8002c80:	2300      	movs	r3, #0
 8002c82:	461a      	mov	r2, r3
 8002c84:	f7ff fbaa 	bl	80023dc <LL_ADC_SetOffsetSaturation>
 8002c88:	e17b      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fb57 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x15a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fb4c 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	0e9b      	lsrs	r3, r3, #26
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	e01e      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x198>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fb41 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	e004      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002ce8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x1b0>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e9b      	lsrs	r3, r3, #26
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	e018      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x1e2>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002d30:	2320      	movs	r3, #32
 8002d32:	e004      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002d34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d106      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fb10 	bl	8002370 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff faf4 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x220>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fae9 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	f003 021f 	and.w	r2, r3, #31
 8002d7a:	e01e      	b.n	8002dba <HAL_ADC_ConfigChannel+0x25e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fade 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002daa:	2320      	movs	r3, #32
 8002dac:	e004      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002dae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d105      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x276>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	0e9b      	lsrs	r3, r3, #26
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	e018      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x2a8>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002de6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002dee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002df6:	2320      	movs	r3, #32
 8002df8:	e004      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002dfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d106      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff faad 	bl	8002370 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fa91 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x2e6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2102      	movs	r1, #2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fa86 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	0e9b      	lsrs	r3, r3, #26
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	e01e      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x324>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2102      	movs	r1, #2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fa7b 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002e70:	2320      	movs	r3, #32
 8002e72:	e004      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x33c>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	e016      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x36a>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002eaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	e004      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d106      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fa4c 	bl	8002370 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2103      	movs	r1, #3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fa30 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x3a8>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2103      	movs	r1, #3
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fa25 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	f003 021f 	and.w	r2, r3, #31
 8002f02:	e017      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x3d8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2103      	movs	r1, #3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fa1a 	bl	8002344 <LL_ADC_GetOffsetChannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f1e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002f26:	2320      	movs	r3, #32
 8002f28:	e003      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x3f0>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	0e9b      	lsrs	r3, r3, #26
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	e011      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x414>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e003      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d106      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2103      	movs	r1, #3
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff f9f7 	bl	8002370 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fb46 	bl	8002618 <LL_ADC_IsEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 8140 	bne.w	8003214 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6819      	ldr	r1, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f7ff faa1 	bl	80024e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	4a8f      	ldr	r2, [pc, #572]	; (80031e8 <HAL_ADC_ConfigChannel+0x68c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	f040 8131 	bne.w	8003214 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x47e>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0e9b      	lsrs	r3, r3, #26
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	2b09      	cmp	r3, #9
 8002fd0:	bf94      	ite	ls
 8002fd2:	2301      	movls	r3, #1
 8002fd4:	2300      	movhi	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	e019      	b.n	800300e <HAL_ADC_ConfigChannel+0x4b2>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fea:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	e003      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	3301      	adds	r3, #1
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	2b09      	cmp	r3, #9
 8003006:	bf94      	ite	ls
 8003008:	2301      	movls	r3, #1
 800300a:	2300      	movhi	r3, #0
 800300c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800300e:	2b00      	cmp	r3, #0
 8003010:	d079      	beq.n	8003106 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301a:	2b00      	cmp	r3, #0
 800301c:	d107      	bne.n	800302e <HAL_ADC_ConfigChannel+0x4d2>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	0e9b      	lsrs	r3, r3, #26
 8003024:	3301      	adds	r3, #1
 8003026:	069b      	lsls	r3, r3, #26
 8003028:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800302c:	e015      	b.n	800305a <HAL_ADC_ConfigChannel+0x4fe>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800303c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003046:	2320      	movs	r3, #32
 8003048:	e003      	b.n	8003052 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800304a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	3301      	adds	r3, #1
 8003054:	069b      	lsls	r3, r3, #26
 8003056:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <HAL_ADC_ConfigChannel+0x51e>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	0e9b      	lsrs	r3, r3, #26
 800306c:	3301      	adds	r3, #1
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	e017      	b.n	80030aa <HAL_ADC_ConfigChannel+0x54e>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800308c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003092:	2320      	movs	r3, #32
 8003094:	e003      	b.n	800309e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2101      	movs	r1, #1
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	ea42 0103 	orr.w	r1, r2, r3
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x574>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	0e9b      	lsrs	r3, r3, #26
 80030c0:	3301      	adds	r3, #1
 80030c2:	f003 021f 	and.w	r2, r3, #31
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	051b      	lsls	r3, r3, #20
 80030ce:	e018      	b.n	8003102 <HAL_ADC_ConfigChannel+0x5a6>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80030e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80030e8:	2320      	movs	r3, #32
 80030ea:	e003      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80030ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	3301      	adds	r3, #1
 80030f6:	f003 021f 	and.w	r2, r3, #31
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003102:	430b      	orrs	r3, r1
 8003104:	e081      	b.n	800320a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310e:	2b00      	cmp	r3, #0
 8003110:	d107      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x5c6>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	0e9b      	lsrs	r3, r3, #26
 8003118:	3301      	adds	r3, #1
 800311a:	069b      	lsls	r3, r3, #26
 800311c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003120:	e015      	b.n	800314e <HAL_ADC_ConfigChannel+0x5f2>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	e003      	b.n	8003146 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	3301      	adds	r3, #1
 8003148:	069b      	lsls	r3, r3, #26
 800314a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_ADC_ConfigChannel+0x612>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0e9b      	lsrs	r3, r3, #26
 8003160:	3301      	adds	r3, #1
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	2101      	movs	r1, #1
 8003168:	fa01 f303 	lsl.w	r3, r1, r3
 800316c:	e017      	b.n	800319e <HAL_ADC_ConfigChannel+0x642>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	61fb      	str	r3, [r7, #28]
  return result;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003186:	2320      	movs	r3, #32
 8003188:	e003      	b.n	8003192 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	ea42 0103 	orr.w	r1, r2, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10d      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x66e>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	0e9b      	lsrs	r3, r3, #26
 80031b4:	3301      	adds	r3, #1
 80031b6:	f003 021f 	and.w	r2, r3, #31
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	3b1e      	subs	r3, #30
 80031c2:	051b      	lsls	r3, r3, #20
 80031c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031c8:	e01e      	b.n	8003208 <HAL_ADC_ConfigChannel+0x6ac>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	613b      	str	r3, [r7, #16]
  return result;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80031e2:	2320      	movs	r3, #32
 80031e4:	e006      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x698>
 80031e6:	bf00      	nop
 80031e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f003 021f 	and.w	r2, r3, #31
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	3b1e      	subs	r3, #30
 8003202:	051b      	lsls	r3, r3, #20
 8003204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003208:	430b      	orrs	r3, r1
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	6892      	ldr	r2, [r2, #8]
 800320e:	4619      	mov	r1, r3
 8003210:	f7ff f93e 	bl	8002490 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <HAL_ADC_ConfigChannel+0x7bc>)
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d071      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003220:	483e      	ldr	r0, [pc, #248]	; (800331c <HAL_ADC_ConfigChannel+0x7c0>)
 8003222:	f7ff f85d 	bl	80022e0 <LL_ADC_GetCommonPathInternalCh>
 8003226:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a3c      	ldr	r2, [pc, #240]	; (8003320 <HAL_ADC_ConfigChannel+0x7c4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_ADC_ConfigChannel+0x6e2>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a3a      	ldr	r2, [pc, #232]	; (8003324 <HAL_ADC_ConfigChannel+0x7c8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d127      	bne.n	800328e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800323e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d121      	bne.n	800328e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003252:	d157      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800325c:	4619      	mov	r1, r3
 800325e:	482f      	ldr	r0, [pc, #188]	; (800331c <HAL_ADC_ConfigChannel+0x7c0>)
 8003260:	f7ff f82b 	bl	80022ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003264:	4b30      	ldr	r3, [pc, #192]	; (8003328 <HAL_ADC_ConfigChannel+0x7cc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	4a30      	ldr	r2, [pc, #192]	; (800332c <HAL_ADC_ConfigChannel+0x7d0>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800327e:	e002      	b.n	8003286 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3b01      	subs	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f9      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800328c:	e03a      	b.n	8003304 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a27      	ldr	r2, [pc, #156]	; (8003330 <HAL_ADC_ConfigChannel+0x7d4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d113      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x764>
 8003298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800329c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10d      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a22      	ldr	r2, [pc, #136]	; (8003334 <HAL_ADC_ConfigChannel+0x7d8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d02a      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b6:	4619      	mov	r1, r3
 80032b8:	4818      	ldr	r0, [pc, #96]	; (800331c <HAL_ADC_ConfigChannel+0x7c0>)
 80032ba:	f7fe fffe 	bl	80022ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032be:	e021      	b.n	8003304 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <HAL_ADC_ConfigChannel+0x7dc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d11c      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d116      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a16      	ldr	r2, [pc, #88]	; (8003334 <HAL_ADC_ConfigChannel+0x7d8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d011      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032e8:	4619      	mov	r1, r3
 80032ea:	480c      	ldr	r0, [pc, #48]	; (800331c <HAL_ADC_ConfigChannel+0x7c0>)
 80032ec:	f7fe ffe5 	bl	80022ba <LL_ADC_SetCommonPathInternalCh>
 80032f0:	e008      	b.n	8003304 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800330c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003310:	4618      	mov	r0, r3
 8003312:	37d8      	adds	r7, #216	; 0xd8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	80080000 	.word	0x80080000
 800331c:	50000300 	.word	0x50000300
 8003320:	c3210000 	.word	0xc3210000
 8003324:	90c00010 	.word	0x90c00010
 8003328:	20000000 	.word	0x20000000
 800332c:	053e2d63 	.word	0x053e2d63
 8003330:	c7520000 	.word	0xc7520000
 8003334:	50000100 	.word	0x50000100
 8003338:	cb840000 	.word	0xcb840000

0800333c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff f965 	bl	8002618 <LL_ADC_IsEnabled>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d14d      	bne.n	80033f0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	4b28      	ldr	r3, [pc, #160]	; (80033fc <ADC_Enable+0xc0>)
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00d      	beq.n	800337e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003366:	f043 0210 	orr.w	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e039      	b.n	80033f2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff f934 	bl	80025f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003388:	f7fe ff78 	bl	800227c <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800338e:	e028      	b.n	80033e2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff f93f 	bl	8002618 <LL_ADC_IsEnabled>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d104      	bne.n	80033aa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f923 	bl	80025f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033aa:	f7fe ff67 	bl	800227c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d914      	bls.n	80033e2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d00d      	beq.n	80033e2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	f043 0210 	orr.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e007      	b.n	80033f2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d1cf      	bne.n	8003390 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	8000003f 	.word	0x8000003f

08003400 <LL_ADC_IsEnabled>:
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <LL_ADC_IsEnabled+0x18>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <LL_ADC_IsEnabled+0x1a>
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <LL_ADC_REG_IsConversionOngoing>:
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d101      	bne.n	800343e <LL_ADC_REG_IsConversionOngoing+0x18>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800344c:	b590      	push	{r4, r7, lr}
 800344e:	b0a1      	sub	sp, #132	; 0x84
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003466:	2302      	movs	r3, #2
 8003468:	e08b      	b.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003472:	2300      	movs	r3, #0
 8003474:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003476:	2300      	movs	r3, #0
 8003478:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003482:	d102      	bne.n	800348a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003484:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	e001      	b.n	800348e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e06a      	b.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ffb9 	bl	8003426 <LL_ADC_REG_IsConversionOngoing>
 80034b4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ffb3 	bl	8003426 <LL_ADC_REG_IsConversionOngoing>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d14c      	bne.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80034c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d149      	bne.n	8003560 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034cc:	4b30      	ldr	r3, [pc, #192]	; (8003590 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80034ce:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d028      	beq.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ea:	035b      	lsls	r3, r3, #13
 80034ec:	430b      	orrs	r3, r1
 80034ee:	431a      	orrs	r2, r3
 80034f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034f8:	f7ff ff82 	bl	8003400 <LL_ADC_IsEnabled>
 80034fc:	4604      	mov	r4, r0
 80034fe:	4823      	ldr	r0, [pc, #140]	; (800358c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003500:	f7ff ff7e 	bl	8003400 <LL_ADC_IsEnabled>
 8003504:	4603      	mov	r3, r0
 8003506:	4323      	orrs	r3, r4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d133      	bne.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800350c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003514:	f023 030f 	bic.w	r3, r3, #15
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	6811      	ldr	r1, [r2, #0]
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	6892      	ldr	r2, [r2, #8]
 8003520:	430a      	orrs	r2, r1
 8003522:	431a      	orrs	r2, r3
 8003524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003526:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003528:	e024      	b.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800352a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003534:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003536:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800353a:	f7ff ff61 	bl	8003400 <LL_ADC_IsEnabled>
 800353e:	4604      	mov	r4, r0
 8003540:	4812      	ldr	r0, [pc, #72]	; (800358c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003542:	f7ff ff5d 	bl	8003400 <LL_ADC_IsEnabled>
 8003546:	4603      	mov	r3, r0
 8003548:	4323      	orrs	r3, r4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d112      	bne.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800354e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003556:	f023 030f 	bic.w	r3, r3, #15
 800355a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800355c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800355e:	e009      	b.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	f043 0220 	orr.w	r2, r3, #32
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003572:	e000      	b.n	8003576 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003574:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800357e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003582:	4618      	mov	r0, r3
 8003584:	3784      	adds	r7, #132	; 0x84
 8003586:	46bd      	mov	sp, r7
 8003588:	bd90      	pop	{r4, r7, pc}
 800358a:	bf00      	nop
 800358c:	50000100 	.word	0x50000100
 8003590:	50000300 	.word	0x50000300

08003594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b0:	4013      	ands	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c6:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	60d3      	str	r3, [r2, #12]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <__NVIC_GetPriorityGrouping+0x18>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 0307 	and.w	r3, r3, #7
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003608:	2b00      	cmp	r3, #0
 800360a:	db0a      	blt.n	8003622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	490c      	ldr	r1, [pc, #48]	; (8003644 <__NVIC_SetPriority+0x4c>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	0112      	lsls	r2, r2, #4
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	440b      	add	r3, r1
 800361c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003620:	e00a      	b.n	8003638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4908      	ldr	r1, [pc, #32]	; (8003648 <__NVIC_SetPriority+0x50>)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3b04      	subs	r3, #4
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	440b      	add	r3, r1
 8003636:	761a      	strb	r2, [r3, #24]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000e100 	.word	0xe000e100
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f1c3 0307 	rsb	r3, r3, #7
 8003666:	2b04      	cmp	r3, #4
 8003668:	bf28      	it	cs
 800366a:	2304      	movcs	r3, #4
 800366c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3304      	adds	r3, #4
 8003672:	2b06      	cmp	r3, #6
 8003674:	d902      	bls.n	800367c <NVIC_EncodePriority+0x30>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3b03      	subs	r3, #3
 800367a:	e000      	b.n	800367e <NVIC_EncodePriority+0x32>
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43da      	mvns	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	401a      	ands	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43d9      	mvns	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	4313      	orrs	r3, r2
         );
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c4:	d301      	bcc.n	80036ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c6:	2301      	movs	r3, #1
 80036c8:	e00f      	b.n	80036ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <SysTick_Config+0x40>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d2:	210f      	movs	r1, #15
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036d8:	f7ff ff8e 	bl	80035f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <SysTick_Config+0x40>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <SysTick_Config+0x40>)
 80036e4:	2207      	movs	r2, #7
 80036e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	e000e010 	.word	0xe000e010

080036f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ff47 	bl	8003594 <__NVIC_SetPriorityGrouping>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800371c:	f7ff ff5e 	bl	80035dc <__NVIC_GetPriorityGrouping>
 8003720:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	6978      	ldr	r0, [r7, #20]
 8003728:	f7ff ff90 	bl	800364c <NVIC_EncodePriority>
 800372c:	4602      	mov	r2, r0
 800372e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff5f 	bl	80035f8 <__NVIC_SetPriority>
}
 800373a:	bf00      	nop
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ffb2 	bl	80036b4 <SysTick_Config>
 8003750:	4603      	mov	r3, r0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800376a:	e15a      	b.n	8003a22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	2101      	movs	r1, #1
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	fa01 f303 	lsl.w	r3, r1, r3
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 814c 	beq.w	8003a1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d005      	beq.n	800379c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003798:	2b02      	cmp	r3, #2
 800379a:	d130      	bne.n	80037fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037d2:	2201      	movs	r2, #1
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 0201 	and.w	r2, r3, #1
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b03      	cmp	r3, #3
 8003808:	d017      	beq.n	800383a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2203      	movs	r2, #3
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d123      	bne.n	800388e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	220f      	movs	r2, #15
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	08da      	lsrs	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3208      	adds	r2, #8
 8003888:	6939      	ldr	r1, [r7, #16]
 800388a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	2203      	movs	r2, #3
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0203 	and.w	r2, r3, #3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80a6 	beq.w	8003a1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d0:	4b5b      	ldr	r3, [pc, #364]	; (8003a40 <HAL_GPIO_Init+0x2e4>)
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	4a5a      	ldr	r2, [pc, #360]	; (8003a40 <HAL_GPIO_Init+0x2e4>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6613      	str	r3, [r2, #96]	; 0x60
 80038dc:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <HAL_GPIO_Init+0x2e4>)
 80038de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038e8:	4a56      	ldr	r2, [pc, #344]	; (8003a44 <HAL_GPIO_Init+0x2e8>)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	220f      	movs	r2, #15
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003912:	d01f      	beq.n	8003954 <HAL_GPIO_Init+0x1f8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a4c      	ldr	r2, [pc, #304]	; (8003a48 <HAL_GPIO_Init+0x2ec>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d019      	beq.n	8003950 <HAL_GPIO_Init+0x1f4>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a4b      	ldr	r2, [pc, #300]	; (8003a4c <HAL_GPIO_Init+0x2f0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <HAL_GPIO_Init+0x1f0>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a4a      	ldr	r2, [pc, #296]	; (8003a50 <HAL_GPIO_Init+0x2f4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00d      	beq.n	8003948 <HAL_GPIO_Init+0x1ec>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a49      	ldr	r2, [pc, #292]	; (8003a54 <HAL_GPIO_Init+0x2f8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d007      	beq.n	8003944 <HAL_GPIO_Init+0x1e8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a48      	ldr	r2, [pc, #288]	; (8003a58 <HAL_GPIO_Init+0x2fc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_GPIO_Init+0x1e4>
 800393c:	2305      	movs	r3, #5
 800393e:	e00a      	b.n	8003956 <HAL_GPIO_Init+0x1fa>
 8003940:	2306      	movs	r3, #6
 8003942:	e008      	b.n	8003956 <HAL_GPIO_Init+0x1fa>
 8003944:	2304      	movs	r3, #4
 8003946:	e006      	b.n	8003956 <HAL_GPIO_Init+0x1fa>
 8003948:	2303      	movs	r3, #3
 800394a:	e004      	b.n	8003956 <HAL_GPIO_Init+0x1fa>
 800394c:	2302      	movs	r3, #2
 800394e:	e002      	b.n	8003956 <HAL_GPIO_Init+0x1fa>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_GPIO_Init+0x1fa>
 8003954:	2300      	movs	r3, #0
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	f002 0203 	and.w	r2, r2, #3
 800395c:	0092      	lsls	r2, r2, #2
 800395e:	4093      	lsls	r3, r2
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003966:	4937      	ldr	r1, [pc, #220]	; (8003a44 <HAL_GPIO_Init+0x2e8>)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	3302      	adds	r3, #2
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003974:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <HAL_GPIO_Init+0x300>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	43db      	mvns	r3, r3
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003998:	4a30      	ldr	r2, [pc, #192]	; (8003a5c <HAL_GPIO_Init+0x300>)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800399e:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <HAL_GPIO_Init+0x300>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039c2:	4a26      	ldr	r2, [pc, #152]	; (8003a5c <HAL_GPIO_Init+0x300>)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80039c8:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HAL_GPIO_Init+0x300>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <HAL_GPIO_Init+0x300>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039f2:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <HAL_GPIO_Init+0x300>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a16:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <HAL_GPIO_Init+0x300>)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f47f ae9d 	bne.w	800376c <HAL_GPIO_Init+0x10>
  }
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40010000 	.word	0x40010000
 8003a48:	48000400 	.word	0x48000400
 8003a4c:	48000800 	.word	0x48000800
 8003a50:	48000c00 	.word	0x48000c00
 8003a54:	48001000 	.word	0x48001000
 8003a58:	48001400 	.word	0x48001400
 8003a5c:	40010400 	.word	0x40010400

08003a60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	887b      	ldrh	r3, [r7, #2]
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
 8003a7c:	e001      	b.n	8003a82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aa0:	787b      	ldrb	r3, [r7, #1]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e081      	b.n	8003bd6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fe f94e 	bl	8001d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	; 0x24
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d107      	bne.n	8003b3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	e006      	b.n	8003b48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d104      	bne.n	8003b5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69d9      	ldr	r1, [r3, #28]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d138      	bne.n	8003c66 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e032      	b.n	8003c68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2224      	movs	r2, #36	; 0x24
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c30:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6819      	ldr	r1, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e000      	b.n	8003c68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d139      	bne.n	8003cfe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e033      	b.n	8003d00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2224      	movs	r2, #36	; 0x24
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cc6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0201 	orr.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e000      	b.n	8003d00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cfe:	2302      	movs	r3, #2
  }
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d141      	bne.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d1a:	4b4b      	ldr	r3, [pc, #300]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d26:	d131      	bne.n	8003d8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d28:	4b47      	ldr	r3, [pc, #284]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2e:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d38:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d40:	4a41      	ldr	r2, [pc, #260]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d48:	4b40      	ldr	r3, [pc, #256]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2232      	movs	r2, #50	; 0x32
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	4a3f      	ldr	r2, [pc, #252]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d54:	fba2 2303 	umull	r2, r3, r2, r3
 8003d58:	0c9b      	lsrs	r3, r3, #18
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d5e:	e002      	b.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d66:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d102      	bne.n	8003d7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f2      	bne.n	8003d60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d7a:	4b33      	ldr	r3, [pc, #204]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d158      	bne.n	8003e3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e057      	b.n	8003e3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d8c:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d92:	4a2d      	ldr	r2, [pc, #180]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d9c:	e04d      	b.n	8003e3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da4:	d141      	bne.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003da6:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db2:	d131      	bne.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db4:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dba:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dc4:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dcc:	4a1e      	ldr	r2, [pc, #120]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2232      	movs	r2, #50	; 0x32
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	0c9b      	lsrs	r3, r3, #18
 8003de6:	3301      	adds	r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dea:	e002      	b.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfe:	d102      	bne.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f2      	bne.n	8003dec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e06:	4b10      	ldr	r3, [pc, #64]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e12:	d112      	bne.n	8003e3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e011      	b.n	8003e3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e28:	e007      	b.n	8003e3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e32:	4a05      	ldr	r2, [pc, #20]	; (8003e48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	20000000 	.word	0x20000000
 8003e50:	431bde83 	.word	0x431bde83

08003e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e306      	b.n	8004474 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d075      	beq.n	8003f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e72:	4b97      	ldr	r3, [pc, #604]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e7c:	4b94      	ldr	r3, [pc, #592]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b0c      	cmp	r3, #12
 8003e8a:	d102      	bne.n	8003e92 <HAL_RCC_OscConfig+0x3e>
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d002      	beq.n	8003e98 <HAL_RCC_OscConfig+0x44>
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d10b      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e98:	4b8d      	ldr	r3, [pc, #564]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05b      	beq.n	8003f5c <HAL_RCC_OscConfig+0x108>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d157      	bne.n	8003f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e2e1      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb8:	d106      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x74>
 8003eba:	4b85      	ldr	r3, [pc, #532]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a84      	ldr	r2, [pc, #528]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e01d      	b.n	8003f04 <HAL_RCC_OscConfig+0xb0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x98>
 8003ed2:	4b7f      	ldr	r3, [pc, #508]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a7e      	ldr	r2, [pc, #504]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b7c      	ldr	r3, [pc, #496]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7b      	ldr	r2, [pc, #492]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e00b      	b.n	8003f04 <HAL_RCC_OscConfig+0xb0>
 8003eec:	4b78      	ldr	r3, [pc, #480]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a77      	ldr	r2, [pc, #476]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	4b75      	ldr	r3, [pc, #468]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a74      	ldr	r2, [pc, #464]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fe f9b6 	bl	800227c <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f14:	f7fe f9b2 	bl	800227c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	; 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e2a6      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f26:	4b6a      	ldr	r3, [pc, #424]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0xc0>
 8003f32:	e014      	b.n	8003f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fe f9a2 	bl	800227c <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fe f99e 	bl	800227c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e292      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f4e:	4b60      	ldr	r3, [pc, #384]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0xe8>
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d075      	beq.n	8004056 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f6a:	4b59      	ldr	r3, [pc, #356]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f74:	4b56      	ldr	r3, [pc, #344]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	2b0c      	cmp	r3, #12
 8003f82:	d102      	bne.n	8003f8a <HAL_RCC_OscConfig+0x136>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d002      	beq.n	8003f90 <HAL_RCC_OscConfig+0x13c>
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d11f      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f90:	4b4f      	ldr	r3, [pc, #316]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x154>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e265      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa8:	4b49      	ldr	r3, [pc, #292]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	4946      	ldr	r1, [pc, #280]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fbc:	4b45      	ldr	r3, [pc, #276]	; (80040d4 <HAL_RCC_OscConfig+0x280>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe f90f 	bl	80021e4 <HAL_InitTick>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d043      	beq.n	8004054 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e251      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d023      	beq.n	8004020 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd8:	4b3d      	ldr	r3, [pc, #244]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a3c      	ldr	r2, [pc, #240]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8003fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fe f94a 	bl	800227c <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fec:	f7fe f946 	bl	800227c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e23a      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffe:	4b34      	ldr	r3, [pc, #208]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400a:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	061b      	lsls	r3, r3, #24
 8004018:	492d      	ldr	r1, [pc, #180]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
 800401e:	e01a      	b.n	8004056 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004020:	4b2b      	ldr	r3, [pc, #172]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a2a      	ldr	r2, [pc, #168]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8004026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800402a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fe f926 	bl	800227c <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004034:	f7fe f922 	bl	800227c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e216      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x1e0>
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004054:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d041      	beq.n	80040e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01c      	beq.n	80040a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800406a:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 800406c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004070:	4a17      	ldr	r2, [pc, #92]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407a:	f7fe f8ff 	bl	800227c <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004082:	f7fe f8fb 	bl	800227c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e1ef      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 8004096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0ef      	beq.n	8004082 <HAL_RCC_OscConfig+0x22e>
 80040a2:	e020      	b.n	80040e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 80040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040aa:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <HAL_RCC_OscConfig+0x27c>)
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b4:	f7fe f8e2 	bl	800227c <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040ba:	e00d      	b.n	80040d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040bc:	f7fe f8de 	bl	800227c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d906      	bls.n	80040d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e1d2      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040d8:	4b8c      	ldr	r3, [pc, #560]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 80040da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1ea      	bne.n	80040bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80a6 	beq.w	8004240 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f4:	2300      	movs	r3, #0
 80040f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040f8:	4b84      	ldr	r3, [pc, #528]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_OscConfig+0x2b4>
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x2b6>
 8004108:	2300      	movs	r3, #0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410e:	4b7f      	ldr	r3, [pc, #508]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	4a7e      	ldr	r2, [pc, #504]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 8004114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004118:	6593      	str	r3, [r2, #88]	; 0x58
 800411a:	4b7c      	ldr	r3, [pc, #496]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004126:	2301      	movs	r3, #1
 8004128:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800412a:	4b79      	ldr	r3, [pc, #484]	; (8004310 <HAL_RCC_OscConfig+0x4bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d118      	bne.n	8004168 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004136:	4b76      	ldr	r3, [pc, #472]	; (8004310 <HAL_RCC_OscConfig+0x4bc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a75      	ldr	r2, [pc, #468]	; (8004310 <HAL_RCC_OscConfig+0x4bc>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004142:	f7fe f89b 	bl	800227c <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414a:	f7fe f897 	bl	800227c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e18b      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800415c:	4b6c      	ldr	r3, [pc, #432]	; (8004310 <HAL_RCC_OscConfig+0x4bc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d108      	bne.n	8004182 <HAL_RCC_OscConfig+0x32e>
 8004170:	4b66      	ldr	r3, [pc, #408]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	4a65      	ldr	r2, [pc, #404]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004180:	e024      	b.n	80041cc <HAL_RCC_OscConfig+0x378>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b05      	cmp	r3, #5
 8004188:	d110      	bne.n	80041ac <HAL_RCC_OscConfig+0x358>
 800418a:	4b60      	ldr	r3, [pc, #384]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	4a5e      	ldr	r2, [pc, #376]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 8004192:	f043 0304 	orr.w	r3, r3, #4
 8004196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800419a:	4b5c      	ldr	r3, [pc, #368]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	4a5a      	ldr	r2, [pc, #360]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041aa:	e00f      	b.n	80041cc <HAL_RCC_OscConfig+0x378>
 80041ac:	4b57      	ldr	r3, [pc, #348]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b2:	4a56      	ldr	r2, [pc, #344]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041bc:	4b53      	ldr	r3, [pc, #332]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	4a52      	ldr	r2, [pc, #328]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 80041c4:	f023 0304 	bic.w	r3, r3, #4
 80041c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d016      	beq.n	8004202 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d4:	f7fe f852 	bl	800227c <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041dc:	f7fe f84e 	bl	800227c <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e140      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f2:	4b46      	ldr	r3, [pc, #280]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ed      	beq.n	80041dc <HAL_RCC_OscConfig+0x388>
 8004200:	e015      	b.n	800422e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004202:	f7fe f83b 	bl	800227c <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fe f837 	bl	800227c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	; 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e129      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004220:	4b3a      	ldr	r3, [pc, #232]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1ed      	bne.n	800420a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800422e:	7ffb      	ldrb	r3, [r7, #31]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d105      	bne.n	8004240 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004234:	4b35      	ldr	r3, [pc, #212]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 8004236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004238:	4a34      	ldr	r2, [pc, #208]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 800423a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800423e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d03c      	beq.n	80042c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01c      	beq.n	800428e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004254:	4b2d      	ldr	r3, [pc, #180]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 8004256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800425a:	4a2c      	ldr	r2, [pc, #176]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7fe f80a 	bl	800227c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800426c:	f7fe f806 	bl	800227c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0fa      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800427e:	4b23      	ldr	r3, [pc, #140]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 8004280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ef      	beq.n	800426c <HAL_RCC_OscConfig+0x418>
 800428c:	e01b      	b.n	80042c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800428e:	4b1f      	ldr	r3, [pc, #124]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 8004290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004294:	4a1d      	ldr	r2, [pc, #116]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429e:	f7fd ffed 	bl	800227c <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a6:	f7fd ffe9 	bl	800227c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0dd      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042b8:	4b14      	ldr	r3, [pc, #80]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 80042ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1ef      	bne.n	80042a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 80d1 	beq.w	8004472 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d0:	4b0e      	ldr	r3, [pc, #56]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b0c      	cmp	r3, #12
 80042da:	f000 808b 	beq.w	80043f4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d15e      	bne.n	80043a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a08      	ldr	r2, [pc, #32]	; (800430c <HAL_RCC_OscConfig+0x4b8>)
 80042ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f2:	f7fd ffc3 	bl	800227c <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f8:	e00c      	b.n	8004314 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fa:	f7fd ffbf 	bl	800227c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d905      	bls.n	8004314 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e0b3      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
 800430c:	40021000 	.word	0x40021000
 8004310:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004314:	4b59      	ldr	r3, [pc, #356]	; (800447c <HAL_RCC_OscConfig+0x628>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1ec      	bne.n	80042fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004320:	4b56      	ldr	r3, [pc, #344]	; (800447c <HAL_RCC_OscConfig+0x628>)
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	4b56      	ldr	r3, [pc, #344]	; (8004480 <HAL_RCC_OscConfig+0x62c>)
 8004326:	4013      	ands	r3, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6a11      	ldr	r1, [r2, #32]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004330:	3a01      	subs	r2, #1
 8004332:	0112      	lsls	r2, r2, #4
 8004334:	4311      	orrs	r1, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800433a:	0212      	lsls	r2, r2, #8
 800433c:	4311      	orrs	r1, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004342:	0852      	lsrs	r2, r2, #1
 8004344:	3a01      	subs	r2, #1
 8004346:	0552      	lsls	r2, r2, #21
 8004348:	4311      	orrs	r1, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800434e:	0852      	lsrs	r2, r2, #1
 8004350:	3a01      	subs	r2, #1
 8004352:	0652      	lsls	r2, r2, #25
 8004354:	4311      	orrs	r1, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800435a:	06d2      	lsls	r2, r2, #27
 800435c:	430a      	orrs	r2, r1
 800435e:	4947      	ldr	r1, [pc, #284]	; (800447c <HAL_RCC_OscConfig+0x628>)
 8004360:	4313      	orrs	r3, r2
 8004362:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004364:	4b45      	ldr	r3, [pc, #276]	; (800447c <HAL_RCC_OscConfig+0x628>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a44      	ldr	r2, [pc, #272]	; (800447c <HAL_RCC_OscConfig+0x628>)
 800436a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800436e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004370:	4b42      	ldr	r3, [pc, #264]	; (800447c <HAL_RCC_OscConfig+0x628>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a41      	ldr	r2, [pc, #260]	; (800447c <HAL_RCC_OscConfig+0x628>)
 8004376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800437a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd ff7e 	bl	800227c <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004384:	f7fd ff7a 	bl	800227c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e06e      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004396:	4b39      	ldr	r3, [pc, #228]	; (800447c <HAL_RCC_OscConfig+0x628>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x530>
 80043a2:	e066      	b.n	8004472 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a4:	4b35      	ldr	r3, [pc, #212]	; (800447c <HAL_RCC_OscConfig+0x628>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a34      	ldr	r2, [pc, #208]	; (800447c <HAL_RCC_OscConfig+0x628>)
 80043aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043b0:	4b32      	ldr	r3, [pc, #200]	; (800447c <HAL_RCC_OscConfig+0x628>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a31      	ldr	r2, [pc, #196]	; (800447c <HAL_RCC_OscConfig+0x628>)
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043bc:	4b2f      	ldr	r3, [pc, #188]	; (800447c <HAL_RCC_OscConfig+0x628>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a2e      	ldr	r2, [pc, #184]	; (800447c <HAL_RCC_OscConfig+0x628>)
 80043c2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fd ff56 	bl	800227c <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd ff52 	bl	800227c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e046      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e6:	4b25      	ldr	r3, [pc, #148]	; (800447c <HAL_RCC_OscConfig+0x628>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x580>
 80043f2:	e03e      	b.n	8004472 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e039      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004400:	4b1e      	ldr	r3, [pc, #120]	; (800447c <HAL_RCC_OscConfig+0x628>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f003 0203 	and.w	r2, r3, #3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	429a      	cmp	r2, r3
 8004412:	d12c      	bne.n	800446e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	3b01      	subs	r3, #1
 8004420:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d123      	bne.n	800446e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d11b      	bne.n	800446e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d113      	bne.n	800446e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	3b01      	subs	r3, #1
 8004454:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d109      	bne.n	800446e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	3b01      	subs	r3, #1
 8004468:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3720      	adds	r7, #32
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	019f800c 	.word	0x019f800c

08004484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e11e      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800449c:	4b91      	ldr	r3, [pc, #580]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d910      	bls.n	80044cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	4b8e      	ldr	r3, [pc, #568]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 020f 	bic.w	r2, r3, #15
 80044b2:	498c      	ldr	r1, [pc, #560]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b8a      	ldr	r3, [pc, #552]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e106      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d073      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d129      	bne.n	8004534 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e0:	4b81      	ldr	r3, [pc, #516]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0f4      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044f0:	f000 f99e 	bl	8004830 <RCC_GetSysClockFreqFromPLLSource>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4a7c      	ldr	r2, [pc, #496]	; (80046ec <HAL_RCC_ClockConfig+0x268>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d93f      	bls.n	800457e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044fe:	4b7a      	ldr	r3, [pc, #488]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004512:	2b00      	cmp	r3, #0
 8004514:	d033      	beq.n	800457e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800451a:	2b00      	cmp	r3, #0
 800451c:	d12f      	bne.n	800457e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800451e:	4b72      	ldr	r3, [pc, #456]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004526:	4a70      	ldr	r2, [pc, #448]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e024      	b.n	800457e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d107      	bne.n	800454c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453c:	4b6a      	ldr	r3, [pc, #424]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0c6      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800454c:	4b66      	ldr	r3, [pc, #408]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0be      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800455c:	f000 f8ce 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 8004560:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4a61      	ldr	r2, [pc, #388]	; (80046ec <HAL_RCC_ClockConfig+0x268>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d909      	bls.n	800457e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800456a:	4b5f      	ldr	r3, [pc, #380]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004572:	4a5d      	ldr	r2, [pc, #372]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004578:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800457e:	4b5a      	ldr	r3, [pc, #360]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 0203 	bic.w	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4957      	ldr	r1, [pc, #348]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800458c:	4313      	orrs	r3, r2
 800458e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004590:	f7fd fe74 	bl	800227c <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004596:	e00a      	b.n	80045ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004598:	f7fd fe70 	bl	800227c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e095      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	4b4e      	ldr	r3, [pc, #312]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 020c 	and.w	r2, r3, #12
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	429a      	cmp	r2, r3
 80045be:	d1eb      	bne.n	8004598 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d023      	beq.n	8004614 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d8:	4b43      	ldr	r3, [pc, #268]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a42      	ldr	r2, [pc, #264]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80045de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045f0:	4b3d      	ldr	r3, [pc, #244]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045f8:	4a3b      	ldr	r2, [pc, #236]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80045fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004600:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4936      	ldr	r1, [pc, #216]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
 8004612:	e008      	b.n	8004626 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d105      	bne.n	8004626 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800461a:	4b33      	ldr	r3, [pc, #204]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	4a32      	ldr	r2, [pc, #200]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 8004620:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004624:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004626:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d21d      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004634:	4b2b      	ldr	r3, [pc, #172]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 020f 	bic.w	r2, r3, #15
 800463c:	4929      	ldr	r1, [pc, #164]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004644:	f7fd fe1a 	bl	800227c <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800464a:	e00a      	b.n	8004662 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464c:	f7fd fe16 	bl	800227c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	; 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e03b      	b.n	80046da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <HAL_RCC_ClockConfig+0x260>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d1ed      	bne.n	800464c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800467c:	4b1a      	ldr	r3, [pc, #104]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4917      	ldr	r1, [pc, #92]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800469a:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	490f      	ldr	r1, [pc, #60]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ae:	f000 f825 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <HAL_RCC_ClockConfig+0x264>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	490c      	ldr	r1, [pc, #48]	; (80046f0 <HAL_RCC_ClockConfig+0x26c>)
 80046c0:	5ccb      	ldrb	r3, [r1, r3]
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ca:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <HAL_RCC_ClockConfig+0x270>)
 80046cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046ce:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <HAL_RCC_ClockConfig+0x274>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd fd86 	bl	80021e4 <HAL_InitTick>
 80046d8:	4603      	mov	r3, r0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40022000 	.word	0x40022000
 80046e8:	40021000 	.word	0x40021000
 80046ec:	04c4b400 	.word	0x04c4b400
 80046f0:	080092e4 	.word	0x080092e4
 80046f4:	20000000 	.word	0x20000000
 80046f8:	20000004 	.word	0x20000004

080046fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004702:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	2b04      	cmp	r3, #4
 800470c:	d102      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800470e:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	e047      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004714:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b08      	cmp	r3, #8
 800471e:	d102      	bne.n	8004726 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004720:	4b26      	ldr	r3, [pc, #152]	; (80047bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	e03e      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004726:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d136      	bne.n	80047a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800473c:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	3301      	adds	r3, #1
 8004748:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d10c      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004750:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	4a16      	ldr	r2, [pc, #88]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800475a:	68d2      	ldr	r2, [r2, #12]
 800475c:	0a12      	lsrs	r2, r2, #8
 800475e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	617b      	str	r3, [r7, #20]
      break;
 8004768:	e00c      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800476a:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004772:	4a10      	ldr	r2, [pc, #64]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004774:	68d2      	ldr	r2, [r2, #12]
 8004776:	0a12      	lsrs	r2, r2, #8
 8004778:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800477c:	fb02 f303 	mul.w	r3, r2, r3
 8004780:	617b      	str	r3, [r7, #20]
      break;
 8004782:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	0e5b      	lsrs	r3, r3, #25
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	3301      	adds	r3, #1
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	e001      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047a4:	693b      	ldr	r3, [r7, #16]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40021000 	.word	0x40021000
 80047b8:	00f42400 	.word	0x00f42400
 80047bc:	007a1200 	.word	0x007a1200

080047c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c4:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20000000 	.word	0x20000000

080047d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047dc:	f7ff fff0 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4904      	ldr	r1, [pc, #16]	; (8004800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40021000 	.word	0x40021000
 8004800:	080092f4 	.word	0x080092f4

08004804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004808:	f7ff ffda 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 800480c:	4602      	mov	r2, r0
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	0adb      	lsrs	r3, r3, #11
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	4904      	ldr	r1, [pc, #16]	; (800482c <HAL_RCC_GetPCLK2Freq+0x28>)
 800481a:	5ccb      	ldrb	r3, [r1, r3]
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40021000 	.word	0x40021000
 800482c:	080092f4 	.word	0x080092f4

08004830 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004836:	4b1e      	ldr	r3, [pc, #120]	; (80048b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004840:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	3301      	adds	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b03      	cmp	r3, #3
 8004852:	d10c      	bne.n	800486e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004854:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800485e:	68d2      	ldr	r2, [r2, #12]
 8004860:	0a12      	lsrs	r2, r2, #8
 8004862:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004866:	fb02 f303 	mul.w	r3, r2, r3
 800486a:	617b      	str	r3, [r7, #20]
    break;
 800486c:	e00c      	b.n	8004888 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800486e:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	4a0e      	ldr	r2, [pc, #56]	; (80048b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004878:	68d2      	ldr	r2, [r2, #12]
 800487a:	0a12      	lsrs	r2, r2, #8
 800487c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004880:	fb02 f303 	mul.w	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]
    break;
 8004886:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004888:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	0e5b      	lsrs	r3, r3, #25
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	3301      	adds	r3, #1
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048a2:	687b      	ldr	r3, [r7, #4]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	40021000 	.word	0x40021000
 80048b4:	007a1200 	.word	0x007a1200
 80048b8:	00f42400 	.word	0x00f42400

080048bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048c4:	2300      	movs	r3, #0
 80048c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048c8:	2300      	movs	r3, #0
 80048ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8098 	beq.w	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048da:	2300      	movs	r3, #0
 80048dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048de:	4b43      	ldr	r3, [pc, #268]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10d      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ea:	4b40      	ldr	r3, [pc, #256]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ee:	4a3f      	ldr	r2, [pc, #252]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6593      	str	r3, [r2, #88]	; 0x58
 80048f6:	4b3d      	ldr	r3, [pc, #244]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fe:	60bb      	str	r3, [r7, #8]
 8004900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004902:	2301      	movs	r3, #1
 8004904:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004906:	4b3a      	ldr	r3, [pc, #232]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a39      	ldr	r2, [pc, #228]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800490c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004910:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004912:	f7fd fcb3 	bl	800227c <HAL_GetTick>
 8004916:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004918:	e009      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491a:	f7fd fcaf 	bl	800227c <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d902      	bls.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	74fb      	strb	r3, [r7, #19]
        break;
 800492c:	e005      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800492e:	4b30      	ldr	r3, [pc, #192]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0ef      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800493a:	7cfb      	ldrb	r3, [r7, #19]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d159      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004940:	4b2a      	ldr	r3, [pc, #168]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d01e      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	429a      	cmp	r2, r3
 800495a:	d019      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800495c:	4b23      	ldr	r3, [pc, #140]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004966:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004968:	4b20      	ldr	r3, [pc, #128]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004978:	4b1c      	ldr	r3, [pc, #112]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497e:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004988:	4a18      	ldr	r2, [pc, #96]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fd fc6f 	bl	800227c <HAL_GetTick>
 800499e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a0:	e00b      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a2:	f7fd fc6b 	bl	800227c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d902      	bls.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	74fb      	strb	r3, [r7, #19]
            break;
 80049b8:	e006      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0ec      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049c8:	7cfb      	ldrb	r3, [r7, #19]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10b      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	4903      	ldr	r1, [pc, #12]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049e4:	e008      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049e6:	7cfb      	ldrb	r3, [r7, #19]
 80049e8:	74bb      	strb	r3, [r7, #18]
 80049ea:	e005      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f8:	7c7b      	ldrb	r3, [r7, #17]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d105      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049fe:	4ba6      	ldr	r3, [pc, #664]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	4aa5      	ldr	r2, [pc, #660]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a16:	4ba0      	ldr	r3, [pc, #640]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f023 0203 	bic.w	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	499c      	ldr	r1, [pc, #624]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a38:	4b97      	ldr	r3, [pc, #604]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f023 020c 	bic.w	r2, r3, #12
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	4994      	ldr	r1, [pc, #592]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a5a:	4b8f      	ldr	r3, [pc, #572]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	498b      	ldr	r1, [pc, #556]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a7c:	4b86      	ldr	r3, [pc, #536]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	4983      	ldr	r1, [pc, #524]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a9e:	4b7e      	ldr	r3, [pc, #504]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	497a      	ldr	r1, [pc, #488]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ac0:	4b75      	ldr	r3, [pc, #468]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	4972      	ldr	r1, [pc, #456]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ae2:	4b6d      	ldr	r3, [pc, #436]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	4969      	ldr	r1, [pc, #420]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b04:	4b64      	ldr	r3, [pc, #400]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	4961      	ldr	r1, [pc, #388]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b26:	4b5c      	ldr	r3, [pc, #368]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	4958      	ldr	r1, [pc, #352]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d015      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b48:	4b53      	ldr	r3, [pc, #332]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	4950      	ldr	r1, [pc, #320]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b66:	d105      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b68:	4b4b      	ldr	r3, [pc, #300]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4a4a      	ldr	r2, [pc, #296]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d015      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b80:	4b45      	ldr	r3, [pc, #276]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	4942      	ldr	r1, [pc, #264]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b9e:	d105      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba0:	4b3d      	ldr	r3, [pc, #244]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4a3c      	ldr	r2, [pc, #240]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004baa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bb8:	4b37      	ldr	r3, [pc, #220]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	4934      	ldr	r1, [pc, #208]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bd6:	d105      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd8:	4b2f      	ldr	r3, [pc, #188]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a2e      	ldr	r2, [pc, #184]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d015      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bf0:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	4926      	ldr	r1, [pc, #152]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c0e:	d105      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c10:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4a20      	ldr	r2, [pc, #128]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d015      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c28:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	4918      	ldr	r1, [pc, #96]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c46:	d105      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d015      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c60:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6e:	490a      	ldr	r1, [pc, #40]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c7e:	d105      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4a04      	ldr	r2, [pc, #16]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000

08004c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e09d      	b.n	8004dea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d108      	bne.n	8004cc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cbe:	d009      	beq.n	8004cd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	61da      	str	r2, [r3, #28]
 8004cc6:	e005      	b.n	8004cd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fd f8c0 	bl	8001e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d14:	d902      	bls.n	8004d1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	e002      	b.n	8004d22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d2a:	d007      	beq.n	8004d3c <HAL_SPI_Init+0xa0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d34:	d002      	beq.n	8004d3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7e:	ea42 0103 	orr.w	r1, r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	0c1b      	lsrs	r3, r3, #16
 8004d98:	f003 0204 	and.w	r2, r3, #4
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004db8:	ea42 0103 	orr.w	r1, r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b088      	sub	sp, #32
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	603b      	str	r3, [r7, #0]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_SPI_Transmit+0x22>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e158      	b.n	80050c6 <HAL_SPI_Transmit+0x2d4>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e1c:	f7fd fa2e 	bl	800227c <HAL_GetTick>
 8004e20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
 8004e34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e36:	e13d      	b.n	80050b4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_SPI_Transmit+0x52>
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e48:	e134      	b.n	80050b4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	88fa      	ldrh	r2, [r7, #6]
 8004e62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	88fa      	ldrh	r2, [r7, #6]
 8004e68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e94:	d10f      	bne.n	8004eb6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d007      	beq.n	8004ed4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004edc:	d94b      	bls.n	8004f76 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_Transmit+0xfa>
 8004ee6:	8afb      	ldrh	r3, [r7, #22]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d13e      	bne.n	8004f6a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	1c9a      	adds	r2, r3, #2
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f10:	e02b      	b.n	8004f6a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d112      	bne.n	8004f46 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	881a      	ldrh	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	1c9a      	adds	r2, r3, #2
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f44:	e011      	b.n	8004f6a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f46:	f7fd f999 	bl	800227c <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d803      	bhi.n	8004f5e <HAL_SPI_Transmit+0x16c>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f5c:	d102      	bne.n	8004f64 <HAL_SPI_Transmit+0x172>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f68:	e0a4      	b.n	80050b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1ce      	bne.n	8004f12 <HAL_SPI_Transmit+0x120>
 8004f74:	e07c      	b.n	8005070 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <HAL_SPI_Transmit+0x192>
 8004f7e:	8afb      	ldrh	r3, [r7, #22]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d170      	bne.n	8005066 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d912      	bls.n	8004fb4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	881a      	ldrh	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	1c9a      	adds	r2, r3, #2
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b02      	subs	r3, #2
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fb2:	e058      	b.n	8005066 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	7812      	ldrb	r2, [r2, #0]
 8004fc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004fda:	e044      	b.n	8005066 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d12b      	bne.n	8005042 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d912      	bls.n	800501a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	881a      	ldrh	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	1c9a      	adds	r2, r3, #2
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b02      	subs	r3, #2
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005018:	e025      	b.n	8005066 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	7812      	ldrb	r2, [r2, #0]
 8005026:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005040:	e011      	b.n	8005066 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005042:	f7fd f91b 	bl	800227c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d803      	bhi.n	800505a <HAL_SPI_Transmit+0x268>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005058:	d102      	bne.n	8005060 <HAL_SPI_Transmit+0x26e>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005064:	e026      	b.n	80050b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1b5      	bne.n	8004fdc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fce3 	bl	8005a40 <SPI_EndRxTxTransaction>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e000      	b.n	80050b4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80050b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3720      	adds	r7, #32
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b088      	sub	sp, #32
 80050d2:	af02      	add	r7, sp, #8
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	603b      	str	r3, [r7, #0]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ea:	d112      	bne.n	8005112 <HAL_SPI_Receive+0x44>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10e      	bne.n	8005112 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2204      	movs	r2, #4
 80050f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80050fc:	88fa      	ldrh	r2, [r7, #6]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	4613      	mov	r3, r2
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f910 	bl	800532e <HAL_SPI_TransmitReceive>
 800510e:	4603      	mov	r3, r0
 8005110:	e109      	b.n	8005326 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_SPI_Receive+0x52>
 800511c:	2302      	movs	r3, #2
 800511e:	e102      	b.n	8005326 <HAL_SPI_Receive+0x258>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005128:	f7fd f8a8 	bl	800227c <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d002      	beq.n	8005140 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800513a:	2302      	movs	r3, #2
 800513c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800513e:	e0e9      	b.n	8005314 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_SPI_Receive+0x7e>
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005150:	e0e0      	b.n	8005314 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2204      	movs	r2, #4
 8005156:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	88fa      	ldrh	r2, [r7, #6]
 800516a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	88fa      	ldrh	r2, [r7, #6]
 8005172:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800519c:	d908      	bls.n	80051b0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	e007      	b.n	80051c0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051be:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c8:	d10f      	bne.n	80051ea <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d007      	beq.n	8005208 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005206:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005210:	d867      	bhi.n	80052e2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005212:	e030      	b.n	8005276 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b01      	cmp	r3, #1
 8005220:	d117      	bne.n	8005252 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f103 020c 	add.w	r2, r3, #12
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	7812      	ldrb	r2, [r2, #0]
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005250:	e011      	b.n	8005276 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005252:	f7fd f813 	bl	800227c <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d803      	bhi.n	800526a <HAL_SPI_Receive+0x19c>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005268:	d102      	bne.n	8005270 <HAL_SPI_Receive+0x1a2>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d102      	bne.n	8005276 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005274:	e04e      	b.n	8005314 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1c8      	bne.n	8005214 <HAL_SPI_Receive+0x146>
 8005282:	e034      	b.n	80052ee <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d115      	bne.n	80052be <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	b292      	uxth	r2, r2
 800529e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	1c9a      	adds	r2, r3, #2
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80052bc:	e011      	b.n	80052e2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052be:	f7fc ffdd 	bl	800227c <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d803      	bhi.n	80052d6 <HAL_SPI_Receive+0x208>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d4:	d102      	bne.n	80052dc <HAL_SPI_Receive+0x20e>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052e0:	e018      	b.n	8005314 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1ca      	bne.n	8005284 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fb4c 	bl	8005990 <SPI_EndRxTransaction>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
 8005310:	e000      	b.n	8005314 <HAL_SPI_Receive+0x246>
  }

error :
 8005312:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005324:	7dfb      	ldrb	r3, [r7, #23]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b08a      	sub	sp, #40	; 0x28
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800533c:	2301      	movs	r3, #1
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_SPI_TransmitReceive+0x26>
 8005350:	2302      	movs	r3, #2
 8005352:	e1fb      	b.n	800574c <HAL_SPI_TransmitReceive+0x41e>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800535c:	f7fc ff8e 	bl	800227c <HAL_GetTick>
 8005360:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005368:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005370:	887b      	ldrh	r3, [r7, #2]
 8005372:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005378:	7efb      	ldrb	r3, [r7, #27]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d00e      	beq.n	800539c <HAL_SPI_TransmitReceive+0x6e>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005384:	d106      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d102      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x66>
 800538e:	7efb      	ldrb	r3, [r7, #27]
 8005390:	2b04      	cmp	r3, #4
 8005392:	d003      	beq.n	800539c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005394:	2302      	movs	r3, #2
 8005396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800539a:	e1cd      	b.n	8005738 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_SPI_TransmitReceive+0x80>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <HAL_SPI_TransmitReceive+0x80>
 80053a8:	887b      	ldrh	r3, [r7, #2]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d103      	bne.n	80053b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80053b4:	e1c0      	b.n	8005738 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d003      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2205      	movs	r2, #5
 80053c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	887a      	ldrh	r2, [r7, #2]
 80053da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	887a      	ldrh	r2, [r7, #2]
 80053e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	887a      	ldrh	r2, [r7, #2]
 80053f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	887a      	ldrh	r2, [r7, #2]
 80053f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800540c:	d802      	bhi.n	8005414 <HAL_SPI_TransmitReceive+0xe6>
 800540e:	8a3b      	ldrh	r3, [r7, #16]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d908      	bls.n	8005426 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005422:	605a      	str	r2, [r3, #4]
 8005424:	e007      	b.n	8005436 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005434:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d007      	beq.n	8005454 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005452:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800545c:	d97c      	bls.n	8005558 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_SPI_TransmitReceive+0x13e>
 8005466:	8a7b      	ldrh	r3, [r7, #18]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d169      	bne.n	8005540 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	881a      	ldrh	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	1c9a      	adds	r2, r3, #2
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005490:	e056      	b.n	8005540 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b02      	cmp	r3, #2
 800549e:	d11b      	bne.n	80054d8 <HAL_SPI_TransmitReceive+0x1aa>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d016      	beq.n	80054d8 <HAL_SPI_TransmitReceive+0x1aa>
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d113      	bne.n	80054d8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	881a      	ldrh	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	1c9a      	adds	r2, r3, #2
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d11c      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x1f2>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d016      	beq.n	8005520 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	b292      	uxth	r2, r2
 80054fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	1c9a      	adds	r2, r3, #2
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800551c:	2301      	movs	r3, #1
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005520:	f7fc feac 	bl	800227c <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552c:	429a      	cmp	r2, r3
 800552e:	d807      	bhi.n	8005540 <HAL_SPI_TransmitReceive+0x212>
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005536:	d003      	beq.n	8005540 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800553e:	e0fb      	b.n	8005738 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1a3      	bne.n	8005492 <HAL_SPI_TransmitReceive+0x164>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d19d      	bne.n	8005492 <HAL_SPI_TransmitReceive+0x164>
 8005556:	e0df      	b.n	8005718 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_SPI_TransmitReceive+0x23a>
 8005560:	8a7b      	ldrh	r3, [r7, #18]
 8005562:	2b01      	cmp	r3, #1
 8005564:	f040 80cb 	bne.w	80056fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b01      	cmp	r3, #1
 8005570:	d912      	bls.n	8005598 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	881a      	ldrh	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	1c9a      	adds	r2, r3, #2
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b02      	subs	r3, #2
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005596:	e0b2      	b.n	80056fe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055be:	e09e      	b.n	80056fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d134      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x30a>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d02f      	beq.n	8005638 <HAL_SPI_TransmitReceive+0x30a>
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d12c      	bne.n	8005638 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d912      	bls.n	800560e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	881a      	ldrh	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	1c9a      	adds	r2, r3, #2
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b02      	subs	r3, #2
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800560c:	e012      	b.n	8005634 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	330c      	adds	r3, #12
 8005618:	7812      	ldrb	r2, [r2, #0]
 800561a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d148      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0x3aa>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d042      	beq.n	80056d8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b01      	cmp	r3, #1
 800565c:	d923      	bls.n	80056a6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	b292      	uxth	r2, r2
 800566a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	1c9a      	adds	r2, r3, #2
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b02      	subs	r3, #2
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d81f      	bhi.n	80056d4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056a2:	605a      	str	r2, [r3, #4]
 80056a4:	e016      	b.n	80056d4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f103 020c 	add.w	r2, r3, #12
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	7812      	ldrb	r2, [r2, #0]
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056d4:	2301      	movs	r3, #1
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056d8:	f7fc fdd0 	bl	800227c <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d803      	bhi.n	80056f0 <HAL_SPI_TransmitReceive+0x3c2>
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ee:	d102      	bne.n	80056f6 <HAL_SPI_TransmitReceive+0x3c8>
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80056fc:	e01c      	b.n	8005738 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	f47f af5b 	bne.w	80055c0 <HAL_SPI_TransmitReceive+0x292>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	f47f af54 	bne.w	80055c0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f98f 	bl	8005a40 <SPI_EndRxTxTransaction>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d006      	beq.n	8005736 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	661a      	str	r2, [r3, #96]	; 0x60
 8005734:	e000      	b.n	8005738 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005736:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800574c:	4618      	mov	r0, r3
 800574e:	3728      	adds	r7, #40	; 0x28
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4613      	mov	r3, r2
 8005762:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005764:	f7fc fd8a 	bl	800227c <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	4413      	add	r3, r2
 8005772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005774:	f7fc fd82 	bl	800227c <HAL_GetTick>
 8005778:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800577a:	4b39      	ldr	r3, [pc, #228]	; (8005860 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	015b      	lsls	r3, r3, #5
 8005780:	0d1b      	lsrs	r3, r3, #20
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	fb02 f303 	mul.w	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800578a:	e054      	b.n	8005836 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005792:	d050      	beq.n	8005836 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005794:	f7fc fd72 	bl	800227c <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d902      	bls.n	80057aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d13d      	bne.n	8005826 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057c2:	d111      	bne.n	80057e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057cc:	d004      	beq.n	80057d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d6:	d107      	bne.n	80057e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f0:	d10f      	bne.n	8005812 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e017      	b.n	8005856 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	3b01      	subs	r3, #1
 8005834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4013      	ands	r3, r2
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	429a      	cmp	r2, r3
 8005844:	bf0c      	ite	eq
 8005846:	2301      	moveq	r3, #1
 8005848:	2300      	movne	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	461a      	mov	r2, r3
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	429a      	cmp	r2, r3
 8005852:	d19b      	bne.n	800578c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3720      	adds	r7, #32
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20000000 	.word	0x20000000

08005864 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	; 0x28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005876:	f7fc fd01 	bl	800227c <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	4413      	add	r3, r2
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005886:	f7fc fcf9 	bl	800227c <HAL_GetTick>
 800588a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005894:	4b3d      	ldr	r3, [pc, #244]	; (800598c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	00da      	lsls	r2, r3, #3
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	0d1b      	lsrs	r3, r3, #20
 80058a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80058ac:	e060      	b.n	8005970 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80058b4:	d107      	bne.n	80058c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058cc:	d050      	beq.n	8005970 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058ce:	f7fc fcd5 	bl	800227c <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058da:	429a      	cmp	r2, r3
 80058dc:	d902      	bls.n	80058e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d13d      	bne.n	8005960 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058fc:	d111      	bne.n	8005922 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005906:	d004      	beq.n	8005912 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005910:	d107      	bne.n	8005922 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005920:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592a:	d10f      	bne.n	800594c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800594a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e010      	b.n	8005982 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	3b01      	subs	r3, #1
 800596e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	4013      	ands	r3, r2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	d196      	bne.n	80058ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3728      	adds	r7, #40	; 0x28
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000000 	.word	0x20000000

08005990 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af02      	add	r7, sp, #8
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a4:	d111      	bne.n	80059ca <SPI_EndRxTransaction+0x3a>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ae:	d004      	beq.n	80059ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b8:	d107      	bne.n	80059ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2200      	movs	r2, #0
 80059d2:	2180      	movs	r1, #128	; 0x80
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f7ff febd 	bl	8005754 <SPI_WaitFlagStateUntilTimeout>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e4:	f043 0220 	orr.w	r2, r3, #32
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e023      	b.n	8005a38 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059f8:	d11d      	bne.n	8005a36 <SPI_EndRxTransaction+0xa6>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a02:	d004      	beq.n	8005a0e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0c:	d113      	bne.n	8005a36 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7ff ff22 	bl	8005864 <SPI_WaitFifoStateUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a2a:	f043 0220 	orr.w	r2, r3, #32
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e000      	b.n	8005a38 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7ff ff03 	bl	8005864 <SPI_WaitFifoStateUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a68:	f043 0220 	orr.w	r2, r3, #32
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e027      	b.n	8005ac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2180      	movs	r1, #128	; 0x80
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f7ff fe68 	bl	8005754 <SPI_WaitFlagStateUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8e:	f043 0220 	orr.w	r2, r3, #32
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e014      	b.n	8005ac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff fedc 	bl	8005864 <SPI_WaitFifoStateUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e000      	b.n	8005ac4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e049      	b.n	8005b72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fc fa00 	bl	8001ef8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f000 fc08 	bl	8006320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d001      	beq.n	8005b94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e042      	b.n	8005c1a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <HAL_TIM_Base_Start+0xac>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d018      	beq.n	8005bd8 <HAL_TIM_Base_Start+0x5c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bae:	d013      	beq.n	8005bd8 <HAL_TIM_Base_Start+0x5c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a1d      	ldr	r2, [pc, #116]	; (8005c2c <HAL_TIM_Base_Start+0xb0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00e      	beq.n	8005bd8 <HAL_TIM_Base_Start+0x5c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1c      	ldr	r2, [pc, #112]	; (8005c30 <HAL_TIM_Base_Start+0xb4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d009      	beq.n	8005bd8 <HAL_TIM_Base_Start+0x5c>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1a      	ldr	r2, [pc, #104]	; (8005c34 <HAL_TIM_Base_Start+0xb8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d004      	beq.n	8005bd8 <HAL_TIM_Base_Start+0x5c>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a19      	ldr	r2, [pc, #100]	; (8005c38 <HAL_TIM_Base_Start+0xbc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d115      	bne.n	8005c04 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	4b17      	ldr	r3, [pc, #92]	; (8005c3c <HAL_TIM_Base_Start+0xc0>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b06      	cmp	r3, #6
 8005be8:	d015      	beq.n	8005c16 <HAL_TIM_Base_Start+0x9a>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf0:	d011      	beq.n	8005c16 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c02:	e008      	b.n	8005c16 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e000      	b.n	8005c18 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40012c00 	.word	0x40012c00
 8005c2c:	40000400 	.word	0x40000400
 8005c30:	40000800 	.word	0x40000800
 8005c34:	40013400 	.word	0x40013400
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	00010007 	.word	0x00010007

08005c40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e049      	b.n	8005ce6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f841 	bl	8005cee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f000 fb4e 	bl	8006320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <HAL_TIM_PWM_Start+0x24>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	bf14      	ite	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2300      	moveq	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	e03c      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d109      	bne.n	8005d42 <HAL_TIM_PWM_Start+0x3e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	bf14      	ite	ne
 8005d3a:	2301      	movne	r3, #1
 8005d3c:	2300      	moveq	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	e02f      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d109      	bne.n	8005d5c <HAL_TIM_PWM_Start+0x58>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	bf14      	ite	ne
 8005d54:	2301      	movne	r3, #1
 8005d56:	2300      	moveq	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	e022      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b0c      	cmp	r3, #12
 8005d60:	d109      	bne.n	8005d76 <HAL_TIM_PWM_Start+0x72>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	bf14      	ite	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	2300      	moveq	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	e015      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b10      	cmp	r3, #16
 8005d7a:	d109      	bne.n	8005d90 <HAL_TIM_PWM_Start+0x8c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	e008      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	bf14      	ite	ne
 8005d9c:	2301      	movne	r3, #1
 8005d9e:	2300      	moveq	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e097      	b.n	8005eda <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <HAL_TIM_PWM_Start+0xb6>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db8:	e023      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d104      	bne.n	8005dca <HAL_TIM_PWM_Start+0xc6>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc8:	e01b      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d104      	bne.n	8005dda <HAL_TIM_PWM_Start+0xd6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd8:	e013      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b0c      	cmp	r3, #12
 8005dde:	d104      	bne.n	8005dea <HAL_TIM_PWM_Start+0xe6>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005de8:	e00b      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d104      	bne.n	8005dfa <HAL_TIM_PWM_Start+0xf6>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df8:	e003      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2201      	movs	r2, #1
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 feaa 	bl	8006b64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a33      	ldr	r2, [pc, #204]	; (8005ee4 <HAL_TIM_PWM_Start+0x1e0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x13e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a32      	ldr	r2, [pc, #200]	; (8005ee8 <HAL_TIM_PWM_Start+0x1e4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00e      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x13e>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a30      	ldr	r2, [pc, #192]	; (8005eec <HAL_TIM_PWM_Start+0x1e8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d009      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x13e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2f      	ldr	r2, [pc, #188]	; (8005ef0 <HAL_TIM_PWM_Start+0x1ec>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d004      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x13e>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2d      	ldr	r2, [pc, #180]	; (8005ef4 <HAL_TIM_PWM_Start+0x1f0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d101      	bne.n	8005e46 <HAL_TIM_PWM_Start+0x142>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <HAL_TIM_PWM_Start+0x144>
 8005e46:	2300      	movs	r3, #0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a20      	ldr	r2, [pc, #128]	; (8005ee4 <HAL_TIM_PWM_Start+0x1e0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d018      	beq.n	8005e98 <HAL_TIM_PWM_Start+0x194>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6e:	d013      	beq.n	8005e98 <HAL_TIM_PWM_Start+0x194>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a20      	ldr	r2, [pc, #128]	; (8005ef8 <HAL_TIM_PWM_Start+0x1f4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00e      	beq.n	8005e98 <HAL_TIM_PWM_Start+0x194>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1f      	ldr	r2, [pc, #124]	; (8005efc <HAL_TIM_PWM_Start+0x1f8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d009      	beq.n	8005e98 <HAL_TIM_PWM_Start+0x194>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <HAL_TIM_PWM_Start+0x1e4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_TIM_PWM_Start+0x194>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a16      	ldr	r2, [pc, #88]	; (8005eec <HAL_TIM_PWM_Start+0x1e8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d115      	bne.n	8005ec4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	4b18      	ldr	r3, [pc, #96]	; (8005f00 <HAL_TIM_PWM_Start+0x1fc>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b06      	cmp	r3, #6
 8005ea8:	d015      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x1d2>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb0:	d011      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0201 	orr.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec2:	e008      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	e000      	b.n	8005ed8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40013400 	.word	0x40013400
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40000800 	.word	0x40000800
 8005f00:	00010007 	.word	0x00010007

08005f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e0ff      	b.n	8006122 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b14      	cmp	r3, #20
 8005f2e:	f200 80f0 	bhi.w	8006112 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f32:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f38:	08005f8d 	.word	0x08005f8d
 8005f3c:	08006113 	.word	0x08006113
 8005f40:	08006113 	.word	0x08006113
 8005f44:	08006113 	.word	0x08006113
 8005f48:	08005fcd 	.word	0x08005fcd
 8005f4c:	08006113 	.word	0x08006113
 8005f50:	08006113 	.word	0x08006113
 8005f54:	08006113 	.word	0x08006113
 8005f58:	0800600f 	.word	0x0800600f
 8005f5c:	08006113 	.word	0x08006113
 8005f60:	08006113 	.word	0x08006113
 8005f64:	08006113 	.word	0x08006113
 8005f68:	0800604f 	.word	0x0800604f
 8005f6c:	08006113 	.word	0x08006113
 8005f70:	08006113 	.word	0x08006113
 8005f74:	08006113 	.word	0x08006113
 8005f78:	08006091 	.word	0x08006091
 8005f7c:	08006113 	.word	0x08006113
 8005f80:	08006113 	.word	0x08006113
 8005f84:	08006113 	.word	0x08006113
 8005f88:	080060d1 	.word	0x080060d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fa54 	bl	8006440 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0208 	orr.w	r2, r2, #8
 8005fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0204 	bic.w	r2, r2, #4
 8005fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6999      	ldr	r1, [r3, #24]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	619a      	str	r2, [r3, #24]
      break;
 8005fca:	e0a5      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fac4 	bl	8006560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6999      	ldr	r1, [r3, #24]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	021a      	lsls	r2, r3, #8
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	619a      	str	r2, [r3, #24]
      break;
 800600c:	e084      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fb2d 	bl	8006674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 0208 	orr.w	r2, r2, #8
 8006028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0204 	bic.w	r2, r2, #4
 8006038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69d9      	ldr	r1, [r3, #28]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	61da      	str	r2, [r3, #28]
      break;
 800604c:	e064      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fb95 	bl	8006784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69da      	ldr	r2, [r3, #28]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69d9      	ldr	r1, [r3, #28]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	021a      	lsls	r2, r3, #8
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	61da      	str	r2, [r3, #28]
      break;
 800608e:	e043      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fbfe 	bl	8006898 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0208 	orr.w	r2, r2, #8
 80060aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0204 	bic.w	r2, r2, #4
 80060ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	691a      	ldr	r2, [r3, #16]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80060ce:	e023      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fc42 	bl	8006960 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	021a      	lsls	r2, r3, #8
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006110:	e002      	b.n	8006118 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
      break;
 8006116:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006120:	7dfb      	ldrb	r3, [r7, #23]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop

0800612c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_TIM_ConfigClockSource+0x1c>
 8006144:	2302      	movs	r3, #2
 8006146:	e0de      	b.n	8006306 <HAL_TIM_ConfigClockSource+0x1da>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006166:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800616a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a63      	ldr	r2, [pc, #396]	; (8006310 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	f000 80a9 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1ae>
 8006188:	4a61      	ldr	r2, [pc, #388]	; (8006310 <HAL_TIM_ConfigClockSource+0x1e4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	f200 80ae 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 8006190:	4a60      	ldr	r2, [pc, #384]	; (8006314 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	f000 80a1 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1ae>
 8006198:	4a5e      	ldr	r2, [pc, #376]	; (8006314 <HAL_TIM_ConfigClockSource+0x1e8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	f200 80a6 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 80061a0:	4a5d      	ldr	r2, [pc, #372]	; (8006318 <HAL_TIM_ConfigClockSource+0x1ec>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	f000 8099 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1ae>
 80061a8:	4a5b      	ldr	r2, [pc, #364]	; (8006318 <HAL_TIM_ConfigClockSource+0x1ec>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	f200 809e 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 80061b0:	4a5a      	ldr	r2, [pc, #360]	; (800631c <HAL_TIM_ConfigClockSource+0x1f0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	f000 8091 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1ae>
 80061b8:	4a58      	ldr	r2, [pc, #352]	; (800631c <HAL_TIM_ConfigClockSource+0x1f0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	f200 8096 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 80061c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80061c4:	f000 8089 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x1ae>
 80061c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80061cc:	f200 808e 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 80061d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d4:	d03e      	beq.n	8006254 <HAL_TIM_ConfigClockSource+0x128>
 80061d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061da:	f200 8087 	bhi.w	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e2:	f000 8086 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1c6>
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ea:	d87f      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 80061ec:	2b70      	cmp	r3, #112	; 0x70
 80061ee:	d01a      	beq.n	8006226 <HAL_TIM_ConfigClockSource+0xfa>
 80061f0:	2b70      	cmp	r3, #112	; 0x70
 80061f2:	d87b      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 80061f4:	2b60      	cmp	r3, #96	; 0x60
 80061f6:	d050      	beq.n	800629a <HAL_TIM_ConfigClockSource+0x16e>
 80061f8:	2b60      	cmp	r3, #96	; 0x60
 80061fa:	d877      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 80061fc:	2b50      	cmp	r3, #80	; 0x50
 80061fe:	d03c      	beq.n	800627a <HAL_TIM_ConfigClockSource+0x14e>
 8006200:	2b50      	cmp	r3, #80	; 0x50
 8006202:	d873      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d058      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0x18e>
 8006208:	2b40      	cmp	r3, #64	; 0x40
 800620a:	d86f      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 800620c:	2b30      	cmp	r3, #48	; 0x30
 800620e:	d064      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x1ae>
 8006210:	2b30      	cmp	r3, #48	; 0x30
 8006212:	d86b      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 8006214:	2b20      	cmp	r3, #32
 8006216:	d060      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x1ae>
 8006218:	2b20      	cmp	r3, #32
 800621a:	d867      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d05c      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x1ae>
 8006220:	2b10      	cmp	r3, #16
 8006222:	d05a      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x1ae>
 8006224:	e062      	b.n	80062ec <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	6899      	ldr	r1, [r3, #8]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f000 fc75 	bl	8006b24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006248:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	609a      	str	r2, [r3, #8]
      break;
 8006252:	e04f      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6818      	ldr	r0, [r3, #0]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	6899      	ldr	r1, [r3, #8]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f000 fc5e 	bl	8006b24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006276:	609a      	str	r2, [r3, #8]
      break;
 8006278:	e03c      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	6859      	ldr	r1, [r3, #4]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	461a      	mov	r2, r3
 8006288:	f000 fbd0 	bl	8006a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2150      	movs	r1, #80	; 0x50
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fc29 	bl	8006aea <TIM_ITRx_SetConfig>
      break;
 8006298:	e02c      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6859      	ldr	r1, [r3, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	461a      	mov	r2, r3
 80062a8:	f000 fbef 	bl	8006a8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2160      	movs	r1, #96	; 0x60
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fc19 	bl	8006aea <TIM_ITRx_SetConfig>
      break;
 80062b8:	e01c      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6859      	ldr	r1, [r3, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f000 fbb0 	bl	8006a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2140      	movs	r1, #64	; 0x40
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fc09 	bl	8006aea <TIM_ITRx_SetConfig>
      break;
 80062d8:	e00c      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f000 fc00 	bl	8006aea <TIM_ITRx_SetConfig>
      break;
 80062ea:	e003      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
      break;
 80062f0:	e000      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80062f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006304:	7bfb      	ldrb	r3, [r7, #15]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	00100070 	.word	0x00100070
 8006314:	00100040 	.word	0x00100040
 8006318:	00100030 	.word	0x00100030
 800631c:	00100020 	.word	0x00100020

08006320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a3c      	ldr	r2, [pc, #240]	; (8006424 <TIM_Base_SetConfig+0x104>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00f      	beq.n	8006358 <TIM_Base_SetConfig+0x38>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633e:	d00b      	beq.n	8006358 <TIM_Base_SetConfig+0x38>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a39      	ldr	r2, [pc, #228]	; (8006428 <TIM_Base_SetConfig+0x108>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_Base_SetConfig+0x38>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a38      	ldr	r2, [pc, #224]	; (800642c <TIM_Base_SetConfig+0x10c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_Base_SetConfig+0x38>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a37      	ldr	r2, [pc, #220]	; (8006430 <TIM_Base_SetConfig+0x110>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d108      	bne.n	800636a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2d      	ldr	r2, [pc, #180]	; (8006424 <TIM_Base_SetConfig+0x104>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d01b      	beq.n	80063aa <TIM_Base_SetConfig+0x8a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006378:	d017      	beq.n	80063aa <TIM_Base_SetConfig+0x8a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2a      	ldr	r2, [pc, #168]	; (8006428 <TIM_Base_SetConfig+0x108>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <TIM_Base_SetConfig+0x8a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a29      	ldr	r2, [pc, #164]	; (800642c <TIM_Base_SetConfig+0x10c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00f      	beq.n	80063aa <TIM_Base_SetConfig+0x8a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a28      	ldr	r2, [pc, #160]	; (8006430 <TIM_Base_SetConfig+0x110>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00b      	beq.n	80063aa <TIM_Base_SetConfig+0x8a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a27      	ldr	r2, [pc, #156]	; (8006434 <TIM_Base_SetConfig+0x114>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d007      	beq.n	80063aa <TIM_Base_SetConfig+0x8a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a26      	ldr	r2, [pc, #152]	; (8006438 <TIM_Base_SetConfig+0x118>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d003      	beq.n	80063aa <TIM_Base_SetConfig+0x8a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a25      	ldr	r2, [pc, #148]	; (800643c <TIM_Base_SetConfig+0x11c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d108      	bne.n	80063bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a10      	ldr	r2, [pc, #64]	; (8006424 <TIM_Base_SetConfig+0x104>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00f      	beq.n	8006408 <TIM_Base_SetConfig+0xe8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a11      	ldr	r2, [pc, #68]	; (8006430 <TIM_Base_SetConfig+0x110>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00b      	beq.n	8006408 <TIM_Base_SetConfig+0xe8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a10      	ldr	r2, [pc, #64]	; (8006434 <TIM_Base_SetConfig+0x114>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d007      	beq.n	8006408 <TIM_Base_SetConfig+0xe8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a0f      	ldr	r2, [pc, #60]	; (8006438 <TIM_Base_SetConfig+0x118>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d003      	beq.n	8006408 <TIM_Base_SetConfig+0xe8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a0e      	ldr	r2, [pc, #56]	; (800643c <TIM_Base_SetConfig+0x11c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d103      	bne.n	8006410 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	615a      	str	r2, [r3, #20]
}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40012c00 	.word	0x40012c00
 8006428:	40000400 	.word	0x40000400
 800642c:	40000800 	.word	0x40000800
 8006430:	40013400 	.word	0x40013400
 8006434:	40014000 	.word	0x40014000
 8006438:	40014400 	.word	0x40014400
 800643c:	40014800 	.word	0x40014800

08006440 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f023 0201 	bic.w	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0303 	bic.w	r3, r3, #3
 800647a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f023 0302 	bic.w	r3, r3, #2
 800648c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a2c      	ldr	r2, [pc, #176]	; (800654c <TIM_OC1_SetConfig+0x10c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00f      	beq.n	80064c0 <TIM_OC1_SetConfig+0x80>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a2b      	ldr	r2, [pc, #172]	; (8006550 <TIM_OC1_SetConfig+0x110>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00b      	beq.n	80064c0 <TIM_OC1_SetConfig+0x80>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a2a      	ldr	r2, [pc, #168]	; (8006554 <TIM_OC1_SetConfig+0x114>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d007      	beq.n	80064c0 <TIM_OC1_SetConfig+0x80>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a29      	ldr	r2, [pc, #164]	; (8006558 <TIM_OC1_SetConfig+0x118>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <TIM_OC1_SetConfig+0x80>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a28      	ldr	r2, [pc, #160]	; (800655c <TIM_OC1_SetConfig+0x11c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10c      	bne.n	80064da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f023 0308 	bic.w	r3, r3, #8
 80064c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f023 0304 	bic.w	r3, r3, #4
 80064d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a1b      	ldr	r2, [pc, #108]	; (800654c <TIM_OC1_SetConfig+0x10c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00f      	beq.n	8006502 <TIM_OC1_SetConfig+0xc2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a1a      	ldr	r2, [pc, #104]	; (8006550 <TIM_OC1_SetConfig+0x110>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00b      	beq.n	8006502 <TIM_OC1_SetConfig+0xc2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a19      	ldr	r2, [pc, #100]	; (8006554 <TIM_OC1_SetConfig+0x114>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d007      	beq.n	8006502 <TIM_OC1_SetConfig+0xc2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a18      	ldr	r2, [pc, #96]	; (8006558 <TIM_OC1_SetConfig+0x118>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_OC1_SetConfig+0xc2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a17      	ldr	r2, [pc, #92]	; (800655c <TIM_OC1_SetConfig+0x11c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d111      	bne.n	8006526 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	621a      	str	r2, [r3, #32]
}
 8006540:	bf00      	nop
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40013400 	.word	0x40013400
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800

08006560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	f023 0210 	bic.w	r2, r3, #16
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800658e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	021b      	lsls	r3, r3, #8
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f023 0320 	bic.w	r3, r3, #32
 80065ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a28      	ldr	r2, [pc, #160]	; (8006660 <TIM_OC2_SetConfig+0x100>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_OC2_SetConfig+0x6c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a27      	ldr	r2, [pc, #156]	; (8006664 <TIM_OC2_SetConfig+0x104>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d10d      	bne.n	80065e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a1d      	ldr	r2, [pc, #116]	; (8006660 <TIM_OC2_SetConfig+0x100>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00f      	beq.n	8006610 <TIM_OC2_SetConfig+0xb0>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <TIM_OC2_SetConfig+0x104>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00b      	beq.n	8006610 <TIM_OC2_SetConfig+0xb0>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a1b      	ldr	r2, [pc, #108]	; (8006668 <TIM_OC2_SetConfig+0x108>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d007      	beq.n	8006610 <TIM_OC2_SetConfig+0xb0>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a1a      	ldr	r2, [pc, #104]	; (800666c <TIM_OC2_SetConfig+0x10c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d003      	beq.n	8006610 <TIM_OC2_SetConfig+0xb0>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a19      	ldr	r2, [pc, #100]	; (8006670 <TIM_OC2_SetConfig+0x110>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d113      	bne.n	8006638 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006616:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800661e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40013400 	.word	0x40013400
 8006668:	40014000 	.word	0x40014000
 800666c:	40014400 	.word	0x40014400
 8006670:	40014800 	.word	0x40014800

08006674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	021b      	lsls	r3, r3, #8
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a27      	ldr	r2, [pc, #156]	; (8006770 <TIM_OC3_SetConfig+0xfc>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d003      	beq.n	80066de <TIM_OC3_SetConfig+0x6a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a26      	ldr	r2, [pc, #152]	; (8006774 <TIM_OC3_SetConfig+0x100>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d10d      	bne.n	80066fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <TIM_OC3_SetConfig+0xfc>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00f      	beq.n	8006722 <TIM_OC3_SetConfig+0xae>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1b      	ldr	r2, [pc, #108]	; (8006774 <TIM_OC3_SetConfig+0x100>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00b      	beq.n	8006722 <TIM_OC3_SetConfig+0xae>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1a      	ldr	r2, [pc, #104]	; (8006778 <TIM_OC3_SetConfig+0x104>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d007      	beq.n	8006722 <TIM_OC3_SetConfig+0xae>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a19      	ldr	r2, [pc, #100]	; (800677c <TIM_OC3_SetConfig+0x108>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_OC3_SetConfig+0xae>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a18      	ldr	r2, [pc, #96]	; (8006780 <TIM_OC3_SetConfig+0x10c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d113      	bne.n	800674a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	40012c00 	.word	0x40012c00
 8006774:	40013400 	.word	0x40013400
 8006778:	40014000 	.word	0x40014000
 800677c:	40014400 	.word	0x40014400
 8006780:	40014800 	.word	0x40014800

08006784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	031b      	lsls	r3, r3, #12
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a28      	ldr	r2, [pc, #160]	; (8006884 <TIM_OC4_SetConfig+0x100>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_OC4_SetConfig+0x6c>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a27      	ldr	r2, [pc, #156]	; (8006888 <TIM_OC4_SetConfig+0x104>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d10d      	bne.n	800680c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	031b      	lsls	r3, r3, #12
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800680a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a1d      	ldr	r2, [pc, #116]	; (8006884 <TIM_OC4_SetConfig+0x100>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00f      	beq.n	8006834 <TIM_OC4_SetConfig+0xb0>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a1c      	ldr	r2, [pc, #112]	; (8006888 <TIM_OC4_SetConfig+0x104>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00b      	beq.n	8006834 <TIM_OC4_SetConfig+0xb0>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a1b      	ldr	r2, [pc, #108]	; (800688c <TIM_OC4_SetConfig+0x108>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d007      	beq.n	8006834 <TIM_OC4_SetConfig+0xb0>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a1a      	ldr	r2, [pc, #104]	; (8006890 <TIM_OC4_SetConfig+0x10c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d003      	beq.n	8006834 <TIM_OC4_SetConfig+0xb0>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a19      	ldr	r2, [pc, #100]	; (8006894 <TIM_OC4_SetConfig+0x110>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d113      	bne.n	800685c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800683a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006842:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	019b      	lsls	r3, r3, #6
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	019b      	lsls	r3, r3, #6
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	621a      	str	r2, [r3, #32]
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	40012c00 	.word	0x40012c00
 8006888:	40013400 	.word	0x40013400
 800688c:	40014000 	.word	0x40014000
 8006890:	40014400 	.word	0x40014400
 8006894:	40014800 	.word	0x40014800

08006898 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80068dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	041b      	lsls	r3, r3, #16
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a17      	ldr	r2, [pc, #92]	; (800694c <TIM_OC5_SetConfig+0xb4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00f      	beq.n	8006912 <TIM_OC5_SetConfig+0x7a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a16      	ldr	r2, [pc, #88]	; (8006950 <TIM_OC5_SetConfig+0xb8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00b      	beq.n	8006912 <TIM_OC5_SetConfig+0x7a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a15      	ldr	r2, [pc, #84]	; (8006954 <TIM_OC5_SetConfig+0xbc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d007      	beq.n	8006912 <TIM_OC5_SetConfig+0x7a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a14      	ldr	r2, [pc, #80]	; (8006958 <TIM_OC5_SetConfig+0xc0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d003      	beq.n	8006912 <TIM_OC5_SetConfig+0x7a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a13      	ldr	r2, [pc, #76]	; (800695c <TIM_OC5_SetConfig+0xc4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d109      	bne.n	8006926 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006918:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	621a      	str	r2, [r3, #32]
}
 8006940:	bf00      	nop
 8006942:	371c      	adds	r7, #28
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40013400 	.word	0x40013400
 8006954:	40014000 	.word	0x40014000
 8006958:	40014400 	.word	0x40014400
 800695c:	40014800 	.word	0x40014800

08006960 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800698e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	021b      	lsls	r3, r3, #8
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	051b      	lsls	r3, r3, #20
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <TIM_OC6_SetConfig+0xb8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00f      	beq.n	80069dc <TIM_OC6_SetConfig+0x7c>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a17      	ldr	r2, [pc, #92]	; (8006a1c <TIM_OC6_SetConfig+0xbc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00b      	beq.n	80069dc <TIM_OC6_SetConfig+0x7c>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a16      	ldr	r2, [pc, #88]	; (8006a20 <TIM_OC6_SetConfig+0xc0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d007      	beq.n	80069dc <TIM_OC6_SetConfig+0x7c>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <TIM_OC6_SetConfig+0xc4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_OC6_SetConfig+0x7c>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a14      	ldr	r2, [pc, #80]	; (8006a28 <TIM_OC6_SetConfig+0xc8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d109      	bne.n	80069f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	029b      	lsls	r3, r3, #10
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40012c00 	.word	0x40012c00
 8006a1c:	40013400 	.word	0x40013400
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40014400 	.word	0x40014400
 8006a28:	40014800 	.word	0x40014800

08006a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f023 0201 	bic.w	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f023 030a 	bic.w	r3, r3, #10
 8006a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b087      	sub	sp, #28
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f023 0210 	bic.w	r2, r3, #16
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	031b      	lsls	r3, r3, #12
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ac6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	f043 0307 	orr.w	r3, r3, #7
 8006b10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	021a      	lsls	r2, r3, #8
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	609a      	str	r2, [r3, #8]
}
 8006b58:	bf00      	nop
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f003 031f 	and.w	r3, r3, #31
 8006b76:	2201      	movs	r2, #1
 8006b78:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	43db      	mvns	r3, r3
 8006b86:	401a      	ands	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a1a      	ldr	r2, [r3, #32]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f003 031f 	and.w	r3, r3, #31
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	621a      	str	r2, [r3, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e065      	b.n	8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a2c      	ldr	r2, [pc, #176]	; (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a2b      	ldr	r2, [pc, #172]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d108      	bne.n	8006c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d018      	beq.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3e:	d013      	beq.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a18      	ldr	r2, [pc, #96]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00e      	beq.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a17      	ldr	r2, [pc, #92]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d009      	beq.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a12      	ldr	r2, [pc, #72]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a13      	ldr	r2, [pc, #76]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d10c      	bne.n	8006c82 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	40012c00 	.word	0x40012c00
 8006ca4:	40013400 	.word	0x40013400
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40014000 	.word	0x40014000

08006cb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e087      	b.n	8006de0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	041b      	lsls	r3, r3, #16
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a27      	ldr	r2, [pc, #156]	; (8006dec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a25      	ldr	r2, [pc, #148]	; (8006df0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d106      	bne.n	8006d6c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1e      	ldr	r2, [pc, #120]	; (8006dec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d004      	beq.n	8006d80 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a1d      	ldr	r2, [pc, #116]	; (8006df0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d126      	bne.n	8006dce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8a:	051b      	lsls	r3, r3, #20
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a0e      	ldr	r2, [pc, #56]	; (8006dec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d004      	beq.n	8006dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d106      	bne.n	8006dce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	40012c00 	.word	0x40012c00
 8006df0:	40013400 	.word	0x40013400

08006df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e042      	b.n	8006e8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d106      	bne.n	8006e1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7fb f8d7 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2224      	movs	r2, #36	; 0x24
 8006e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0201 	bic.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f8c2 	bl	8006fc0 <UART_SetConfig>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d101      	bne.n	8006e46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e022      	b.n	8006e8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fb82 	bl	8007558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fc09 	bl	800769c <UART_CheckIdleState>
 8006e8a:	4603      	mov	r3, r0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	; 0x28
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	f040 8083 	bne.w	8006fb6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <HAL_UART_Transmit+0x28>
 8006eb6:	88fb      	ldrh	r3, [r7, #6]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e07b      	b.n	8006fb8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d101      	bne.n	8006ece <HAL_UART_Transmit+0x3a>
 8006eca:	2302      	movs	r3, #2
 8006ecc:	e074      	b.n	8006fb8 <HAL_UART_Transmit+0x124>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2221      	movs	r2, #33	; 0x21
 8006ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ee6:	f7fb f9c9 	bl	800227c <HAL_GetTick>
 8006eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	88fa      	ldrh	r2, [r7, #6]
 8006ef0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	88fa      	ldrh	r2, [r7, #6]
 8006ef8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f04:	d108      	bne.n	8006f18 <HAL_UART_Transmit+0x84>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	e003      	b.n	8006f20 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006f28:	e02c      	b.n	8006f84 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2200      	movs	r2, #0
 8006f32:	2180      	movs	r1, #128	; 0x80
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 fbfc 	bl	8007732 <UART_WaitOnFlagUntilTimeout>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e039      	b.n	8006fb8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10b      	bne.n	8006f62 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	3302      	adds	r3, #2
 8006f5e:	61bb      	str	r3, [r7, #24]
 8006f60:	e007      	b.n	8006f72 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	781a      	ldrb	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1cc      	bne.n	8006f2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2200      	movs	r2, #0
 8006f98:	2140      	movs	r1, #64	; 0x40
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 fbc9 	bl	8007732 <UART_WaitOnFlagUntilTimeout>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e006      	b.n	8006fb8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e000      	b.n	8006fb8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
  }
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3720      	adds	r7, #32
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fc4:	b08c      	sub	sp, #48	; 0x30
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	4bab      	ldr	r3, [pc, #684]	; (800729c <UART_SetConfig+0x2dc>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	6812      	ldr	r2, [r2, #0]
 8006ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ff8:	430b      	orrs	r3, r1
 8006ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4aa0      	ldr	r2, [pc, #640]	; (80072a0 <UART_SetConfig+0x2e0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d004      	beq.n	800702c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007028:	4313      	orrs	r3, r2
 800702a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007036:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	6812      	ldr	r2, [r2, #0]
 800703e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007040:	430b      	orrs	r3, r1
 8007042:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	f023 010f 	bic.w	r1, r3, #15
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a91      	ldr	r2, [pc, #580]	; (80072a4 <UART_SetConfig+0x2e4>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d125      	bne.n	80070b0 <UART_SetConfig+0xf0>
 8007064:	4b90      	ldr	r3, [pc, #576]	; (80072a8 <UART_SetConfig+0x2e8>)
 8007066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	2b03      	cmp	r3, #3
 8007070:	d81a      	bhi.n	80070a8 <UART_SetConfig+0xe8>
 8007072:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <UART_SetConfig+0xb8>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	08007089 	.word	0x08007089
 800707c:	08007099 	.word	0x08007099
 8007080:	08007091 	.word	0x08007091
 8007084:	080070a1 	.word	0x080070a1
 8007088:	2301      	movs	r3, #1
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708e:	e0d6      	b.n	800723e <UART_SetConfig+0x27e>
 8007090:	2302      	movs	r3, #2
 8007092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007096:	e0d2      	b.n	800723e <UART_SetConfig+0x27e>
 8007098:	2304      	movs	r3, #4
 800709a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800709e:	e0ce      	b.n	800723e <UART_SetConfig+0x27e>
 80070a0:	2308      	movs	r3, #8
 80070a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a6:	e0ca      	b.n	800723e <UART_SetConfig+0x27e>
 80070a8:	2310      	movs	r3, #16
 80070aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ae:	e0c6      	b.n	800723e <UART_SetConfig+0x27e>
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a7d      	ldr	r2, [pc, #500]	; (80072ac <UART_SetConfig+0x2ec>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d138      	bne.n	800712c <UART_SetConfig+0x16c>
 80070ba:	4b7b      	ldr	r3, [pc, #492]	; (80072a8 <UART_SetConfig+0x2e8>)
 80070bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c0:	f003 030c 	and.w	r3, r3, #12
 80070c4:	2b0c      	cmp	r3, #12
 80070c6:	d82d      	bhi.n	8007124 <UART_SetConfig+0x164>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <UART_SetConfig+0x110>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	08007105 	.word	0x08007105
 80070d4:	08007125 	.word	0x08007125
 80070d8:	08007125 	.word	0x08007125
 80070dc:	08007125 	.word	0x08007125
 80070e0:	08007115 	.word	0x08007115
 80070e4:	08007125 	.word	0x08007125
 80070e8:	08007125 	.word	0x08007125
 80070ec:	08007125 	.word	0x08007125
 80070f0:	0800710d 	.word	0x0800710d
 80070f4:	08007125 	.word	0x08007125
 80070f8:	08007125 	.word	0x08007125
 80070fc:	08007125 	.word	0x08007125
 8007100:	0800711d 	.word	0x0800711d
 8007104:	2300      	movs	r3, #0
 8007106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710a:	e098      	b.n	800723e <UART_SetConfig+0x27e>
 800710c:	2302      	movs	r3, #2
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007112:	e094      	b.n	800723e <UART_SetConfig+0x27e>
 8007114:	2304      	movs	r3, #4
 8007116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800711a:	e090      	b.n	800723e <UART_SetConfig+0x27e>
 800711c:	2308      	movs	r3, #8
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007122:	e08c      	b.n	800723e <UART_SetConfig+0x27e>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800712a:	e088      	b.n	800723e <UART_SetConfig+0x27e>
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a5f      	ldr	r2, [pc, #380]	; (80072b0 <UART_SetConfig+0x2f0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d125      	bne.n	8007182 <UART_SetConfig+0x1c2>
 8007136:	4b5c      	ldr	r3, [pc, #368]	; (80072a8 <UART_SetConfig+0x2e8>)
 8007138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007140:	2b30      	cmp	r3, #48	; 0x30
 8007142:	d016      	beq.n	8007172 <UART_SetConfig+0x1b2>
 8007144:	2b30      	cmp	r3, #48	; 0x30
 8007146:	d818      	bhi.n	800717a <UART_SetConfig+0x1ba>
 8007148:	2b20      	cmp	r3, #32
 800714a:	d00a      	beq.n	8007162 <UART_SetConfig+0x1a2>
 800714c:	2b20      	cmp	r3, #32
 800714e:	d814      	bhi.n	800717a <UART_SetConfig+0x1ba>
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <UART_SetConfig+0x19a>
 8007154:	2b10      	cmp	r3, #16
 8007156:	d008      	beq.n	800716a <UART_SetConfig+0x1aa>
 8007158:	e00f      	b.n	800717a <UART_SetConfig+0x1ba>
 800715a:	2300      	movs	r3, #0
 800715c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007160:	e06d      	b.n	800723e <UART_SetConfig+0x27e>
 8007162:	2302      	movs	r3, #2
 8007164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007168:	e069      	b.n	800723e <UART_SetConfig+0x27e>
 800716a:	2304      	movs	r3, #4
 800716c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007170:	e065      	b.n	800723e <UART_SetConfig+0x27e>
 8007172:	2308      	movs	r3, #8
 8007174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007178:	e061      	b.n	800723e <UART_SetConfig+0x27e>
 800717a:	2310      	movs	r3, #16
 800717c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007180:	e05d      	b.n	800723e <UART_SetConfig+0x27e>
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a4b      	ldr	r2, [pc, #300]	; (80072b4 <UART_SetConfig+0x2f4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d125      	bne.n	80071d8 <UART_SetConfig+0x218>
 800718c:	4b46      	ldr	r3, [pc, #280]	; (80072a8 <UART_SetConfig+0x2e8>)
 800718e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007192:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007196:	2bc0      	cmp	r3, #192	; 0xc0
 8007198:	d016      	beq.n	80071c8 <UART_SetConfig+0x208>
 800719a:	2bc0      	cmp	r3, #192	; 0xc0
 800719c:	d818      	bhi.n	80071d0 <UART_SetConfig+0x210>
 800719e:	2b80      	cmp	r3, #128	; 0x80
 80071a0:	d00a      	beq.n	80071b8 <UART_SetConfig+0x1f8>
 80071a2:	2b80      	cmp	r3, #128	; 0x80
 80071a4:	d814      	bhi.n	80071d0 <UART_SetConfig+0x210>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <UART_SetConfig+0x1f0>
 80071aa:	2b40      	cmp	r3, #64	; 0x40
 80071ac:	d008      	beq.n	80071c0 <UART_SetConfig+0x200>
 80071ae:	e00f      	b.n	80071d0 <UART_SetConfig+0x210>
 80071b0:	2300      	movs	r3, #0
 80071b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b6:	e042      	b.n	800723e <UART_SetConfig+0x27e>
 80071b8:	2302      	movs	r3, #2
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071be:	e03e      	b.n	800723e <UART_SetConfig+0x27e>
 80071c0:	2304      	movs	r3, #4
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c6:	e03a      	b.n	800723e <UART_SetConfig+0x27e>
 80071c8:	2308      	movs	r3, #8
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ce:	e036      	b.n	800723e <UART_SetConfig+0x27e>
 80071d0:	2310      	movs	r3, #16
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d6:	e032      	b.n	800723e <UART_SetConfig+0x27e>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a30      	ldr	r2, [pc, #192]	; (80072a0 <UART_SetConfig+0x2e0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d12a      	bne.n	8007238 <UART_SetConfig+0x278>
 80071e2:	4b31      	ldr	r3, [pc, #196]	; (80072a8 <UART_SetConfig+0x2e8>)
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f0:	d01a      	beq.n	8007228 <UART_SetConfig+0x268>
 80071f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f6:	d81b      	bhi.n	8007230 <UART_SetConfig+0x270>
 80071f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071fc:	d00c      	beq.n	8007218 <UART_SetConfig+0x258>
 80071fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007202:	d815      	bhi.n	8007230 <UART_SetConfig+0x270>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <UART_SetConfig+0x250>
 8007208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800720c:	d008      	beq.n	8007220 <UART_SetConfig+0x260>
 800720e:	e00f      	b.n	8007230 <UART_SetConfig+0x270>
 8007210:	2300      	movs	r3, #0
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007216:	e012      	b.n	800723e <UART_SetConfig+0x27e>
 8007218:	2302      	movs	r3, #2
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721e:	e00e      	b.n	800723e <UART_SetConfig+0x27e>
 8007220:	2304      	movs	r3, #4
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007226:	e00a      	b.n	800723e <UART_SetConfig+0x27e>
 8007228:	2308      	movs	r3, #8
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800722e:	e006      	b.n	800723e <UART_SetConfig+0x27e>
 8007230:	2310      	movs	r3, #16
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007236:	e002      	b.n	800723e <UART_SetConfig+0x27e>
 8007238:	2310      	movs	r3, #16
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a17      	ldr	r2, [pc, #92]	; (80072a0 <UART_SetConfig+0x2e0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	f040 80a8 	bne.w	800739a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800724a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800724e:	2b08      	cmp	r3, #8
 8007250:	d834      	bhi.n	80072bc <UART_SetConfig+0x2fc>
 8007252:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <UART_SetConfig+0x298>)
 8007254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007258:	0800727d 	.word	0x0800727d
 800725c:	080072bd 	.word	0x080072bd
 8007260:	08007285 	.word	0x08007285
 8007264:	080072bd 	.word	0x080072bd
 8007268:	0800728b 	.word	0x0800728b
 800726c:	080072bd 	.word	0x080072bd
 8007270:	080072bd 	.word	0x080072bd
 8007274:	080072bd 	.word	0x080072bd
 8007278:	08007293 	.word	0x08007293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800727c:	f7fd faac 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8007280:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007282:	e021      	b.n	80072c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007284:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <UART_SetConfig+0x2f8>)
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007288:	e01e      	b.n	80072c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800728a:	f7fd fa37 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 800728e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007290:	e01a      	b.n	80072c8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007298:	e016      	b.n	80072c8 <UART_SetConfig+0x308>
 800729a:	bf00      	nop
 800729c:	cfff69f3 	.word	0xcfff69f3
 80072a0:	40008000 	.word	0x40008000
 80072a4:	40013800 	.word	0x40013800
 80072a8:	40021000 	.word	0x40021000
 80072ac:	40004400 	.word	0x40004400
 80072b0:	40004800 	.word	0x40004800
 80072b4:	40004c00 	.word	0x40004c00
 80072b8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80072c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 812a 	beq.w	8007524 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	4a9e      	ldr	r2, [pc, #632]	; (8007550 <UART_SetConfig+0x590>)
 80072d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072da:	461a      	mov	r2, r3
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	fbb3 f3f2 	udiv	r3, r3, r2
 80072e2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	4613      	mov	r3, r2
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	4413      	add	r3, r2
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d305      	bcc.n	8007300 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d903      	bls.n	8007308 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007306:	e10d      	b.n	8007524 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	2200      	movs	r2, #0
 800730c:	60bb      	str	r3, [r7, #8]
 800730e:	60fa      	str	r2, [r7, #12]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	4a8e      	ldr	r2, [pc, #568]	; (8007550 <UART_SetConfig+0x590>)
 8007316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800731a:	b29b      	uxth	r3, r3
 800731c:	2200      	movs	r2, #0
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007326:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800732a:	f7f9 fc65 	bl	8000bf8 <__aeabi_uldivmod>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4610      	mov	r0, r2
 8007334:	4619      	mov	r1, r3
 8007336:	f04f 0200 	mov.w	r2, #0
 800733a:	f04f 0300 	mov.w	r3, #0
 800733e:	020b      	lsls	r3, r1, #8
 8007340:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007344:	0202      	lsls	r2, r0, #8
 8007346:	6979      	ldr	r1, [r7, #20]
 8007348:	6849      	ldr	r1, [r1, #4]
 800734a:	0849      	lsrs	r1, r1, #1
 800734c:	2000      	movs	r0, #0
 800734e:	460c      	mov	r4, r1
 8007350:	4605      	mov	r5, r0
 8007352:	eb12 0804 	adds.w	r8, r2, r4
 8007356:	eb43 0905 	adc.w	r9, r3, r5
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	469a      	mov	sl, r3
 8007362:	4693      	mov	fp, r2
 8007364:	4652      	mov	r2, sl
 8007366:	465b      	mov	r3, fp
 8007368:	4640      	mov	r0, r8
 800736a:	4649      	mov	r1, r9
 800736c:	f7f9 fc44 	bl	8000bf8 <__aeabi_uldivmod>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4613      	mov	r3, r2
 8007376:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800737e:	d308      	bcc.n	8007392 <UART_SetConfig+0x3d2>
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007386:	d204      	bcs.n	8007392 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6a3a      	ldr	r2, [r7, #32]
 800738e:	60da      	str	r2, [r3, #12]
 8007390:	e0c8      	b.n	8007524 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007398:	e0c4      	b.n	8007524 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a2:	d167      	bne.n	8007474 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80073a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d828      	bhi.n	80073fe <UART_SetConfig+0x43e>
 80073ac:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <UART_SetConfig+0x3f4>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	080073d9 	.word	0x080073d9
 80073b8:	080073e1 	.word	0x080073e1
 80073bc:	080073e9 	.word	0x080073e9
 80073c0:	080073ff 	.word	0x080073ff
 80073c4:	080073ef 	.word	0x080073ef
 80073c8:	080073ff 	.word	0x080073ff
 80073cc:	080073ff 	.word	0x080073ff
 80073d0:	080073ff 	.word	0x080073ff
 80073d4:	080073f7 	.word	0x080073f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d8:	f7fd f9fe 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 80073dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073de:	e014      	b.n	800740a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073e0:	f7fd fa10 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 80073e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073e6:	e010      	b.n	800740a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e8:	4b5a      	ldr	r3, [pc, #360]	; (8007554 <UART_SetConfig+0x594>)
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073ec:	e00d      	b.n	800740a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ee:	f7fd f985 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 80073f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073f4:	e009      	b.n	800740a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073fc:	e005      	b.n	800740a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007408:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8089 	beq.w	8007524 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	4a4e      	ldr	r2, [pc, #312]	; (8007550 <UART_SetConfig+0x590>)
 8007418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800741c:	461a      	mov	r2, r3
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	fbb3 f3f2 	udiv	r3, r3, r2
 8007424:	005a      	lsls	r2, r3, #1
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	441a      	add	r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	fbb2 f3f3 	udiv	r3, r2, r3
 8007436:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	2b0f      	cmp	r3, #15
 800743c:	d916      	bls.n	800746c <UART_SetConfig+0x4ac>
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007444:	d212      	bcs.n	800746c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	b29b      	uxth	r3, r3
 800744a:	f023 030f 	bic.w	r3, r3, #15
 800744e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	085b      	lsrs	r3, r3, #1
 8007454:	b29b      	uxth	r3, r3
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	b29a      	uxth	r2, r3
 800745c:	8bfb      	ldrh	r3, [r7, #30]
 800745e:	4313      	orrs	r3, r2
 8007460:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	8bfa      	ldrh	r2, [r7, #30]
 8007468:	60da      	str	r2, [r3, #12]
 800746a:	e05b      	b.n	8007524 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007472:	e057      	b.n	8007524 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007474:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007478:	2b08      	cmp	r3, #8
 800747a:	d828      	bhi.n	80074ce <UART_SetConfig+0x50e>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0x4c4>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	080074a9 	.word	0x080074a9
 8007488:	080074b1 	.word	0x080074b1
 800748c:	080074b9 	.word	0x080074b9
 8007490:	080074cf 	.word	0x080074cf
 8007494:	080074bf 	.word	0x080074bf
 8007498:	080074cf 	.word	0x080074cf
 800749c:	080074cf 	.word	0x080074cf
 80074a0:	080074cf 	.word	0x080074cf
 80074a4:	080074c7 	.word	0x080074c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a8:	f7fd f996 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 80074ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074ae:	e014      	b.n	80074da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b0:	f7fd f9a8 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 80074b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074b6:	e010      	b.n	80074da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b8:	4b26      	ldr	r3, [pc, #152]	; (8007554 <UART_SetConfig+0x594>)
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074bc:	e00d      	b.n	80074da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074be:	f7fd f91d 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 80074c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074c4:	e009      	b.n	80074da <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074cc:	e005      	b.n	80074da <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074d8:	bf00      	nop
    }

    if (pclk != 0U)
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d021      	beq.n	8007524 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	4a1a      	ldr	r2, [pc, #104]	; (8007550 <UART_SetConfig+0x590>)
 80074e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ea:	461a      	mov	r2, r3
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	441a      	add	r2, r3
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007502:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	2b0f      	cmp	r3, #15
 8007508:	d909      	bls.n	800751e <UART_SetConfig+0x55e>
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007510:	d205      	bcs.n	800751e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	b29a      	uxth	r2, r3
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60da      	str	r2, [r3, #12]
 800751c:	e002      	b.n	8007524 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2201      	movs	r2, #1
 8007528:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2201      	movs	r2, #1
 8007530:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2200      	movs	r2, #0
 8007538:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2200      	movs	r2, #0
 800753e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007540:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007544:	4618      	mov	r0, r3
 8007546:	3730      	adds	r7, #48	; 0x30
 8007548:	46bd      	mov	sp, r7
 800754a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800754e:	bf00      	nop
 8007550:	080092fc 	.word	0x080092fc
 8007554:	00f42400 	.word	0x00f42400

08007558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00a      	beq.n	8007582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00a      	beq.n	80075c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	f003 0308 	and.w	r3, r3, #8
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760e:	f003 0320 	and.w	r3, r3, #32
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d01a      	beq.n	800766e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007656:	d10a      	bne.n	800766e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	605a      	str	r2, [r3, #4]
  }
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076ac:	f7fa fde6 	bl	800227c <HAL_GetTick>
 80076b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d10e      	bne.n	80076de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f82f 	bl	8007732 <UART_WaitOnFlagUntilTimeout>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e025      	b.n	800772a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0304 	and.w	r3, r3, #4
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d10e      	bne.n	800770a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f819 	bl	8007732 <UART_WaitOnFlagUntilTimeout>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e00f      	b.n	800772a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2220      	movs	r2, #32
 800770e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2220      	movs	r2, #32
 8007716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b09c      	sub	sp, #112	; 0x70
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	603b      	str	r3, [r7, #0]
 800773e:	4613      	mov	r3, r2
 8007740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007742:	e0a9      	b.n	8007898 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800774a:	f000 80a5 	beq.w	8007898 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800774e:	f7fa fd95 	bl	800227c <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800775a:	429a      	cmp	r2, r3
 800775c:	d302      	bcc.n	8007764 <UART_WaitOnFlagUntilTimeout+0x32>
 800775e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007760:	2b00      	cmp	r3, #0
 8007762:	d140      	bne.n	80077e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007778:	667b      	str	r3, [r7, #100]	; 0x64
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007784:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e6      	bne.n	8007764 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3308      	adds	r3, #8
 800779c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	f023 0301 	bic.w	r3, r3, #1
 80077ac:	663b      	str	r3, [r7, #96]	; 0x60
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3308      	adds	r3, #8
 80077b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80077b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e5      	bne.n	8007796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e069      	b.n	80078ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d051      	beq.n	8007898 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007802:	d149      	bne.n	8007898 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800780c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007822:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800782c:	637b      	str	r3, [r7, #52]	; 0x34
 800782e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800783a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e6      	bne.n	800780e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	613b      	str	r3, [r7, #16]
   return(result);
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	66bb      	str	r3, [r7, #104]	; 0x68
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007860:	623a      	str	r2, [r7, #32]
 8007862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	69f9      	ldr	r1, [r7, #28]
 8007866:	6a3a      	ldr	r2, [r7, #32]
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	61bb      	str	r3, [r7, #24]
   return(result);
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e5      	bne.n	8007840 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2220      	movs	r2, #32
 8007878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e010      	b.n	80078ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	69da      	ldr	r2, [r3, #28]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	4013      	ands	r3, r2
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	bf0c      	ite	eq
 80078a8:	2301      	moveq	r3, #1
 80078aa:	2300      	movne	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	461a      	mov	r2, r3
 80078b0:	79fb      	ldrb	r3, [r7, #7]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	f43f af46 	beq.w	8007744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3770      	adds	r7, #112	; 0x70
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e027      	b.n	8007928 <HAL_UARTEx_DisableFifoMode+0x66>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2224      	movs	r2, #36	; 0x24
 80078e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 0201 	bic.w	r2, r2, #1
 80078fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007906:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007948:	2302      	movs	r3, #2
 800794a:	e02d      	b.n	80079a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2224      	movs	r2, #36	; 0x24
 8007958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0201 	bic.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f84f 	bl	8007a2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d101      	bne.n	80079c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079c4:	2302      	movs	r3, #2
 80079c6:	e02d      	b.n	8007a24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2224      	movs	r2, #36	; 0x24
 80079d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0201 	bic.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f811 	bl	8007a2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d108      	bne.n	8007a4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a4c:	e031      	b.n	8007ab2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a4e:	2308      	movs	r3, #8
 8007a50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a52:	2308      	movs	r3, #8
 8007a54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	0e5b      	lsrs	r3, r3, #25
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	0f5b      	lsrs	r3, r3, #29
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	7b3a      	ldrb	r2, [r7, #12]
 8007a7a:	4911      	ldr	r1, [pc, #68]	; (8007ac0 <UARTEx_SetNbDataToProcess+0x94>)
 8007a7c:	5c8a      	ldrb	r2, [r1, r2]
 8007a7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a82:	7b3a      	ldrb	r2, [r7, #12]
 8007a84:	490f      	ldr	r1, [pc, #60]	; (8007ac4 <UARTEx_SetNbDataToProcess+0x98>)
 8007a86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a88:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	7b7a      	ldrb	r2, [r7, #13]
 8007a98:	4909      	ldr	r1, [pc, #36]	; (8007ac0 <UARTEx_SetNbDataToProcess+0x94>)
 8007a9a:	5c8a      	ldrb	r2, [r1, r2]
 8007a9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007aa0:	7b7a      	ldrb	r2, [r7, #13]
 8007aa2:	4908      	ldr	r1, [pc, #32]	; (8007ac4 <UARTEx_SetNbDataToProcess+0x98>)
 8007aa4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ab2:	bf00      	nop
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	08009314 	.word	0x08009314
 8007ac4:	0800931c 	.word	0x0800931c

08007ac8 <__errno>:
 8007ac8:	4b01      	ldr	r3, [pc, #4]	; (8007ad0 <__errno+0x8>)
 8007aca:	6818      	ldr	r0, [r3, #0]
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	2000000c 	.word	0x2000000c

08007ad4 <__libc_init_array>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	4d0d      	ldr	r5, [pc, #52]	; (8007b0c <__libc_init_array+0x38>)
 8007ad8:	4c0d      	ldr	r4, [pc, #52]	; (8007b10 <__libc_init_array+0x3c>)
 8007ada:	1b64      	subs	r4, r4, r5
 8007adc:	10a4      	asrs	r4, r4, #2
 8007ade:	2600      	movs	r6, #0
 8007ae0:	42a6      	cmp	r6, r4
 8007ae2:	d109      	bne.n	8007af8 <__libc_init_array+0x24>
 8007ae4:	4d0b      	ldr	r5, [pc, #44]	; (8007b14 <__libc_init_array+0x40>)
 8007ae6:	4c0c      	ldr	r4, [pc, #48]	; (8007b18 <__libc_init_array+0x44>)
 8007ae8:	f001 fbe4 	bl	80092b4 <_init>
 8007aec:	1b64      	subs	r4, r4, r5
 8007aee:	10a4      	asrs	r4, r4, #2
 8007af0:	2600      	movs	r6, #0
 8007af2:	42a6      	cmp	r6, r4
 8007af4:	d105      	bne.n	8007b02 <__libc_init_array+0x2e>
 8007af6:	bd70      	pop	{r4, r5, r6, pc}
 8007af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007afc:	4798      	blx	r3
 8007afe:	3601      	adds	r6, #1
 8007b00:	e7ee      	b.n	8007ae0 <__libc_init_array+0xc>
 8007b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b06:	4798      	blx	r3
 8007b08:	3601      	adds	r6, #1
 8007b0a:	e7f2      	b.n	8007af2 <__libc_init_array+0x1e>
 8007b0c:	08009390 	.word	0x08009390
 8007b10:	08009390 	.word	0x08009390
 8007b14:	08009390 	.word	0x08009390
 8007b18:	08009394 	.word	0x08009394

08007b1c <memset>:
 8007b1c:	4402      	add	r2, r0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d100      	bne.n	8007b26 <memset+0xa>
 8007b24:	4770      	bx	lr
 8007b26:	f803 1b01 	strb.w	r1, [r3], #1
 8007b2a:	e7f9      	b.n	8007b20 <memset+0x4>

08007b2c <siprintf>:
 8007b2c:	b40e      	push	{r1, r2, r3}
 8007b2e:	b500      	push	{lr}
 8007b30:	b09c      	sub	sp, #112	; 0x70
 8007b32:	ab1d      	add	r3, sp, #116	; 0x74
 8007b34:	9002      	str	r0, [sp, #8]
 8007b36:	9006      	str	r0, [sp, #24]
 8007b38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b3c:	4809      	ldr	r0, [pc, #36]	; (8007b64 <siprintf+0x38>)
 8007b3e:	9107      	str	r1, [sp, #28]
 8007b40:	9104      	str	r1, [sp, #16]
 8007b42:	4909      	ldr	r1, [pc, #36]	; (8007b68 <siprintf+0x3c>)
 8007b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b48:	9105      	str	r1, [sp, #20]
 8007b4a:	6800      	ldr	r0, [r0, #0]
 8007b4c:	9301      	str	r3, [sp, #4]
 8007b4e:	a902      	add	r1, sp, #8
 8007b50:	f000 f876 	bl	8007c40 <_svfiprintf_r>
 8007b54:	9b02      	ldr	r3, [sp, #8]
 8007b56:	2200      	movs	r2, #0
 8007b58:	701a      	strb	r2, [r3, #0]
 8007b5a:	b01c      	add	sp, #112	; 0x70
 8007b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b60:	b003      	add	sp, #12
 8007b62:	4770      	bx	lr
 8007b64:	2000000c 	.word	0x2000000c
 8007b68:	ffff0208 	.word	0xffff0208

08007b6c <strcat>:
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	4602      	mov	r2, r0
 8007b70:	7814      	ldrb	r4, [r2, #0]
 8007b72:	4613      	mov	r3, r2
 8007b74:	3201      	adds	r2, #1
 8007b76:	2c00      	cmp	r4, #0
 8007b78:	d1fa      	bne.n	8007b70 <strcat+0x4>
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	d1f9      	bne.n	8007b7c <strcat+0x10>
 8007b88:	bd10      	pop	{r4, pc}

08007b8a <__ssputs_r>:
 8007b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b8e:	688e      	ldr	r6, [r1, #8]
 8007b90:	429e      	cmp	r6, r3
 8007b92:	4682      	mov	sl, r0
 8007b94:	460c      	mov	r4, r1
 8007b96:	4690      	mov	r8, r2
 8007b98:	461f      	mov	r7, r3
 8007b9a:	d838      	bhi.n	8007c0e <__ssputs_r+0x84>
 8007b9c:	898a      	ldrh	r2, [r1, #12]
 8007b9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ba2:	d032      	beq.n	8007c0a <__ssputs_r+0x80>
 8007ba4:	6825      	ldr	r5, [r4, #0]
 8007ba6:	6909      	ldr	r1, [r1, #16]
 8007ba8:	eba5 0901 	sub.w	r9, r5, r1
 8007bac:	6965      	ldr	r5, [r4, #20]
 8007bae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	444b      	add	r3, r9
 8007bba:	106d      	asrs	r5, r5, #1
 8007bbc:	429d      	cmp	r5, r3
 8007bbe:	bf38      	it	cc
 8007bc0:	461d      	movcc	r5, r3
 8007bc2:	0553      	lsls	r3, r2, #21
 8007bc4:	d531      	bpl.n	8007c2a <__ssputs_r+0xa0>
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	f000 fb62 	bl	8008290 <_malloc_r>
 8007bcc:	4606      	mov	r6, r0
 8007bce:	b950      	cbnz	r0, 8007be6 <__ssputs_r+0x5c>
 8007bd0:	230c      	movs	r3, #12
 8007bd2:	f8ca 3000 	str.w	r3, [sl]
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bdc:	81a3      	strh	r3, [r4, #12]
 8007bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be6:	6921      	ldr	r1, [r4, #16]
 8007be8:	464a      	mov	r2, r9
 8007bea:	f000 fabd 	bl	8008168 <memcpy>
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf8:	81a3      	strh	r3, [r4, #12]
 8007bfa:	6126      	str	r6, [r4, #16]
 8007bfc:	6165      	str	r5, [r4, #20]
 8007bfe:	444e      	add	r6, r9
 8007c00:	eba5 0509 	sub.w	r5, r5, r9
 8007c04:	6026      	str	r6, [r4, #0]
 8007c06:	60a5      	str	r5, [r4, #8]
 8007c08:	463e      	mov	r6, r7
 8007c0a:	42be      	cmp	r6, r7
 8007c0c:	d900      	bls.n	8007c10 <__ssputs_r+0x86>
 8007c0e:	463e      	mov	r6, r7
 8007c10:	6820      	ldr	r0, [r4, #0]
 8007c12:	4632      	mov	r2, r6
 8007c14:	4641      	mov	r1, r8
 8007c16:	f000 fab5 	bl	8008184 <memmove>
 8007c1a:	68a3      	ldr	r3, [r4, #8]
 8007c1c:	1b9b      	subs	r3, r3, r6
 8007c1e:	60a3      	str	r3, [r4, #8]
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	4433      	add	r3, r6
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	2000      	movs	r0, #0
 8007c28:	e7db      	b.n	8007be2 <__ssputs_r+0x58>
 8007c2a:	462a      	mov	r2, r5
 8007c2c:	f000 fba4 	bl	8008378 <_realloc_r>
 8007c30:	4606      	mov	r6, r0
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d1e1      	bne.n	8007bfa <__ssputs_r+0x70>
 8007c36:	6921      	ldr	r1, [r4, #16]
 8007c38:	4650      	mov	r0, sl
 8007c3a:	f000 fabd 	bl	80081b8 <_free_r>
 8007c3e:	e7c7      	b.n	8007bd0 <__ssputs_r+0x46>

08007c40 <_svfiprintf_r>:
 8007c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	4698      	mov	r8, r3
 8007c46:	898b      	ldrh	r3, [r1, #12]
 8007c48:	061b      	lsls	r3, r3, #24
 8007c4a:	b09d      	sub	sp, #116	; 0x74
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	460d      	mov	r5, r1
 8007c50:	4614      	mov	r4, r2
 8007c52:	d50e      	bpl.n	8007c72 <_svfiprintf_r+0x32>
 8007c54:	690b      	ldr	r3, [r1, #16]
 8007c56:	b963      	cbnz	r3, 8007c72 <_svfiprintf_r+0x32>
 8007c58:	2140      	movs	r1, #64	; 0x40
 8007c5a:	f000 fb19 	bl	8008290 <_malloc_r>
 8007c5e:	6028      	str	r0, [r5, #0]
 8007c60:	6128      	str	r0, [r5, #16]
 8007c62:	b920      	cbnz	r0, 8007c6e <_svfiprintf_r+0x2e>
 8007c64:	230c      	movs	r3, #12
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c6c:	e0d1      	b.n	8007e12 <_svfiprintf_r+0x1d2>
 8007c6e:	2340      	movs	r3, #64	; 0x40
 8007c70:	616b      	str	r3, [r5, #20]
 8007c72:	2300      	movs	r3, #0
 8007c74:	9309      	str	r3, [sp, #36]	; 0x24
 8007c76:	2320      	movs	r3, #32
 8007c78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c80:	2330      	movs	r3, #48	; 0x30
 8007c82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e2c <_svfiprintf_r+0x1ec>
 8007c86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c8a:	f04f 0901 	mov.w	r9, #1
 8007c8e:	4623      	mov	r3, r4
 8007c90:	469a      	mov	sl, r3
 8007c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c96:	b10a      	cbz	r2, 8007c9c <_svfiprintf_r+0x5c>
 8007c98:	2a25      	cmp	r2, #37	; 0x25
 8007c9a:	d1f9      	bne.n	8007c90 <_svfiprintf_r+0x50>
 8007c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007ca0:	d00b      	beq.n	8007cba <_svfiprintf_r+0x7a>
 8007ca2:	465b      	mov	r3, fp
 8007ca4:	4622      	mov	r2, r4
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f7ff ff6e 	bl	8007b8a <__ssputs_r>
 8007cae:	3001      	adds	r0, #1
 8007cb0:	f000 80aa 	beq.w	8007e08 <_svfiprintf_r+0x1c8>
 8007cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb6:	445a      	add	r2, fp
 8007cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8007cba:	f89a 3000 	ldrb.w	r3, [sl]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 80a2 	beq.w	8007e08 <_svfiprintf_r+0x1c8>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cce:	f10a 0a01 	add.w	sl, sl, #1
 8007cd2:	9304      	str	r3, [sp, #16]
 8007cd4:	9307      	str	r3, [sp, #28]
 8007cd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cda:	931a      	str	r3, [sp, #104]	; 0x68
 8007cdc:	4654      	mov	r4, sl
 8007cde:	2205      	movs	r2, #5
 8007ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce4:	4851      	ldr	r0, [pc, #324]	; (8007e2c <_svfiprintf_r+0x1ec>)
 8007ce6:	f7f8 faa3 	bl	8000230 <memchr>
 8007cea:	9a04      	ldr	r2, [sp, #16]
 8007cec:	b9d8      	cbnz	r0, 8007d26 <_svfiprintf_r+0xe6>
 8007cee:	06d0      	lsls	r0, r2, #27
 8007cf0:	bf44      	itt	mi
 8007cf2:	2320      	movmi	r3, #32
 8007cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cf8:	0711      	lsls	r1, r2, #28
 8007cfa:	bf44      	itt	mi
 8007cfc:	232b      	movmi	r3, #43	; 0x2b
 8007cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d02:	f89a 3000 	ldrb.w	r3, [sl]
 8007d06:	2b2a      	cmp	r3, #42	; 0x2a
 8007d08:	d015      	beq.n	8007d36 <_svfiprintf_r+0xf6>
 8007d0a:	9a07      	ldr	r2, [sp, #28]
 8007d0c:	4654      	mov	r4, sl
 8007d0e:	2000      	movs	r0, #0
 8007d10:	f04f 0c0a 	mov.w	ip, #10
 8007d14:	4621      	mov	r1, r4
 8007d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d1a:	3b30      	subs	r3, #48	; 0x30
 8007d1c:	2b09      	cmp	r3, #9
 8007d1e:	d94e      	bls.n	8007dbe <_svfiprintf_r+0x17e>
 8007d20:	b1b0      	cbz	r0, 8007d50 <_svfiprintf_r+0x110>
 8007d22:	9207      	str	r2, [sp, #28]
 8007d24:	e014      	b.n	8007d50 <_svfiprintf_r+0x110>
 8007d26:	eba0 0308 	sub.w	r3, r0, r8
 8007d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	9304      	str	r3, [sp, #16]
 8007d32:	46a2      	mov	sl, r4
 8007d34:	e7d2      	b.n	8007cdc <_svfiprintf_r+0x9c>
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	1d19      	adds	r1, r3, #4
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	9103      	str	r1, [sp, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	bfbb      	ittet	lt
 8007d42:	425b      	neglt	r3, r3
 8007d44:	f042 0202 	orrlt.w	r2, r2, #2
 8007d48:	9307      	strge	r3, [sp, #28]
 8007d4a:	9307      	strlt	r3, [sp, #28]
 8007d4c:	bfb8      	it	lt
 8007d4e:	9204      	strlt	r2, [sp, #16]
 8007d50:	7823      	ldrb	r3, [r4, #0]
 8007d52:	2b2e      	cmp	r3, #46	; 0x2e
 8007d54:	d10c      	bne.n	8007d70 <_svfiprintf_r+0x130>
 8007d56:	7863      	ldrb	r3, [r4, #1]
 8007d58:	2b2a      	cmp	r3, #42	; 0x2a
 8007d5a:	d135      	bne.n	8007dc8 <_svfiprintf_r+0x188>
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	1d1a      	adds	r2, r3, #4
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	9203      	str	r2, [sp, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	bfb8      	it	lt
 8007d68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d6c:	3402      	adds	r4, #2
 8007d6e:	9305      	str	r3, [sp, #20]
 8007d70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e3c <_svfiprintf_r+0x1fc>
 8007d74:	7821      	ldrb	r1, [r4, #0]
 8007d76:	2203      	movs	r2, #3
 8007d78:	4650      	mov	r0, sl
 8007d7a:	f7f8 fa59 	bl	8000230 <memchr>
 8007d7e:	b140      	cbz	r0, 8007d92 <_svfiprintf_r+0x152>
 8007d80:	2340      	movs	r3, #64	; 0x40
 8007d82:	eba0 000a 	sub.w	r0, r0, sl
 8007d86:	fa03 f000 	lsl.w	r0, r3, r0
 8007d8a:	9b04      	ldr	r3, [sp, #16]
 8007d8c:	4303      	orrs	r3, r0
 8007d8e:	3401      	adds	r4, #1
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d96:	4826      	ldr	r0, [pc, #152]	; (8007e30 <_svfiprintf_r+0x1f0>)
 8007d98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d9c:	2206      	movs	r2, #6
 8007d9e:	f7f8 fa47 	bl	8000230 <memchr>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d038      	beq.n	8007e18 <_svfiprintf_r+0x1d8>
 8007da6:	4b23      	ldr	r3, [pc, #140]	; (8007e34 <_svfiprintf_r+0x1f4>)
 8007da8:	bb1b      	cbnz	r3, 8007df2 <_svfiprintf_r+0x1b2>
 8007daa:	9b03      	ldr	r3, [sp, #12]
 8007dac:	3307      	adds	r3, #7
 8007dae:	f023 0307 	bic.w	r3, r3, #7
 8007db2:	3308      	adds	r3, #8
 8007db4:	9303      	str	r3, [sp, #12]
 8007db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db8:	4433      	add	r3, r6
 8007dba:	9309      	str	r3, [sp, #36]	; 0x24
 8007dbc:	e767      	b.n	8007c8e <_svfiprintf_r+0x4e>
 8007dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	e7a5      	b.n	8007d14 <_svfiprintf_r+0xd4>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	3401      	adds	r4, #1
 8007dcc:	9305      	str	r3, [sp, #20]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	f04f 0c0a 	mov.w	ip, #10
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dda:	3a30      	subs	r2, #48	; 0x30
 8007ddc:	2a09      	cmp	r2, #9
 8007dde:	d903      	bls.n	8007de8 <_svfiprintf_r+0x1a8>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0c5      	beq.n	8007d70 <_svfiprintf_r+0x130>
 8007de4:	9105      	str	r1, [sp, #20]
 8007de6:	e7c3      	b.n	8007d70 <_svfiprintf_r+0x130>
 8007de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dec:	4604      	mov	r4, r0
 8007dee:	2301      	movs	r3, #1
 8007df0:	e7f0      	b.n	8007dd4 <_svfiprintf_r+0x194>
 8007df2:	ab03      	add	r3, sp, #12
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	462a      	mov	r2, r5
 8007df8:	4b0f      	ldr	r3, [pc, #60]	; (8007e38 <_svfiprintf_r+0x1f8>)
 8007dfa:	a904      	add	r1, sp, #16
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f3af 8000 	nop.w
 8007e02:	1c42      	adds	r2, r0, #1
 8007e04:	4606      	mov	r6, r0
 8007e06:	d1d6      	bne.n	8007db6 <_svfiprintf_r+0x176>
 8007e08:	89ab      	ldrh	r3, [r5, #12]
 8007e0a:	065b      	lsls	r3, r3, #25
 8007e0c:	f53f af2c 	bmi.w	8007c68 <_svfiprintf_r+0x28>
 8007e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e12:	b01d      	add	sp, #116	; 0x74
 8007e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e18:	ab03      	add	r3, sp, #12
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	462a      	mov	r2, r5
 8007e1e:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <_svfiprintf_r+0x1f8>)
 8007e20:	a904      	add	r1, sp, #16
 8007e22:	4638      	mov	r0, r7
 8007e24:	f000 f87a 	bl	8007f1c <_printf_i>
 8007e28:	e7eb      	b.n	8007e02 <_svfiprintf_r+0x1c2>
 8007e2a:	bf00      	nop
 8007e2c:	08009324 	.word	0x08009324
 8007e30:	0800932e 	.word	0x0800932e
 8007e34:	00000000 	.word	0x00000000
 8007e38:	08007b8b 	.word	0x08007b8b
 8007e3c:	0800932a 	.word	0x0800932a

08007e40 <_printf_common>:
 8007e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e44:	4616      	mov	r6, r2
 8007e46:	4699      	mov	r9, r3
 8007e48:	688a      	ldr	r2, [r1, #8]
 8007e4a:	690b      	ldr	r3, [r1, #16]
 8007e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e50:	4293      	cmp	r3, r2
 8007e52:	bfb8      	it	lt
 8007e54:	4613      	movlt	r3, r2
 8007e56:	6033      	str	r3, [r6, #0]
 8007e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	b10a      	cbz	r2, 8007e66 <_printf_common+0x26>
 8007e62:	3301      	adds	r3, #1
 8007e64:	6033      	str	r3, [r6, #0]
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	0699      	lsls	r1, r3, #26
 8007e6a:	bf42      	ittt	mi
 8007e6c:	6833      	ldrmi	r3, [r6, #0]
 8007e6e:	3302      	addmi	r3, #2
 8007e70:	6033      	strmi	r3, [r6, #0]
 8007e72:	6825      	ldr	r5, [r4, #0]
 8007e74:	f015 0506 	ands.w	r5, r5, #6
 8007e78:	d106      	bne.n	8007e88 <_printf_common+0x48>
 8007e7a:	f104 0a19 	add.w	sl, r4, #25
 8007e7e:	68e3      	ldr	r3, [r4, #12]
 8007e80:	6832      	ldr	r2, [r6, #0]
 8007e82:	1a9b      	subs	r3, r3, r2
 8007e84:	42ab      	cmp	r3, r5
 8007e86:	dc26      	bgt.n	8007ed6 <_printf_common+0x96>
 8007e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e8c:	1e13      	subs	r3, r2, #0
 8007e8e:	6822      	ldr	r2, [r4, #0]
 8007e90:	bf18      	it	ne
 8007e92:	2301      	movne	r3, #1
 8007e94:	0692      	lsls	r2, r2, #26
 8007e96:	d42b      	bmi.n	8007ef0 <_printf_common+0xb0>
 8007e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	47c0      	blx	r8
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	d01e      	beq.n	8007ee4 <_printf_common+0xa4>
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	68e5      	ldr	r5, [r4, #12]
 8007eaa:	6832      	ldr	r2, [r6, #0]
 8007eac:	f003 0306 	and.w	r3, r3, #6
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	bf08      	it	eq
 8007eb4:	1aad      	subeq	r5, r5, r2
 8007eb6:	68a3      	ldr	r3, [r4, #8]
 8007eb8:	6922      	ldr	r2, [r4, #16]
 8007eba:	bf0c      	ite	eq
 8007ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ec0:	2500      	movne	r5, #0
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	bfc4      	itt	gt
 8007ec6:	1a9b      	subgt	r3, r3, r2
 8007ec8:	18ed      	addgt	r5, r5, r3
 8007eca:	2600      	movs	r6, #0
 8007ecc:	341a      	adds	r4, #26
 8007ece:	42b5      	cmp	r5, r6
 8007ed0:	d11a      	bne.n	8007f08 <_printf_common+0xc8>
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e008      	b.n	8007ee8 <_printf_common+0xa8>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4652      	mov	r2, sl
 8007eda:	4649      	mov	r1, r9
 8007edc:	4638      	mov	r0, r7
 8007ede:	47c0      	blx	r8
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d103      	bne.n	8007eec <_printf_common+0xac>
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eec:	3501      	adds	r5, #1
 8007eee:	e7c6      	b.n	8007e7e <_printf_common+0x3e>
 8007ef0:	18e1      	adds	r1, r4, r3
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	2030      	movs	r0, #48	; 0x30
 8007ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007efa:	4422      	add	r2, r4
 8007efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f04:	3302      	adds	r3, #2
 8007f06:	e7c7      	b.n	8007e98 <_printf_common+0x58>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	4638      	mov	r0, r7
 8007f10:	47c0      	blx	r8
 8007f12:	3001      	adds	r0, #1
 8007f14:	d0e6      	beq.n	8007ee4 <_printf_common+0xa4>
 8007f16:	3601      	adds	r6, #1
 8007f18:	e7d9      	b.n	8007ece <_printf_common+0x8e>
	...

08007f1c <_printf_i>:
 8007f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f20:	7e0f      	ldrb	r7, [r1, #24]
 8007f22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f24:	2f78      	cmp	r7, #120	; 0x78
 8007f26:	4691      	mov	r9, r2
 8007f28:	4680      	mov	r8, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	469a      	mov	sl, r3
 8007f2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f32:	d807      	bhi.n	8007f44 <_printf_i+0x28>
 8007f34:	2f62      	cmp	r7, #98	; 0x62
 8007f36:	d80a      	bhi.n	8007f4e <_printf_i+0x32>
 8007f38:	2f00      	cmp	r7, #0
 8007f3a:	f000 80d8 	beq.w	80080ee <_printf_i+0x1d2>
 8007f3e:	2f58      	cmp	r7, #88	; 0x58
 8007f40:	f000 80a3 	beq.w	800808a <_printf_i+0x16e>
 8007f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f4c:	e03a      	b.n	8007fc4 <_printf_i+0xa8>
 8007f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f52:	2b15      	cmp	r3, #21
 8007f54:	d8f6      	bhi.n	8007f44 <_printf_i+0x28>
 8007f56:	a101      	add	r1, pc, #4	; (adr r1, 8007f5c <_printf_i+0x40>)
 8007f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f5c:	08007fb5 	.word	0x08007fb5
 8007f60:	08007fc9 	.word	0x08007fc9
 8007f64:	08007f45 	.word	0x08007f45
 8007f68:	08007f45 	.word	0x08007f45
 8007f6c:	08007f45 	.word	0x08007f45
 8007f70:	08007f45 	.word	0x08007f45
 8007f74:	08007fc9 	.word	0x08007fc9
 8007f78:	08007f45 	.word	0x08007f45
 8007f7c:	08007f45 	.word	0x08007f45
 8007f80:	08007f45 	.word	0x08007f45
 8007f84:	08007f45 	.word	0x08007f45
 8007f88:	080080d5 	.word	0x080080d5
 8007f8c:	08007ff9 	.word	0x08007ff9
 8007f90:	080080b7 	.word	0x080080b7
 8007f94:	08007f45 	.word	0x08007f45
 8007f98:	08007f45 	.word	0x08007f45
 8007f9c:	080080f7 	.word	0x080080f7
 8007fa0:	08007f45 	.word	0x08007f45
 8007fa4:	08007ff9 	.word	0x08007ff9
 8007fa8:	08007f45 	.word	0x08007f45
 8007fac:	08007f45 	.word	0x08007f45
 8007fb0:	080080bf 	.word	0x080080bf
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	1d1a      	adds	r2, r3, #4
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	602a      	str	r2, [r5, #0]
 8007fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e0a3      	b.n	8008110 <_printf_i+0x1f4>
 8007fc8:	6820      	ldr	r0, [r4, #0]
 8007fca:	6829      	ldr	r1, [r5, #0]
 8007fcc:	0606      	lsls	r6, r0, #24
 8007fce:	f101 0304 	add.w	r3, r1, #4
 8007fd2:	d50a      	bpl.n	8007fea <_printf_i+0xce>
 8007fd4:	680e      	ldr	r6, [r1, #0]
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	2e00      	cmp	r6, #0
 8007fda:	da03      	bge.n	8007fe4 <_printf_i+0xc8>
 8007fdc:	232d      	movs	r3, #45	; 0x2d
 8007fde:	4276      	negs	r6, r6
 8007fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fe4:	485e      	ldr	r0, [pc, #376]	; (8008160 <_printf_i+0x244>)
 8007fe6:	230a      	movs	r3, #10
 8007fe8:	e019      	b.n	800801e <_printf_i+0x102>
 8007fea:	680e      	ldr	r6, [r1, #0]
 8007fec:	602b      	str	r3, [r5, #0]
 8007fee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ff2:	bf18      	it	ne
 8007ff4:	b236      	sxthne	r6, r6
 8007ff6:	e7ef      	b.n	8007fd8 <_printf_i+0xbc>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	6820      	ldr	r0, [r4, #0]
 8007ffc:	1d19      	adds	r1, r3, #4
 8007ffe:	6029      	str	r1, [r5, #0]
 8008000:	0601      	lsls	r1, r0, #24
 8008002:	d501      	bpl.n	8008008 <_printf_i+0xec>
 8008004:	681e      	ldr	r6, [r3, #0]
 8008006:	e002      	b.n	800800e <_printf_i+0xf2>
 8008008:	0646      	lsls	r6, r0, #25
 800800a:	d5fb      	bpl.n	8008004 <_printf_i+0xe8>
 800800c:	881e      	ldrh	r6, [r3, #0]
 800800e:	4854      	ldr	r0, [pc, #336]	; (8008160 <_printf_i+0x244>)
 8008010:	2f6f      	cmp	r7, #111	; 0x6f
 8008012:	bf0c      	ite	eq
 8008014:	2308      	moveq	r3, #8
 8008016:	230a      	movne	r3, #10
 8008018:	2100      	movs	r1, #0
 800801a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800801e:	6865      	ldr	r5, [r4, #4]
 8008020:	60a5      	str	r5, [r4, #8]
 8008022:	2d00      	cmp	r5, #0
 8008024:	bfa2      	ittt	ge
 8008026:	6821      	ldrge	r1, [r4, #0]
 8008028:	f021 0104 	bicge.w	r1, r1, #4
 800802c:	6021      	strge	r1, [r4, #0]
 800802e:	b90e      	cbnz	r6, 8008034 <_printf_i+0x118>
 8008030:	2d00      	cmp	r5, #0
 8008032:	d04d      	beq.n	80080d0 <_printf_i+0x1b4>
 8008034:	4615      	mov	r5, r2
 8008036:	fbb6 f1f3 	udiv	r1, r6, r3
 800803a:	fb03 6711 	mls	r7, r3, r1, r6
 800803e:	5dc7      	ldrb	r7, [r0, r7]
 8008040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008044:	4637      	mov	r7, r6
 8008046:	42bb      	cmp	r3, r7
 8008048:	460e      	mov	r6, r1
 800804a:	d9f4      	bls.n	8008036 <_printf_i+0x11a>
 800804c:	2b08      	cmp	r3, #8
 800804e:	d10b      	bne.n	8008068 <_printf_i+0x14c>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	07de      	lsls	r6, r3, #31
 8008054:	d508      	bpl.n	8008068 <_printf_i+0x14c>
 8008056:	6923      	ldr	r3, [r4, #16]
 8008058:	6861      	ldr	r1, [r4, #4]
 800805a:	4299      	cmp	r1, r3
 800805c:	bfde      	ittt	le
 800805e:	2330      	movle	r3, #48	; 0x30
 8008060:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008064:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008068:	1b52      	subs	r2, r2, r5
 800806a:	6122      	str	r2, [r4, #16]
 800806c:	f8cd a000 	str.w	sl, [sp]
 8008070:	464b      	mov	r3, r9
 8008072:	aa03      	add	r2, sp, #12
 8008074:	4621      	mov	r1, r4
 8008076:	4640      	mov	r0, r8
 8008078:	f7ff fee2 	bl	8007e40 <_printf_common>
 800807c:	3001      	adds	r0, #1
 800807e:	d14c      	bne.n	800811a <_printf_i+0x1fe>
 8008080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008084:	b004      	add	sp, #16
 8008086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808a:	4835      	ldr	r0, [pc, #212]	; (8008160 <_printf_i+0x244>)
 800808c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008090:	6829      	ldr	r1, [r5, #0]
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	f851 6b04 	ldr.w	r6, [r1], #4
 8008098:	6029      	str	r1, [r5, #0]
 800809a:	061d      	lsls	r5, r3, #24
 800809c:	d514      	bpl.n	80080c8 <_printf_i+0x1ac>
 800809e:	07df      	lsls	r7, r3, #31
 80080a0:	bf44      	itt	mi
 80080a2:	f043 0320 	orrmi.w	r3, r3, #32
 80080a6:	6023      	strmi	r3, [r4, #0]
 80080a8:	b91e      	cbnz	r6, 80080b2 <_printf_i+0x196>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	f023 0320 	bic.w	r3, r3, #32
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	2310      	movs	r3, #16
 80080b4:	e7b0      	b.n	8008018 <_printf_i+0xfc>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	f043 0320 	orr.w	r3, r3, #32
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	2378      	movs	r3, #120	; 0x78
 80080c0:	4828      	ldr	r0, [pc, #160]	; (8008164 <_printf_i+0x248>)
 80080c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080c6:	e7e3      	b.n	8008090 <_printf_i+0x174>
 80080c8:	0659      	lsls	r1, r3, #25
 80080ca:	bf48      	it	mi
 80080cc:	b2b6      	uxthmi	r6, r6
 80080ce:	e7e6      	b.n	800809e <_printf_i+0x182>
 80080d0:	4615      	mov	r5, r2
 80080d2:	e7bb      	b.n	800804c <_printf_i+0x130>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	6826      	ldr	r6, [r4, #0]
 80080d8:	6961      	ldr	r1, [r4, #20]
 80080da:	1d18      	adds	r0, r3, #4
 80080dc:	6028      	str	r0, [r5, #0]
 80080de:	0635      	lsls	r5, r6, #24
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	d501      	bpl.n	80080e8 <_printf_i+0x1cc>
 80080e4:	6019      	str	r1, [r3, #0]
 80080e6:	e002      	b.n	80080ee <_printf_i+0x1d2>
 80080e8:	0670      	lsls	r0, r6, #25
 80080ea:	d5fb      	bpl.n	80080e4 <_printf_i+0x1c8>
 80080ec:	8019      	strh	r1, [r3, #0]
 80080ee:	2300      	movs	r3, #0
 80080f0:	6123      	str	r3, [r4, #16]
 80080f2:	4615      	mov	r5, r2
 80080f4:	e7ba      	b.n	800806c <_printf_i+0x150>
 80080f6:	682b      	ldr	r3, [r5, #0]
 80080f8:	1d1a      	adds	r2, r3, #4
 80080fa:	602a      	str	r2, [r5, #0]
 80080fc:	681d      	ldr	r5, [r3, #0]
 80080fe:	6862      	ldr	r2, [r4, #4]
 8008100:	2100      	movs	r1, #0
 8008102:	4628      	mov	r0, r5
 8008104:	f7f8 f894 	bl	8000230 <memchr>
 8008108:	b108      	cbz	r0, 800810e <_printf_i+0x1f2>
 800810a:	1b40      	subs	r0, r0, r5
 800810c:	6060      	str	r0, [r4, #4]
 800810e:	6863      	ldr	r3, [r4, #4]
 8008110:	6123      	str	r3, [r4, #16]
 8008112:	2300      	movs	r3, #0
 8008114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008118:	e7a8      	b.n	800806c <_printf_i+0x150>
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	462a      	mov	r2, r5
 800811e:	4649      	mov	r1, r9
 8008120:	4640      	mov	r0, r8
 8008122:	47d0      	blx	sl
 8008124:	3001      	adds	r0, #1
 8008126:	d0ab      	beq.n	8008080 <_printf_i+0x164>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	079b      	lsls	r3, r3, #30
 800812c:	d413      	bmi.n	8008156 <_printf_i+0x23a>
 800812e:	68e0      	ldr	r0, [r4, #12]
 8008130:	9b03      	ldr	r3, [sp, #12]
 8008132:	4298      	cmp	r0, r3
 8008134:	bfb8      	it	lt
 8008136:	4618      	movlt	r0, r3
 8008138:	e7a4      	b.n	8008084 <_printf_i+0x168>
 800813a:	2301      	movs	r3, #1
 800813c:	4632      	mov	r2, r6
 800813e:	4649      	mov	r1, r9
 8008140:	4640      	mov	r0, r8
 8008142:	47d0      	blx	sl
 8008144:	3001      	adds	r0, #1
 8008146:	d09b      	beq.n	8008080 <_printf_i+0x164>
 8008148:	3501      	adds	r5, #1
 800814a:	68e3      	ldr	r3, [r4, #12]
 800814c:	9903      	ldr	r1, [sp, #12]
 800814e:	1a5b      	subs	r3, r3, r1
 8008150:	42ab      	cmp	r3, r5
 8008152:	dcf2      	bgt.n	800813a <_printf_i+0x21e>
 8008154:	e7eb      	b.n	800812e <_printf_i+0x212>
 8008156:	2500      	movs	r5, #0
 8008158:	f104 0619 	add.w	r6, r4, #25
 800815c:	e7f5      	b.n	800814a <_printf_i+0x22e>
 800815e:	bf00      	nop
 8008160:	08009335 	.word	0x08009335
 8008164:	08009346 	.word	0x08009346

08008168 <memcpy>:
 8008168:	440a      	add	r2, r1
 800816a:	4291      	cmp	r1, r2
 800816c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008170:	d100      	bne.n	8008174 <memcpy+0xc>
 8008172:	4770      	bx	lr
 8008174:	b510      	push	{r4, lr}
 8008176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800817a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800817e:	4291      	cmp	r1, r2
 8008180:	d1f9      	bne.n	8008176 <memcpy+0xe>
 8008182:	bd10      	pop	{r4, pc}

08008184 <memmove>:
 8008184:	4288      	cmp	r0, r1
 8008186:	b510      	push	{r4, lr}
 8008188:	eb01 0402 	add.w	r4, r1, r2
 800818c:	d902      	bls.n	8008194 <memmove+0x10>
 800818e:	4284      	cmp	r4, r0
 8008190:	4623      	mov	r3, r4
 8008192:	d807      	bhi.n	80081a4 <memmove+0x20>
 8008194:	1e43      	subs	r3, r0, #1
 8008196:	42a1      	cmp	r1, r4
 8008198:	d008      	beq.n	80081ac <memmove+0x28>
 800819a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800819e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081a2:	e7f8      	b.n	8008196 <memmove+0x12>
 80081a4:	4402      	add	r2, r0
 80081a6:	4601      	mov	r1, r0
 80081a8:	428a      	cmp	r2, r1
 80081aa:	d100      	bne.n	80081ae <memmove+0x2a>
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081b6:	e7f7      	b.n	80081a8 <memmove+0x24>

080081b8 <_free_r>:
 80081b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ba:	2900      	cmp	r1, #0
 80081bc:	d044      	beq.n	8008248 <_free_r+0x90>
 80081be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c2:	9001      	str	r0, [sp, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f1a1 0404 	sub.w	r4, r1, #4
 80081ca:	bfb8      	it	lt
 80081cc:	18e4      	addlt	r4, r4, r3
 80081ce:	f000 f913 	bl	80083f8 <__malloc_lock>
 80081d2:	4a1e      	ldr	r2, [pc, #120]	; (800824c <_free_r+0x94>)
 80081d4:	9801      	ldr	r0, [sp, #4]
 80081d6:	6813      	ldr	r3, [r2, #0]
 80081d8:	b933      	cbnz	r3, 80081e8 <_free_r+0x30>
 80081da:	6063      	str	r3, [r4, #4]
 80081dc:	6014      	str	r4, [r2, #0]
 80081de:	b003      	add	sp, #12
 80081e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081e4:	f000 b90e 	b.w	8008404 <__malloc_unlock>
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	d908      	bls.n	80081fe <_free_r+0x46>
 80081ec:	6825      	ldr	r5, [r4, #0]
 80081ee:	1961      	adds	r1, r4, r5
 80081f0:	428b      	cmp	r3, r1
 80081f2:	bf01      	itttt	eq
 80081f4:	6819      	ldreq	r1, [r3, #0]
 80081f6:	685b      	ldreq	r3, [r3, #4]
 80081f8:	1949      	addeq	r1, r1, r5
 80081fa:	6021      	streq	r1, [r4, #0]
 80081fc:	e7ed      	b.n	80081da <_free_r+0x22>
 80081fe:	461a      	mov	r2, r3
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	b10b      	cbz	r3, 8008208 <_free_r+0x50>
 8008204:	42a3      	cmp	r3, r4
 8008206:	d9fa      	bls.n	80081fe <_free_r+0x46>
 8008208:	6811      	ldr	r1, [r2, #0]
 800820a:	1855      	adds	r5, r2, r1
 800820c:	42a5      	cmp	r5, r4
 800820e:	d10b      	bne.n	8008228 <_free_r+0x70>
 8008210:	6824      	ldr	r4, [r4, #0]
 8008212:	4421      	add	r1, r4
 8008214:	1854      	adds	r4, r2, r1
 8008216:	42a3      	cmp	r3, r4
 8008218:	6011      	str	r1, [r2, #0]
 800821a:	d1e0      	bne.n	80081de <_free_r+0x26>
 800821c:	681c      	ldr	r4, [r3, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	6053      	str	r3, [r2, #4]
 8008222:	4421      	add	r1, r4
 8008224:	6011      	str	r1, [r2, #0]
 8008226:	e7da      	b.n	80081de <_free_r+0x26>
 8008228:	d902      	bls.n	8008230 <_free_r+0x78>
 800822a:	230c      	movs	r3, #12
 800822c:	6003      	str	r3, [r0, #0]
 800822e:	e7d6      	b.n	80081de <_free_r+0x26>
 8008230:	6825      	ldr	r5, [r4, #0]
 8008232:	1961      	adds	r1, r4, r5
 8008234:	428b      	cmp	r3, r1
 8008236:	bf04      	itt	eq
 8008238:	6819      	ldreq	r1, [r3, #0]
 800823a:	685b      	ldreq	r3, [r3, #4]
 800823c:	6063      	str	r3, [r4, #4]
 800823e:	bf04      	itt	eq
 8008240:	1949      	addeq	r1, r1, r5
 8008242:	6021      	streq	r1, [r4, #0]
 8008244:	6054      	str	r4, [r2, #4]
 8008246:	e7ca      	b.n	80081de <_free_r+0x26>
 8008248:	b003      	add	sp, #12
 800824a:	bd30      	pop	{r4, r5, pc}
 800824c:	200002d8 	.word	0x200002d8

08008250 <sbrk_aligned>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	4e0e      	ldr	r6, [pc, #56]	; (800828c <sbrk_aligned+0x3c>)
 8008254:	460c      	mov	r4, r1
 8008256:	6831      	ldr	r1, [r6, #0]
 8008258:	4605      	mov	r5, r0
 800825a:	b911      	cbnz	r1, 8008262 <sbrk_aligned+0x12>
 800825c:	f000 f8bc 	bl	80083d8 <_sbrk_r>
 8008260:	6030      	str	r0, [r6, #0]
 8008262:	4621      	mov	r1, r4
 8008264:	4628      	mov	r0, r5
 8008266:	f000 f8b7 	bl	80083d8 <_sbrk_r>
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	d00a      	beq.n	8008284 <sbrk_aligned+0x34>
 800826e:	1cc4      	adds	r4, r0, #3
 8008270:	f024 0403 	bic.w	r4, r4, #3
 8008274:	42a0      	cmp	r0, r4
 8008276:	d007      	beq.n	8008288 <sbrk_aligned+0x38>
 8008278:	1a21      	subs	r1, r4, r0
 800827a:	4628      	mov	r0, r5
 800827c:	f000 f8ac 	bl	80083d8 <_sbrk_r>
 8008280:	3001      	adds	r0, #1
 8008282:	d101      	bne.n	8008288 <sbrk_aligned+0x38>
 8008284:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008288:	4620      	mov	r0, r4
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	200002dc 	.word	0x200002dc

08008290 <_malloc_r>:
 8008290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008294:	1ccd      	adds	r5, r1, #3
 8008296:	f025 0503 	bic.w	r5, r5, #3
 800829a:	3508      	adds	r5, #8
 800829c:	2d0c      	cmp	r5, #12
 800829e:	bf38      	it	cc
 80082a0:	250c      	movcc	r5, #12
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	4607      	mov	r7, r0
 80082a6:	db01      	blt.n	80082ac <_malloc_r+0x1c>
 80082a8:	42a9      	cmp	r1, r5
 80082aa:	d905      	bls.n	80082b8 <_malloc_r+0x28>
 80082ac:	230c      	movs	r3, #12
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	2600      	movs	r6, #0
 80082b2:	4630      	mov	r0, r6
 80082b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b8:	4e2e      	ldr	r6, [pc, #184]	; (8008374 <_malloc_r+0xe4>)
 80082ba:	f000 f89d 	bl	80083f8 <__malloc_lock>
 80082be:	6833      	ldr	r3, [r6, #0]
 80082c0:	461c      	mov	r4, r3
 80082c2:	bb34      	cbnz	r4, 8008312 <_malloc_r+0x82>
 80082c4:	4629      	mov	r1, r5
 80082c6:	4638      	mov	r0, r7
 80082c8:	f7ff ffc2 	bl	8008250 <sbrk_aligned>
 80082cc:	1c43      	adds	r3, r0, #1
 80082ce:	4604      	mov	r4, r0
 80082d0:	d14d      	bne.n	800836e <_malloc_r+0xde>
 80082d2:	6834      	ldr	r4, [r6, #0]
 80082d4:	4626      	mov	r6, r4
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	d140      	bne.n	800835c <_malloc_r+0xcc>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	4631      	mov	r1, r6
 80082de:	4638      	mov	r0, r7
 80082e0:	eb04 0803 	add.w	r8, r4, r3
 80082e4:	f000 f878 	bl	80083d8 <_sbrk_r>
 80082e8:	4580      	cmp	r8, r0
 80082ea:	d13a      	bne.n	8008362 <_malloc_r+0xd2>
 80082ec:	6821      	ldr	r1, [r4, #0]
 80082ee:	3503      	adds	r5, #3
 80082f0:	1a6d      	subs	r5, r5, r1
 80082f2:	f025 0503 	bic.w	r5, r5, #3
 80082f6:	3508      	adds	r5, #8
 80082f8:	2d0c      	cmp	r5, #12
 80082fa:	bf38      	it	cc
 80082fc:	250c      	movcc	r5, #12
 80082fe:	4629      	mov	r1, r5
 8008300:	4638      	mov	r0, r7
 8008302:	f7ff ffa5 	bl	8008250 <sbrk_aligned>
 8008306:	3001      	adds	r0, #1
 8008308:	d02b      	beq.n	8008362 <_malloc_r+0xd2>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	442b      	add	r3, r5
 800830e:	6023      	str	r3, [r4, #0]
 8008310:	e00e      	b.n	8008330 <_malloc_r+0xa0>
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	1b52      	subs	r2, r2, r5
 8008316:	d41e      	bmi.n	8008356 <_malloc_r+0xc6>
 8008318:	2a0b      	cmp	r2, #11
 800831a:	d916      	bls.n	800834a <_malloc_r+0xba>
 800831c:	1961      	adds	r1, r4, r5
 800831e:	42a3      	cmp	r3, r4
 8008320:	6025      	str	r5, [r4, #0]
 8008322:	bf18      	it	ne
 8008324:	6059      	strne	r1, [r3, #4]
 8008326:	6863      	ldr	r3, [r4, #4]
 8008328:	bf08      	it	eq
 800832a:	6031      	streq	r1, [r6, #0]
 800832c:	5162      	str	r2, [r4, r5]
 800832e:	604b      	str	r3, [r1, #4]
 8008330:	4638      	mov	r0, r7
 8008332:	f104 060b 	add.w	r6, r4, #11
 8008336:	f000 f865 	bl	8008404 <__malloc_unlock>
 800833a:	f026 0607 	bic.w	r6, r6, #7
 800833e:	1d23      	adds	r3, r4, #4
 8008340:	1af2      	subs	r2, r6, r3
 8008342:	d0b6      	beq.n	80082b2 <_malloc_r+0x22>
 8008344:	1b9b      	subs	r3, r3, r6
 8008346:	50a3      	str	r3, [r4, r2]
 8008348:	e7b3      	b.n	80082b2 <_malloc_r+0x22>
 800834a:	6862      	ldr	r2, [r4, #4]
 800834c:	42a3      	cmp	r3, r4
 800834e:	bf0c      	ite	eq
 8008350:	6032      	streq	r2, [r6, #0]
 8008352:	605a      	strne	r2, [r3, #4]
 8008354:	e7ec      	b.n	8008330 <_malloc_r+0xa0>
 8008356:	4623      	mov	r3, r4
 8008358:	6864      	ldr	r4, [r4, #4]
 800835a:	e7b2      	b.n	80082c2 <_malloc_r+0x32>
 800835c:	4634      	mov	r4, r6
 800835e:	6876      	ldr	r6, [r6, #4]
 8008360:	e7b9      	b.n	80082d6 <_malloc_r+0x46>
 8008362:	230c      	movs	r3, #12
 8008364:	603b      	str	r3, [r7, #0]
 8008366:	4638      	mov	r0, r7
 8008368:	f000 f84c 	bl	8008404 <__malloc_unlock>
 800836c:	e7a1      	b.n	80082b2 <_malloc_r+0x22>
 800836e:	6025      	str	r5, [r4, #0]
 8008370:	e7de      	b.n	8008330 <_malloc_r+0xa0>
 8008372:	bf00      	nop
 8008374:	200002d8 	.word	0x200002d8

08008378 <_realloc_r>:
 8008378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837c:	4680      	mov	r8, r0
 800837e:	4614      	mov	r4, r2
 8008380:	460e      	mov	r6, r1
 8008382:	b921      	cbnz	r1, 800838e <_realloc_r+0x16>
 8008384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008388:	4611      	mov	r1, r2
 800838a:	f7ff bf81 	b.w	8008290 <_malloc_r>
 800838e:	b92a      	cbnz	r2, 800839c <_realloc_r+0x24>
 8008390:	f7ff ff12 	bl	80081b8 <_free_r>
 8008394:	4625      	mov	r5, r4
 8008396:	4628      	mov	r0, r5
 8008398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800839c:	f000 f838 	bl	8008410 <_malloc_usable_size_r>
 80083a0:	4284      	cmp	r4, r0
 80083a2:	4607      	mov	r7, r0
 80083a4:	d802      	bhi.n	80083ac <_realloc_r+0x34>
 80083a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083aa:	d812      	bhi.n	80083d2 <_realloc_r+0x5a>
 80083ac:	4621      	mov	r1, r4
 80083ae:	4640      	mov	r0, r8
 80083b0:	f7ff ff6e 	bl	8008290 <_malloc_r>
 80083b4:	4605      	mov	r5, r0
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d0ed      	beq.n	8008396 <_realloc_r+0x1e>
 80083ba:	42bc      	cmp	r4, r7
 80083bc:	4622      	mov	r2, r4
 80083be:	4631      	mov	r1, r6
 80083c0:	bf28      	it	cs
 80083c2:	463a      	movcs	r2, r7
 80083c4:	f7ff fed0 	bl	8008168 <memcpy>
 80083c8:	4631      	mov	r1, r6
 80083ca:	4640      	mov	r0, r8
 80083cc:	f7ff fef4 	bl	80081b8 <_free_r>
 80083d0:	e7e1      	b.n	8008396 <_realloc_r+0x1e>
 80083d2:	4635      	mov	r5, r6
 80083d4:	e7df      	b.n	8008396 <_realloc_r+0x1e>
	...

080083d8 <_sbrk_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4d06      	ldr	r5, [pc, #24]	; (80083f4 <_sbrk_r+0x1c>)
 80083dc:	2300      	movs	r3, #0
 80083de:	4604      	mov	r4, r0
 80083e0:	4608      	mov	r0, r1
 80083e2:	602b      	str	r3, [r5, #0]
 80083e4:	f7f9 fe74 	bl	80020d0 <_sbrk>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d102      	bne.n	80083f2 <_sbrk_r+0x1a>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	b103      	cbz	r3, 80083f2 <_sbrk_r+0x1a>
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	200002e0 	.word	0x200002e0

080083f8 <__malloc_lock>:
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <__malloc_lock+0x8>)
 80083fa:	f000 b811 	b.w	8008420 <__retarget_lock_acquire_recursive>
 80083fe:	bf00      	nop
 8008400:	200002e4 	.word	0x200002e4

08008404 <__malloc_unlock>:
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <__malloc_unlock+0x8>)
 8008406:	f000 b80c 	b.w	8008422 <__retarget_lock_release_recursive>
 800840a:	bf00      	nop
 800840c:	200002e4 	.word	0x200002e4

08008410 <_malloc_usable_size_r>:
 8008410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008414:	1f18      	subs	r0, r3, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	bfbc      	itt	lt
 800841a:	580b      	ldrlt	r3, [r1, r0]
 800841c:	18c0      	addlt	r0, r0, r3
 800841e:	4770      	bx	lr

08008420 <__retarget_lock_acquire_recursive>:
 8008420:	4770      	bx	lr

08008422 <__retarget_lock_release_recursive>:
 8008422:	4770      	bx	lr

08008424 <pow>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	ed2d 8b02 	vpush	{d8}
 800842a:	eeb0 8a40 	vmov.f32	s16, s0
 800842e:	eef0 8a60 	vmov.f32	s17, s1
 8008432:	ec55 4b11 	vmov	r4, r5, d1
 8008436:	f000 f893 	bl	8008560 <__ieee754_pow>
 800843a:	4622      	mov	r2, r4
 800843c:	462b      	mov	r3, r5
 800843e:	4620      	mov	r0, r4
 8008440:	4629      	mov	r1, r5
 8008442:	ec57 6b10 	vmov	r6, r7, d0
 8008446:	f7f8 fb99 	bl	8000b7c <__aeabi_dcmpun>
 800844a:	2800      	cmp	r0, #0
 800844c:	d13b      	bne.n	80084c6 <pow+0xa2>
 800844e:	ec51 0b18 	vmov	r0, r1, d8
 8008452:	2200      	movs	r2, #0
 8008454:	2300      	movs	r3, #0
 8008456:	f7f8 fb5f 	bl	8000b18 <__aeabi_dcmpeq>
 800845a:	b1b8      	cbz	r0, 800848c <pow+0x68>
 800845c:	2200      	movs	r2, #0
 800845e:	2300      	movs	r3, #0
 8008460:	4620      	mov	r0, r4
 8008462:	4629      	mov	r1, r5
 8008464:	f7f8 fb58 	bl	8000b18 <__aeabi_dcmpeq>
 8008468:	2800      	cmp	r0, #0
 800846a:	d146      	bne.n	80084fa <pow+0xd6>
 800846c:	ec45 4b10 	vmov	d0, r4, r5
 8008470:	f000 fe8f 	bl	8009192 <finite>
 8008474:	b338      	cbz	r0, 80084c6 <pow+0xa2>
 8008476:	2200      	movs	r2, #0
 8008478:	2300      	movs	r3, #0
 800847a:	4620      	mov	r0, r4
 800847c:	4629      	mov	r1, r5
 800847e:	f7f8 fb55 	bl	8000b2c <__aeabi_dcmplt>
 8008482:	b300      	cbz	r0, 80084c6 <pow+0xa2>
 8008484:	f7ff fb20 	bl	8007ac8 <__errno>
 8008488:	2322      	movs	r3, #34	; 0x22
 800848a:	e01b      	b.n	80084c4 <pow+0xa0>
 800848c:	ec47 6b10 	vmov	d0, r6, r7
 8008490:	f000 fe7f 	bl	8009192 <finite>
 8008494:	b9e0      	cbnz	r0, 80084d0 <pow+0xac>
 8008496:	eeb0 0a48 	vmov.f32	s0, s16
 800849a:	eef0 0a68 	vmov.f32	s1, s17
 800849e:	f000 fe78 	bl	8009192 <finite>
 80084a2:	b1a8      	cbz	r0, 80084d0 <pow+0xac>
 80084a4:	ec45 4b10 	vmov	d0, r4, r5
 80084a8:	f000 fe73 	bl	8009192 <finite>
 80084ac:	b180      	cbz	r0, 80084d0 <pow+0xac>
 80084ae:	4632      	mov	r2, r6
 80084b0:	463b      	mov	r3, r7
 80084b2:	4630      	mov	r0, r6
 80084b4:	4639      	mov	r1, r7
 80084b6:	f7f8 fb61 	bl	8000b7c <__aeabi_dcmpun>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d0e2      	beq.n	8008484 <pow+0x60>
 80084be:	f7ff fb03 	bl	8007ac8 <__errno>
 80084c2:	2321      	movs	r3, #33	; 0x21
 80084c4:	6003      	str	r3, [r0, #0]
 80084c6:	ecbd 8b02 	vpop	{d8}
 80084ca:	ec47 6b10 	vmov	d0, r6, r7
 80084ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d0:	2200      	movs	r2, #0
 80084d2:	2300      	movs	r3, #0
 80084d4:	4630      	mov	r0, r6
 80084d6:	4639      	mov	r1, r7
 80084d8:	f7f8 fb1e 	bl	8000b18 <__aeabi_dcmpeq>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d0f2      	beq.n	80084c6 <pow+0xa2>
 80084e0:	eeb0 0a48 	vmov.f32	s0, s16
 80084e4:	eef0 0a68 	vmov.f32	s1, s17
 80084e8:	f000 fe53 	bl	8009192 <finite>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d0ea      	beq.n	80084c6 <pow+0xa2>
 80084f0:	ec45 4b10 	vmov	d0, r4, r5
 80084f4:	f000 fe4d 	bl	8009192 <finite>
 80084f8:	e7c3      	b.n	8008482 <pow+0x5e>
 80084fa:	4f01      	ldr	r7, [pc, #4]	; (8008500 <pow+0xdc>)
 80084fc:	2600      	movs	r6, #0
 80084fe:	e7e2      	b.n	80084c6 <pow+0xa2>
 8008500:	3ff00000 	.word	0x3ff00000

08008504 <sqrt>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	ed2d 8b02 	vpush	{d8}
 800850a:	ec55 4b10 	vmov	r4, r5, d0
 800850e:	f000 fd55 	bl	8008fbc <__ieee754_sqrt>
 8008512:	4622      	mov	r2, r4
 8008514:	462b      	mov	r3, r5
 8008516:	4620      	mov	r0, r4
 8008518:	4629      	mov	r1, r5
 800851a:	eeb0 8a40 	vmov.f32	s16, s0
 800851e:	eef0 8a60 	vmov.f32	s17, s1
 8008522:	f7f8 fb2b 	bl	8000b7c <__aeabi_dcmpun>
 8008526:	b990      	cbnz	r0, 800854e <sqrt+0x4a>
 8008528:	2200      	movs	r2, #0
 800852a:	2300      	movs	r3, #0
 800852c:	4620      	mov	r0, r4
 800852e:	4629      	mov	r1, r5
 8008530:	f7f8 fafc 	bl	8000b2c <__aeabi_dcmplt>
 8008534:	b158      	cbz	r0, 800854e <sqrt+0x4a>
 8008536:	f7ff fac7 	bl	8007ac8 <__errno>
 800853a:	2321      	movs	r3, #33	; 0x21
 800853c:	6003      	str	r3, [r0, #0]
 800853e:	2200      	movs	r2, #0
 8008540:	2300      	movs	r3, #0
 8008542:	4610      	mov	r0, r2
 8008544:	4619      	mov	r1, r3
 8008546:	f7f8 f9a9 	bl	800089c <__aeabi_ddiv>
 800854a:	ec41 0b18 	vmov	d8, r0, r1
 800854e:	eeb0 0a48 	vmov.f32	s0, s16
 8008552:	eef0 0a68 	vmov.f32	s1, s17
 8008556:	ecbd 8b02 	vpop	{d8}
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	0000      	movs	r0, r0
	...

08008560 <__ieee754_pow>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	ed2d 8b06 	vpush	{d8-d10}
 8008568:	b089      	sub	sp, #36	; 0x24
 800856a:	ed8d 1b00 	vstr	d1, [sp]
 800856e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008572:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008576:	ea58 0102 	orrs.w	r1, r8, r2
 800857a:	ec57 6b10 	vmov	r6, r7, d0
 800857e:	d115      	bne.n	80085ac <__ieee754_pow+0x4c>
 8008580:	19b3      	adds	r3, r6, r6
 8008582:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008586:	4152      	adcs	r2, r2
 8008588:	4299      	cmp	r1, r3
 800858a:	4b89      	ldr	r3, [pc, #548]	; (80087b0 <__ieee754_pow+0x250>)
 800858c:	4193      	sbcs	r3, r2
 800858e:	f080 84d2 	bcs.w	8008f36 <__ieee754_pow+0x9d6>
 8008592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008596:	4630      	mov	r0, r6
 8008598:	4639      	mov	r1, r7
 800859a:	f7f7 fe9f 	bl	80002dc <__adddf3>
 800859e:	ec41 0b10 	vmov	d0, r0, r1
 80085a2:	b009      	add	sp, #36	; 0x24
 80085a4:	ecbd 8b06 	vpop	{d8-d10}
 80085a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ac:	4b81      	ldr	r3, [pc, #516]	; (80087b4 <__ieee754_pow+0x254>)
 80085ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80085b2:	429c      	cmp	r4, r3
 80085b4:	ee10 aa10 	vmov	sl, s0
 80085b8:	463d      	mov	r5, r7
 80085ba:	dc06      	bgt.n	80085ca <__ieee754_pow+0x6a>
 80085bc:	d101      	bne.n	80085c2 <__ieee754_pow+0x62>
 80085be:	2e00      	cmp	r6, #0
 80085c0:	d1e7      	bne.n	8008592 <__ieee754_pow+0x32>
 80085c2:	4598      	cmp	r8, r3
 80085c4:	dc01      	bgt.n	80085ca <__ieee754_pow+0x6a>
 80085c6:	d10f      	bne.n	80085e8 <__ieee754_pow+0x88>
 80085c8:	b172      	cbz	r2, 80085e8 <__ieee754_pow+0x88>
 80085ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80085ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80085d2:	ea55 050a 	orrs.w	r5, r5, sl
 80085d6:	d1dc      	bne.n	8008592 <__ieee754_pow+0x32>
 80085d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80085dc:	18db      	adds	r3, r3, r3
 80085de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80085e2:	4152      	adcs	r2, r2
 80085e4:	429d      	cmp	r5, r3
 80085e6:	e7d0      	b.n	800858a <__ieee754_pow+0x2a>
 80085e8:	2d00      	cmp	r5, #0
 80085ea:	da3b      	bge.n	8008664 <__ieee754_pow+0x104>
 80085ec:	4b72      	ldr	r3, [pc, #456]	; (80087b8 <__ieee754_pow+0x258>)
 80085ee:	4598      	cmp	r8, r3
 80085f0:	dc51      	bgt.n	8008696 <__ieee754_pow+0x136>
 80085f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80085f6:	4598      	cmp	r8, r3
 80085f8:	f340 84ac 	ble.w	8008f54 <__ieee754_pow+0x9f4>
 80085fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008600:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008604:	2b14      	cmp	r3, #20
 8008606:	dd0f      	ble.n	8008628 <__ieee754_pow+0xc8>
 8008608:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800860c:	fa22 f103 	lsr.w	r1, r2, r3
 8008610:	fa01 f303 	lsl.w	r3, r1, r3
 8008614:	4293      	cmp	r3, r2
 8008616:	f040 849d 	bne.w	8008f54 <__ieee754_pow+0x9f4>
 800861a:	f001 0101 	and.w	r1, r1, #1
 800861e:	f1c1 0302 	rsb	r3, r1, #2
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	b182      	cbz	r2, 8008648 <__ieee754_pow+0xe8>
 8008626:	e05f      	b.n	80086e8 <__ieee754_pow+0x188>
 8008628:	2a00      	cmp	r2, #0
 800862a:	d15b      	bne.n	80086e4 <__ieee754_pow+0x184>
 800862c:	f1c3 0314 	rsb	r3, r3, #20
 8008630:	fa48 f103 	asr.w	r1, r8, r3
 8008634:	fa01 f303 	lsl.w	r3, r1, r3
 8008638:	4543      	cmp	r3, r8
 800863a:	f040 8488 	bne.w	8008f4e <__ieee754_pow+0x9ee>
 800863e:	f001 0101 	and.w	r1, r1, #1
 8008642:	f1c1 0302 	rsb	r3, r1, #2
 8008646:	9304      	str	r3, [sp, #16]
 8008648:	4b5c      	ldr	r3, [pc, #368]	; (80087bc <__ieee754_pow+0x25c>)
 800864a:	4598      	cmp	r8, r3
 800864c:	d132      	bne.n	80086b4 <__ieee754_pow+0x154>
 800864e:	f1b9 0f00 	cmp.w	r9, #0
 8008652:	f280 8478 	bge.w	8008f46 <__ieee754_pow+0x9e6>
 8008656:	4959      	ldr	r1, [pc, #356]	; (80087bc <__ieee754_pow+0x25c>)
 8008658:	4632      	mov	r2, r6
 800865a:	463b      	mov	r3, r7
 800865c:	2000      	movs	r0, #0
 800865e:	f7f8 f91d 	bl	800089c <__aeabi_ddiv>
 8008662:	e79c      	b.n	800859e <__ieee754_pow+0x3e>
 8008664:	2300      	movs	r3, #0
 8008666:	9304      	str	r3, [sp, #16]
 8008668:	2a00      	cmp	r2, #0
 800866a:	d13d      	bne.n	80086e8 <__ieee754_pow+0x188>
 800866c:	4b51      	ldr	r3, [pc, #324]	; (80087b4 <__ieee754_pow+0x254>)
 800866e:	4598      	cmp	r8, r3
 8008670:	d1ea      	bne.n	8008648 <__ieee754_pow+0xe8>
 8008672:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008676:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800867a:	ea53 030a 	orrs.w	r3, r3, sl
 800867e:	f000 845a 	beq.w	8008f36 <__ieee754_pow+0x9d6>
 8008682:	4b4f      	ldr	r3, [pc, #316]	; (80087c0 <__ieee754_pow+0x260>)
 8008684:	429c      	cmp	r4, r3
 8008686:	dd08      	ble.n	800869a <__ieee754_pow+0x13a>
 8008688:	f1b9 0f00 	cmp.w	r9, #0
 800868c:	f2c0 8457 	blt.w	8008f3e <__ieee754_pow+0x9de>
 8008690:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008694:	e783      	b.n	800859e <__ieee754_pow+0x3e>
 8008696:	2302      	movs	r3, #2
 8008698:	e7e5      	b.n	8008666 <__ieee754_pow+0x106>
 800869a:	f1b9 0f00 	cmp.w	r9, #0
 800869e:	f04f 0000 	mov.w	r0, #0
 80086a2:	f04f 0100 	mov.w	r1, #0
 80086a6:	f6bf af7a 	bge.w	800859e <__ieee754_pow+0x3e>
 80086aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80086ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80086b2:	e774      	b.n	800859e <__ieee754_pow+0x3e>
 80086b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80086b8:	d106      	bne.n	80086c8 <__ieee754_pow+0x168>
 80086ba:	4632      	mov	r2, r6
 80086bc:	463b      	mov	r3, r7
 80086be:	4630      	mov	r0, r6
 80086c0:	4639      	mov	r1, r7
 80086c2:	f7f7 ffc1 	bl	8000648 <__aeabi_dmul>
 80086c6:	e76a      	b.n	800859e <__ieee754_pow+0x3e>
 80086c8:	4b3e      	ldr	r3, [pc, #248]	; (80087c4 <__ieee754_pow+0x264>)
 80086ca:	4599      	cmp	r9, r3
 80086cc:	d10c      	bne.n	80086e8 <__ieee754_pow+0x188>
 80086ce:	2d00      	cmp	r5, #0
 80086d0:	db0a      	blt.n	80086e8 <__ieee754_pow+0x188>
 80086d2:	ec47 6b10 	vmov	d0, r6, r7
 80086d6:	b009      	add	sp, #36	; 0x24
 80086d8:	ecbd 8b06 	vpop	{d8-d10}
 80086dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e0:	f000 bc6c 	b.w	8008fbc <__ieee754_sqrt>
 80086e4:	2300      	movs	r3, #0
 80086e6:	9304      	str	r3, [sp, #16]
 80086e8:	ec47 6b10 	vmov	d0, r6, r7
 80086ec:	f000 fd48 	bl	8009180 <fabs>
 80086f0:	ec51 0b10 	vmov	r0, r1, d0
 80086f4:	f1ba 0f00 	cmp.w	sl, #0
 80086f8:	d129      	bne.n	800874e <__ieee754_pow+0x1ee>
 80086fa:	b124      	cbz	r4, 8008706 <__ieee754_pow+0x1a6>
 80086fc:	4b2f      	ldr	r3, [pc, #188]	; (80087bc <__ieee754_pow+0x25c>)
 80086fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008702:	429a      	cmp	r2, r3
 8008704:	d123      	bne.n	800874e <__ieee754_pow+0x1ee>
 8008706:	f1b9 0f00 	cmp.w	r9, #0
 800870a:	da05      	bge.n	8008718 <__ieee754_pow+0x1b8>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	2000      	movs	r0, #0
 8008712:	492a      	ldr	r1, [pc, #168]	; (80087bc <__ieee754_pow+0x25c>)
 8008714:	f7f8 f8c2 	bl	800089c <__aeabi_ddiv>
 8008718:	2d00      	cmp	r5, #0
 800871a:	f6bf af40 	bge.w	800859e <__ieee754_pow+0x3e>
 800871e:	9b04      	ldr	r3, [sp, #16]
 8008720:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008724:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008728:	4323      	orrs	r3, r4
 800872a:	d108      	bne.n	800873e <__ieee754_pow+0x1de>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4610      	mov	r0, r2
 8008732:	4619      	mov	r1, r3
 8008734:	f7f7 fdd0 	bl	80002d8 <__aeabi_dsub>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	e78f      	b.n	800865e <__ieee754_pow+0xfe>
 800873e:	9b04      	ldr	r3, [sp, #16]
 8008740:	2b01      	cmp	r3, #1
 8008742:	f47f af2c 	bne.w	800859e <__ieee754_pow+0x3e>
 8008746:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800874a:	4619      	mov	r1, r3
 800874c:	e727      	b.n	800859e <__ieee754_pow+0x3e>
 800874e:	0feb      	lsrs	r3, r5, #31
 8008750:	3b01      	subs	r3, #1
 8008752:	9306      	str	r3, [sp, #24]
 8008754:	9a06      	ldr	r2, [sp, #24]
 8008756:	9b04      	ldr	r3, [sp, #16]
 8008758:	4313      	orrs	r3, r2
 800875a:	d102      	bne.n	8008762 <__ieee754_pow+0x202>
 800875c:	4632      	mov	r2, r6
 800875e:	463b      	mov	r3, r7
 8008760:	e7e6      	b.n	8008730 <__ieee754_pow+0x1d0>
 8008762:	4b19      	ldr	r3, [pc, #100]	; (80087c8 <__ieee754_pow+0x268>)
 8008764:	4598      	cmp	r8, r3
 8008766:	f340 80fb 	ble.w	8008960 <__ieee754_pow+0x400>
 800876a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800876e:	4598      	cmp	r8, r3
 8008770:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <__ieee754_pow+0x260>)
 8008772:	dd0c      	ble.n	800878e <__ieee754_pow+0x22e>
 8008774:	429c      	cmp	r4, r3
 8008776:	dc0f      	bgt.n	8008798 <__ieee754_pow+0x238>
 8008778:	f1b9 0f00 	cmp.w	r9, #0
 800877c:	da0f      	bge.n	800879e <__ieee754_pow+0x23e>
 800877e:	2000      	movs	r0, #0
 8008780:	b009      	add	sp, #36	; 0x24
 8008782:	ecbd 8b06 	vpop	{d8-d10}
 8008786:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878a:	f000 bcf0 	b.w	800916e <__math_oflow>
 800878e:	429c      	cmp	r4, r3
 8008790:	dbf2      	blt.n	8008778 <__ieee754_pow+0x218>
 8008792:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <__ieee754_pow+0x25c>)
 8008794:	429c      	cmp	r4, r3
 8008796:	dd19      	ble.n	80087cc <__ieee754_pow+0x26c>
 8008798:	f1b9 0f00 	cmp.w	r9, #0
 800879c:	dcef      	bgt.n	800877e <__ieee754_pow+0x21e>
 800879e:	2000      	movs	r0, #0
 80087a0:	b009      	add	sp, #36	; 0x24
 80087a2:	ecbd 8b06 	vpop	{d8-d10}
 80087a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087aa:	f000 bcd7 	b.w	800915c <__math_uflow>
 80087ae:	bf00      	nop
 80087b0:	fff00000 	.word	0xfff00000
 80087b4:	7ff00000 	.word	0x7ff00000
 80087b8:	433fffff 	.word	0x433fffff
 80087bc:	3ff00000 	.word	0x3ff00000
 80087c0:	3fefffff 	.word	0x3fefffff
 80087c4:	3fe00000 	.word	0x3fe00000
 80087c8:	41e00000 	.word	0x41e00000
 80087cc:	4b60      	ldr	r3, [pc, #384]	; (8008950 <__ieee754_pow+0x3f0>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	f7f7 fd82 	bl	80002d8 <__aeabi_dsub>
 80087d4:	a354      	add	r3, pc, #336	; (adr r3, 8008928 <__ieee754_pow+0x3c8>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	4604      	mov	r4, r0
 80087dc:	460d      	mov	r5, r1
 80087de:	f7f7 ff33 	bl	8000648 <__aeabi_dmul>
 80087e2:	a353      	add	r3, pc, #332	; (adr r3, 8008930 <__ieee754_pow+0x3d0>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	4606      	mov	r6, r0
 80087ea:	460f      	mov	r7, r1
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	f7f7 ff2a 	bl	8000648 <__aeabi_dmul>
 80087f4:	4b57      	ldr	r3, [pc, #348]	; (8008954 <__ieee754_pow+0x3f4>)
 80087f6:	4682      	mov	sl, r0
 80087f8:	468b      	mov	fp, r1
 80087fa:	2200      	movs	r2, #0
 80087fc:	4620      	mov	r0, r4
 80087fe:	4629      	mov	r1, r5
 8008800:	f7f7 ff22 	bl	8000648 <__aeabi_dmul>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	a14b      	add	r1, pc, #300	; (adr r1, 8008938 <__ieee754_pow+0x3d8>)
 800880a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800880e:	f7f7 fd63 	bl	80002d8 <__aeabi_dsub>
 8008812:	4622      	mov	r2, r4
 8008814:	462b      	mov	r3, r5
 8008816:	f7f7 ff17 	bl	8000648 <__aeabi_dmul>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	2000      	movs	r0, #0
 8008820:	494d      	ldr	r1, [pc, #308]	; (8008958 <__ieee754_pow+0x3f8>)
 8008822:	f7f7 fd59 	bl	80002d8 <__aeabi_dsub>
 8008826:	4622      	mov	r2, r4
 8008828:	4680      	mov	r8, r0
 800882a:	4689      	mov	r9, r1
 800882c:	462b      	mov	r3, r5
 800882e:	4620      	mov	r0, r4
 8008830:	4629      	mov	r1, r5
 8008832:	f7f7 ff09 	bl	8000648 <__aeabi_dmul>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4640      	mov	r0, r8
 800883c:	4649      	mov	r1, r9
 800883e:	f7f7 ff03 	bl	8000648 <__aeabi_dmul>
 8008842:	a33f      	add	r3, pc, #252	; (adr r3, 8008940 <__ieee754_pow+0x3e0>)
 8008844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008848:	f7f7 fefe 	bl	8000648 <__aeabi_dmul>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	4650      	mov	r0, sl
 8008852:	4659      	mov	r1, fp
 8008854:	f7f7 fd40 	bl	80002d8 <__aeabi_dsub>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4680      	mov	r8, r0
 800885e:	4689      	mov	r9, r1
 8008860:	4630      	mov	r0, r6
 8008862:	4639      	mov	r1, r7
 8008864:	f7f7 fd3a 	bl	80002dc <__adddf3>
 8008868:	2000      	movs	r0, #0
 800886a:	4632      	mov	r2, r6
 800886c:	463b      	mov	r3, r7
 800886e:	4604      	mov	r4, r0
 8008870:	460d      	mov	r5, r1
 8008872:	f7f7 fd31 	bl	80002d8 <__aeabi_dsub>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4640      	mov	r0, r8
 800887c:	4649      	mov	r1, r9
 800887e:	f7f7 fd2b 	bl	80002d8 <__aeabi_dsub>
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	9a06      	ldr	r2, [sp, #24]
 8008886:	3b01      	subs	r3, #1
 8008888:	4313      	orrs	r3, r2
 800888a:	4682      	mov	sl, r0
 800888c:	468b      	mov	fp, r1
 800888e:	f040 81e7 	bne.w	8008c60 <__ieee754_pow+0x700>
 8008892:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008948 <__ieee754_pow+0x3e8>
 8008896:	eeb0 8a47 	vmov.f32	s16, s14
 800889a:	eef0 8a67 	vmov.f32	s17, s15
 800889e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80088a2:	2600      	movs	r6, #0
 80088a4:	4632      	mov	r2, r6
 80088a6:	463b      	mov	r3, r7
 80088a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088ac:	f7f7 fd14 	bl	80002d8 <__aeabi_dsub>
 80088b0:	4622      	mov	r2, r4
 80088b2:	462b      	mov	r3, r5
 80088b4:	f7f7 fec8 	bl	8000648 <__aeabi_dmul>
 80088b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088bc:	4680      	mov	r8, r0
 80088be:	4689      	mov	r9, r1
 80088c0:	4650      	mov	r0, sl
 80088c2:	4659      	mov	r1, fp
 80088c4:	f7f7 fec0 	bl	8000648 <__aeabi_dmul>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4640      	mov	r0, r8
 80088ce:	4649      	mov	r1, r9
 80088d0:	f7f7 fd04 	bl	80002dc <__adddf3>
 80088d4:	4632      	mov	r2, r6
 80088d6:	463b      	mov	r3, r7
 80088d8:	4680      	mov	r8, r0
 80088da:	4689      	mov	r9, r1
 80088dc:	4620      	mov	r0, r4
 80088de:	4629      	mov	r1, r5
 80088e0:	f7f7 feb2 	bl	8000648 <__aeabi_dmul>
 80088e4:	460b      	mov	r3, r1
 80088e6:	4604      	mov	r4, r0
 80088e8:	460d      	mov	r5, r1
 80088ea:	4602      	mov	r2, r0
 80088ec:	4649      	mov	r1, r9
 80088ee:	4640      	mov	r0, r8
 80088f0:	f7f7 fcf4 	bl	80002dc <__adddf3>
 80088f4:	4b19      	ldr	r3, [pc, #100]	; (800895c <__ieee754_pow+0x3fc>)
 80088f6:	4299      	cmp	r1, r3
 80088f8:	ec45 4b19 	vmov	d9, r4, r5
 80088fc:	4606      	mov	r6, r0
 80088fe:	460f      	mov	r7, r1
 8008900:	468b      	mov	fp, r1
 8008902:	f340 82f1 	ble.w	8008ee8 <__ieee754_pow+0x988>
 8008906:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800890a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800890e:	4303      	orrs	r3, r0
 8008910:	f000 81e4 	beq.w	8008cdc <__ieee754_pow+0x77c>
 8008914:	ec51 0b18 	vmov	r0, r1, d8
 8008918:	2200      	movs	r2, #0
 800891a:	2300      	movs	r3, #0
 800891c:	f7f8 f906 	bl	8000b2c <__aeabi_dcmplt>
 8008920:	3800      	subs	r0, #0
 8008922:	bf18      	it	ne
 8008924:	2001      	movne	r0, #1
 8008926:	e72b      	b.n	8008780 <__ieee754_pow+0x220>
 8008928:	60000000 	.word	0x60000000
 800892c:	3ff71547 	.word	0x3ff71547
 8008930:	f85ddf44 	.word	0xf85ddf44
 8008934:	3e54ae0b 	.word	0x3e54ae0b
 8008938:	55555555 	.word	0x55555555
 800893c:	3fd55555 	.word	0x3fd55555
 8008940:	652b82fe 	.word	0x652b82fe
 8008944:	3ff71547 	.word	0x3ff71547
 8008948:	00000000 	.word	0x00000000
 800894c:	bff00000 	.word	0xbff00000
 8008950:	3ff00000 	.word	0x3ff00000
 8008954:	3fd00000 	.word	0x3fd00000
 8008958:	3fe00000 	.word	0x3fe00000
 800895c:	408fffff 	.word	0x408fffff
 8008960:	4bd5      	ldr	r3, [pc, #852]	; (8008cb8 <__ieee754_pow+0x758>)
 8008962:	402b      	ands	r3, r5
 8008964:	2200      	movs	r2, #0
 8008966:	b92b      	cbnz	r3, 8008974 <__ieee754_pow+0x414>
 8008968:	4bd4      	ldr	r3, [pc, #848]	; (8008cbc <__ieee754_pow+0x75c>)
 800896a:	f7f7 fe6d 	bl	8000648 <__aeabi_dmul>
 800896e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008972:	460c      	mov	r4, r1
 8008974:	1523      	asrs	r3, r4, #20
 8008976:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800897a:	4413      	add	r3, r2
 800897c:	9305      	str	r3, [sp, #20]
 800897e:	4bd0      	ldr	r3, [pc, #832]	; (8008cc0 <__ieee754_pow+0x760>)
 8008980:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008984:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008988:	429c      	cmp	r4, r3
 800898a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800898e:	dd08      	ble.n	80089a2 <__ieee754_pow+0x442>
 8008990:	4bcc      	ldr	r3, [pc, #816]	; (8008cc4 <__ieee754_pow+0x764>)
 8008992:	429c      	cmp	r4, r3
 8008994:	f340 8162 	ble.w	8008c5c <__ieee754_pow+0x6fc>
 8008998:	9b05      	ldr	r3, [sp, #20]
 800899a:	3301      	adds	r3, #1
 800899c:	9305      	str	r3, [sp, #20]
 800899e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80089a2:	2400      	movs	r4, #0
 80089a4:	00e3      	lsls	r3, r4, #3
 80089a6:	9307      	str	r3, [sp, #28]
 80089a8:	4bc7      	ldr	r3, [pc, #796]	; (8008cc8 <__ieee754_pow+0x768>)
 80089aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089ae:	ed93 7b00 	vldr	d7, [r3]
 80089b2:	4629      	mov	r1, r5
 80089b4:	ec53 2b17 	vmov	r2, r3, d7
 80089b8:	eeb0 9a47 	vmov.f32	s18, s14
 80089bc:	eef0 9a67 	vmov.f32	s19, s15
 80089c0:	4682      	mov	sl, r0
 80089c2:	f7f7 fc89 	bl	80002d8 <__aeabi_dsub>
 80089c6:	4652      	mov	r2, sl
 80089c8:	4606      	mov	r6, r0
 80089ca:	460f      	mov	r7, r1
 80089cc:	462b      	mov	r3, r5
 80089ce:	ec51 0b19 	vmov	r0, r1, d9
 80089d2:	f7f7 fc83 	bl	80002dc <__adddf3>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	2000      	movs	r0, #0
 80089dc:	49bb      	ldr	r1, [pc, #748]	; (8008ccc <__ieee754_pow+0x76c>)
 80089de:	f7f7 ff5d 	bl	800089c <__aeabi_ddiv>
 80089e2:	ec41 0b1a 	vmov	d10, r0, r1
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	4630      	mov	r0, r6
 80089ec:	4639      	mov	r1, r7
 80089ee:	f7f7 fe2b 	bl	8000648 <__aeabi_dmul>
 80089f2:	2300      	movs	r3, #0
 80089f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089f8:	9302      	str	r3, [sp, #8]
 80089fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089fe:	46ab      	mov	fp, r5
 8008a00:	106d      	asrs	r5, r5, #1
 8008a02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008a06:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008a0a:	ec41 0b18 	vmov	d8, r0, r1
 8008a0e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008a12:	2200      	movs	r2, #0
 8008a14:	4640      	mov	r0, r8
 8008a16:	4649      	mov	r1, r9
 8008a18:	4614      	mov	r4, r2
 8008a1a:	461d      	mov	r5, r3
 8008a1c:	f7f7 fe14 	bl	8000648 <__aeabi_dmul>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4630      	mov	r0, r6
 8008a26:	4639      	mov	r1, r7
 8008a28:	f7f7 fc56 	bl	80002d8 <__aeabi_dsub>
 8008a2c:	ec53 2b19 	vmov	r2, r3, d9
 8008a30:	4606      	mov	r6, r0
 8008a32:	460f      	mov	r7, r1
 8008a34:	4620      	mov	r0, r4
 8008a36:	4629      	mov	r1, r5
 8008a38:	f7f7 fc4e 	bl	80002d8 <__aeabi_dsub>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4650      	mov	r0, sl
 8008a42:	4659      	mov	r1, fp
 8008a44:	f7f7 fc48 	bl	80002d8 <__aeabi_dsub>
 8008a48:	4642      	mov	r2, r8
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	f7f7 fdfc 	bl	8000648 <__aeabi_dmul>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4630      	mov	r0, r6
 8008a56:	4639      	mov	r1, r7
 8008a58:	f7f7 fc3e 	bl	80002d8 <__aeabi_dsub>
 8008a5c:	ec53 2b1a 	vmov	r2, r3, d10
 8008a60:	f7f7 fdf2 	bl	8000648 <__aeabi_dmul>
 8008a64:	ec53 2b18 	vmov	r2, r3, d8
 8008a68:	ec41 0b19 	vmov	d9, r0, r1
 8008a6c:	ec51 0b18 	vmov	r0, r1, d8
 8008a70:	f7f7 fdea 	bl	8000648 <__aeabi_dmul>
 8008a74:	a37c      	add	r3, pc, #496	; (adr r3, 8008c68 <__ieee754_pow+0x708>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	460d      	mov	r5, r1
 8008a7e:	f7f7 fde3 	bl	8000648 <__aeabi_dmul>
 8008a82:	a37b      	add	r3, pc, #492	; (adr r3, 8008c70 <__ieee754_pow+0x710>)
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	f7f7 fc28 	bl	80002dc <__adddf3>
 8008a8c:	4622      	mov	r2, r4
 8008a8e:	462b      	mov	r3, r5
 8008a90:	f7f7 fdda 	bl	8000648 <__aeabi_dmul>
 8008a94:	a378      	add	r3, pc, #480	; (adr r3, 8008c78 <__ieee754_pow+0x718>)
 8008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9a:	f7f7 fc1f 	bl	80002dc <__adddf3>
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	462b      	mov	r3, r5
 8008aa2:	f7f7 fdd1 	bl	8000648 <__aeabi_dmul>
 8008aa6:	a376      	add	r3, pc, #472	; (adr r3, 8008c80 <__ieee754_pow+0x720>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	f7f7 fc16 	bl	80002dc <__adddf3>
 8008ab0:	4622      	mov	r2, r4
 8008ab2:	462b      	mov	r3, r5
 8008ab4:	f7f7 fdc8 	bl	8000648 <__aeabi_dmul>
 8008ab8:	a373      	add	r3, pc, #460	; (adr r3, 8008c88 <__ieee754_pow+0x728>)
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	f7f7 fc0d 	bl	80002dc <__adddf3>
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	f7f7 fdbf 	bl	8000648 <__aeabi_dmul>
 8008aca:	a371      	add	r3, pc, #452	; (adr r3, 8008c90 <__ieee754_pow+0x730>)
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	f7f7 fc04 	bl	80002dc <__adddf3>
 8008ad4:	4622      	mov	r2, r4
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	460f      	mov	r7, r1
 8008ada:	462b      	mov	r3, r5
 8008adc:	4620      	mov	r0, r4
 8008ade:	4629      	mov	r1, r5
 8008ae0:	f7f7 fdb2 	bl	8000648 <__aeabi_dmul>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	4630      	mov	r0, r6
 8008aea:	4639      	mov	r1, r7
 8008aec:	f7f7 fdac 	bl	8000648 <__aeabi_dmul>
 8008af0:	4642      	mov	r2, r8
 8008af2:	4604      	mov	r4, r0
 8008af4:	460d      	mov	r5, r1
 8008af6:	464b      	mov	r3, r9
 8008af8:	ec51 0b18 	vmov	r0, r1, d8
 8008afc:	f7f7 fbee 	bl	80002dc <__adddf3>
 8008b00:	ec53 2b19 	vmov	r2, r3, d9
 8008b04:	f7f7 fda0 	bl	8000648 <__aeabi_dmul>
 8008b08:	4622      	mov	r2, r4
 8008b0a:	462b      	mov	r3, r5
 8008b0c:	f7f7 fbe6 	bl	80002dc <__adddf3>
 8008b10:	4642      	mov	r2, r8
 8008b12:	4682      	mov	sl, r0
 8008b14:	468b      	mov	fp, r1
 8008b16:	464b      	mov	r3, r9
 8008b18:	4640      	mov	r0, r8
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	f7f7 fd94 	bl	8000648 <__aeabi_dmul>
 8008b20:	4b6b      	ldr	r3, [pc, #428]	; (8008cd0 <__ieee754_pow+0x770>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	4606      	mov	r6, r0
 8008b26:	460f      	mov	r7, r1
 8008b28:	f7f7 fbd8 	bl	80002dc <__adddf3>
 8008b2c:	4652      	mov	r2, sl
 8008b2e:	465b      	mov	r3, fp
 8008b30:	f7f7 fbd4 	bl	80002dc <__adddf3>
 8008b34:	2000      	movs	r0, #0
 8008b36:	4604      	mov	r4, r0
 8008b38:	460d      	mov	r5, r1
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4640      	mov	r0, r8
 8008b40:	4649      	mov	r1, r9
 8008b42:	f7f7 fd81 	bl	8000648 <__aeabi_dmul>
 8008b46:	4b62      	ldr	r3, [pc, #392]	; (8008cd0 <__ieee754_pow+0x770>)
 8008b48:	4680      	mov	r8, r0
 8008b4a:	4689      	mov	r9, r1
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f7 fbc1 	bl	80002d8 <__aeabi_dsub>
 8008b56:	4632      	mov	r2, r6
 8008b58:	463b      	mov	r3, r7
 8008b5a:	f7f7 fbbd 	bl	80002d8 <__aeabi_dsub>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	4650      	mov	r0, sl
 8008b64:	4659      	mov	r1, fp
 8008b66:	f7f7 fbb7 	bl	80002d8 <__aeabi_dsub>
 8008b6a:	ec53 2b18 	vmov	r2, r3, d8
 8008b6e:	f7f7 fd6b 	bl	8000648 <__aeabi_dmul>
 8008b72:	4622      	mov	r2, r4
 8008b74:	4606      	mov	r6, r0
 8008b76:	460f      	mov	r7, r1
 8008b78:	462b      	mov	r3, r5
 8008b7a:	ec51 0b19 	vmov	r0, r1, d9
 8008b7e:	f7f7 fd63 	bl	8000648 <__aeabi_dmul>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4630      	mov	r0, r6
 8008b88:	4639      	mov	r1, r7
 8008b8a:	f7f7 fba7 	bl	80002dc <__adddf3>
 8008b8e:	4606      	mov	r6, r0
 8008b90:	460f      	mov	r7, r1
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4640      	mov	r0, r8
 8008b98:	4649      	mov	r1, r9
 8008b9a:	f7f7 fb9f 	bl	80002dc <__adddf3>
 8008b9e:	a33e      	add	r3, pc, #248	; (adr r3, 8008c98 <__ieee754_pow+0x738>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	460d      	mov	r5, r1
 8008baa:	f7f7 fd4d 	bl	8000648 <__aeabi_dmul>
 8008bae:	4642      	mov	r2, r8
 8008bb0:	ec41 0b18 	vmov	d8, r0, r1
 8008bb4:	464b      	mov	r3, r9
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	4629      	mov	r1, r5
 8008bba:	f7f7 fb8d 	bl	80002d8 <__aeabi_dsub>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	f7f7 fb87 	bl	80002d8 <__aeabi_dsub>
 8008bca:	a335      	add	r3, pc, #212	; (adr r3, 8008ca0 <__ieee754_pow+0x740>)
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	f7f7 fd3a 	bl	8000648 <__aeabi_dmul>
 8008bd4:	a334      	add	r3, pc, #208	; (adr r3, 8008ca8 <__ieee754_pow+0x748>)
 8008bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460f      	mov	r7, r1
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 fd31 	bl	8000648 <__aeabi_dmul>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4630      	mov	r0, r6
 8008bec:	4639      	mov	r1, r7
 8008bee:	f7f7 fb75 	bl	80002dc <__adddf3>
 8008bf2:	9a07      	ldr	r2, [sp, #28]
 8008bf4:	4b37      	ldr	r3, [pc, #220]	; (8008cd4 <__ieee754_pow+0x774>)
 8008bf6:	4413      	add	r3, r2
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	f7f7 fb6e 	bl	80002dc <__adddf3>
 8008c00:	4682      	mov	sl, r0
 8008c02:	9805      	ldr	r0, [sp, #20]
 8008c04:	468b      	mov	fp, r1
 8008c06:	f7f7 fcb5 	bl	8000574 <__aeabi_i2d>
 8008c0a:	9a07      	ldr	r2, [sp, #28]
 8008c0c:	4b32      	ldr	r3, [pc, #200]	; (8008cd8 <__ieee754_pow+0x778>)
 8008c0e:	4413      	add	r3, r2
 8008c10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c14:	4606      	mov	r6, r0
 8008c16:	460f      	mov	r7, r1
 8008c18:	4652      	mov	r2, sl
 8008c1a:	465b      	mov	r3, fp
 8008c1c:	ec51 0b18 	vmov	r0, r1, d8
 8008c20:	f7f7 fb5c 	bl	80002dc <__adddf3>
 8008c24:	4642      	mov	r2, r8
 8008c26:	464b      	mov	r3, r9
 8008c28:	f7f7 fb58 	bl	80002dc <__adddf3>
 8008c2c:	4632      	mov	r2, r6
 8008c2e:	463b      	mov	r3, r7
 8008c30:	f7f7 fb54 	bl	80002dc <__adddf3>
 8008c34:	2000      	movs	r0, #0
 8008c36:	4632      	mov	r2, r6
 8008c38:	463b      	mov	r3, r7
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	460d      	mov	r5, r1
 8008c3e:	f7f7 fb4b 	bl	80002d8 <__aeabi_dsub>
 8008c42:	4642      	mov	r2, r8
 8008c44:	464b      	mov	r3, r9
 8008c46:	f7f7 fb47 	bl	80002d8 <__aeabi_dsub>
 8008c4a:	ec53 2b18 	vmov	r2, r3, d8
 8008c4e:	f7f7 fb43 	bl	80002d8 <__aeabi_dsub>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4650      	mov	r0, sl
 8008c58:	4659      	mov	r1, fp
 8008c5a:	e610      	b.n	800887e <__ieee754_pow+0x31e>
 8008c5c:	2401      	movs	r4, #1
 8008c5e:	e6a1      	b.n	80089a4 <__ieee754_pow+0x444>
 8008c60:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008cb0 <__ieee754_pow+0x750>
 8008c64:	e617      	b.n	8008896 <__ieee754_pow+0x336>
 8008c66:	bf00      	nop
 8008c68:	4a454eef 	.word	0x4a454eef
 8008c6c:	3fca7e28 	.word	0x3fca7e28
 8008c70:	93c9db65 	.word	0x93c9db65
 8008c74:	3fcd864a 	.word	0x3fcd864a
 8008c78:	a91d4101 	.word	0xa91d4101
 8008c7c:	3fd17460 	.word	0x3fd17460
 8008c80:	518f264d 	.word	0x518f264d
 8008c84:	3fd55555 	.word	0x3fd55555
 8008c88:	db6fabff 	.word	0xdb6fabff
 8008c8c:	3fdb6db6 	.word	0x3fdb6db6
 8008c90:	33333303 	.word	0x33333303
 8008c94:	3fe33333 	.word	0x3fe33333
 8008c98:	e0000000 	.word	0xe0000000
 8008c9c:	3feec709 	.word	0x3feec709
 8008ca0:	dc3a03fd 	.word	0xdc3a03fd
 8008ca4:	3feec709 	.word	0x3feec709
 8008ca8:	145b01f5 	.word	0x145b01f5
 8008cac:	be3e2fe0 	.word	0xbe3e2fe0
 8008cb0:	00000000 	.word	0x00000000
 8008cb4:	3ff00000 	.word	0x3ff00000
 8008cb8:	7ff00000 	.word	0x7ff00000
 8008cbc:	43400000 	.word	0x43400000
 8008cc0:	0003988e 	.word	0x0003988e
 8008cc4:	000bb679 	.word	0x000bb679
 8008cc8:	08009358 	.word	0x08009358
 8008ccc:	3ff00000 	.word	0x3ff00000
 8008cd0:	40080000 	.word	0x40080000
 8008cd4:	08009378 	.word	0x08009378
 8008cd8:	08009368 	.word	0x08009368
 8008cdc:	a3b5      	add	r3, pc, #724	; (adr r3, 8008fb4 <__ieee754_pow+0xa54>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	f7f7 faf9 	bl	80002dc <__adddf3>
 8008cea:	4622      	mov	r2, r4
 8008cec:	ec41 0b1a 	vmov	d10, r0, r1
 8008cf0:	462b      	mov	r3, r5
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	f7f7 faef 	bl	80002d8 <__aeabi_dsub>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	ec51 0b1a 	vmov	r0, r1, d10
 8008d02:	f7f7 ff31 	bl	8000b68 <__aeabi_dcmpgt>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f47f ae04 	bne.w	8008914 <__ieee754_pow+0x3b4>
 8008d0c:	4aa4      	ldr	r2, [pc, #656]	; (8008fa0 <__ieee754_pow+0xa40>)
 8008d0e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d12:	4293      	cmp	r3, r2
 8008d14:	f340 8108 	ble.w	8008f28 <__ieee754_pow+0x9c8>
 8008d18:	151b      	asrs	r3, r3, #20
 8008d1a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008d1e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008d22:	fa4a f303 	asr.w	r3, sl, r3
 8008d26:	445b      	add	r3, fp
 8008d28:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008d2c:	4e9d      	ldr	r6, [pc, #628]	; (8008fa4 <__ieee754_pow+0xa44>)
 8008d2e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008d32:	4116      	asrs	r6, r2
 8008d34:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008d38:	2000      	movs	r0, #0
 8008d3a:	ea23 0106 	bic.w	r1, r3, r6
 8008d3e:	f1c2 0214 	rsb	r2, r2, #20
 8008d42:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008d46:	fa4a fa02 	asr.w	sl, sl, r2
 8008d4a:	f1bb 0f00 	cmp.w	fp, #0
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4620      	mov	r0, r4
 8008d54:	4629      	mov	r1, r5
 8008d56:	bfb8      	it	lt
 8008d58:	f1ca 0a00 	rsblt	sl, sl, #0
 8008d5c:	f7f7 fabc 	bl	80002d8 <__aeabi_dsub>
 8008d60:	ec41 0b19 	vmov	d9, r0, r1
 8008d64:	4642      	mov	r2, r8
 8008d66:	464b      	mov	r3, r9
 8008d68:	ec51 0b19 	vmov	r0, r1, d9
 8008d6c:	f7f7 fab6 	bl	80002dc <__adddf3>
 8008d70:	a37b      	add	r3, pc, #492	; (adr r3, 8008f60 <__ieee754_pow+0xa00>)
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	2000      	movs	r0, #0
 8008d78:	4604      	mov	r4, r0
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	f7f7 fc64 	bl	8000648 <__aeabi_dmul>
 8008d80:	ec53 2b19 	vmov	r2, r3, d9
 8008d84:	4606      	mov	r6, r0
 8008d86:	460f      	mov	r7, r1
 8008d88:	4620      	mov	r0, r4
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	f7f7 faa4 	bl	80002d8 <__aeabi_dsub>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4640      	mov	r0, r8
 8008d96:	4649      	mov	r1, r9
 8008d98:	f7f7 fa9e 	bl	80002d8 <__aeabi_dsub>
 8008d9c:	a372      	add	r3, pc, #456	; (adr r3, 8008f68 <__ieee754_pow+0xa08>)
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	f7f7 fc51 	bl	8000648 <__aeabi_dmul>
 8008da6:	a372      	add	r3, pc, #456	; (adr r3, 8008f70 <__ieee754_pow+0xa10>)
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	4680      	mov	r8, r0
 8008dae:	4689      	mov	r9, r1
 8008db0:	4620      	mov	r0, r4
 8008db2:	4629      	mov	r1, r5
 8008db4:	f7f7 fc48 	bl	8000648 <__aeabi_dmul>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	f7f7 fa8c 	bl	80002dc <__adddf3>
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	460d      	mov	r5, r1
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4630      	mov	r0, r6
 8008dce:	4639      	mov	r1, r7
 8008dd0:	f7f7 fa84 	bl	80002dc <__adddf3>
 8008dd4:	4632      	mov	r2, r6
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	4680      	mov	r8, r0
 8008dda:	4689      	mov	r9, r1
 8008ddc:	f7f7 fa7c 	bl	80002d8 <__aeabi_dsub>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4620      	mov	r0, r4
 8008de6:	4629      	mov	r1, r5
 8008de8:	f7f7 fa76 	bl	80002d8 <__aeabi_dsub>
 8008dec:	4642      	mov	r2, r8
 8008dee:	4606      	mov	r6, r0
 8008df0:	460f      	mov	r7, r1
 8008df2:	464b      	mov	r3, r9
 8008df4:	4640      	mov	r0, r8
 8008df6:	4649      	mov	r1, r9
 8008df8:	f7f7 fc26 	bl	8000648 <__aeabi_dmul>
 8008dfc:	a35e      	add	r3, pc, #376	; (adr r3, 8008f78 <__ieee754_pow+0xa18>)
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	4604      	mov	r4, r0
 8008e04:	460d      	mov	r5, r1
 8008e06:	f7f7 fc1f 	bl	8000648 <__aeabi_dmul>
 8008e0a:	a35d      	add	r3, pc, #372	; (adr r3, 8008f80 <__ieee754_pow+0xa20>)
 8008e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e10:	f7f7 fa62 	bl	80002d8 <__aeabi_dsub>
 8008e14:	4622      	mov	r2, r4
 8008e16:	462b      	mov	r3, r5
 8008e18:	f7f7 fc16 	bl	8000648 <__aeabi_dmul>
 8008e1c:	a35a      	add	r3, pc, #360	; (adr r3, 8008f88 <__ieee754_pow+0xa28>)
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	f7f7 fa5b 	bl	80002dc <__adddf3>
 8008e26:	4622      	mov	r2, r4
 8008e28:	462b      	mov	r3, r5
 8008e2a:	f7f7 fc0d 	bl	8000648 <__aeabi_dmul>
 8008e2e:	a358      	add	r3, pc, #352	; (adr r3, 8008f90 <__ieee754_pow+0xa30>)
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f7f7 fa50 	bl	80002d8 <__aeabi_dsub>
 8008e38:	4622      	mov	r2, r4
 8008e3a:	462b      	mov	r3, r5
 8008e3c:	f7f7 fc04 	bl	8000648 <__aeabi_dmul>
 8008e40:	a355      	add	r3, pc, #340	; (adr r3, 8008f98 <__ieee754_pow+0xa38>)
 8008e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e46:	f7f7 fa49 	bl	80002dc <__adddf3>
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	f7f7 fbfb 	bl	8000648 <__aeabi_dmul>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4640      	mov	r0, r8
 8008e58:	4649      	mov	r1, r9
 8008e5a:	f7f7 fa3d 	bl	80002d8 <__aeabi_dsub>
 8008e5e:	4604      	mov	r4, r0
 8008e60:	460d      	mov	r5, r1
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4640      	mov	r0, r8
 8008e68:	4649      	mov	r1, r9
 8008e6a:	f7f7 fbed 	bl	8000648 <__aeabi_dmul>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	ec41 0b19 	vmov	d9, r0, r1
 8008e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e78:	4620      	mov	r0, r4
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	f7f7 fa2c 	bl	80002d8 <__aeabi_dsub>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	ec51 0b19 	vmov	r0, r1, d9
 8008e88:	f7f7 fd08 	bl	800089c <__aeabi_ddiv>
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	4604      	mov	r4, r0
 8008e90:	460d      	mov	r5, r1
 8008e92:	463b      	mov	r3, r7
 8008e94:	4640      	mov	r0, r8
 8008e96:	4649      	mov	r1, r9
 8008e98:	f7f7 fbd6 	bl	8000648 <__aeabi_dmul>
 8008e9c:	4632      	mov	r2, r6
 8008e9e:	463b      	mov	r3, r7
 8008ea0:	f7f7 fa1c 	bl	80002dc <__adddf3>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	4629      	mov	r1, r5
 8008eac:	f7f7 fa14 	bl	80002d8 <__aeabi_dsub>
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	f7f7 fa10 	bl	80002d8 <__aeabi_dsub>
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4602      	mov	r2, r0
 8008ebc:	493a      	ldr	r1, [pc, #232]	; (8008fa8 <__ieee754_pow+0xa48>)
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f7f7 fa0a 	bl	80002d8 <__aeabi_dsub>
 8008ec4:	ec41 0b10 	vmov	d0, r0, r1
 8008ec8:	ee10 3a90 	vmov	r3, s1
 8008ecc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ed4:	da2b      	bge.n	8008f2e <__ieee754_pow+0x9ce>
 8008ed6:	4650      	mov	r0, sl
 8008ed8:	f000 f966 	bl	80091a8 <scalbn>
 8008edc:	ec51 0b10 	vmov	r0, r1, d0
 8008ee0:	ec53 2b18 	vmov	r2, r3, d8
 8008ee4:	f7ff bbed 	b.w	80086c2 <__ieee754_pow+0x162>
 8008ee8:	4b30      	ldr	r3, [pc, #192]	; (8008fac <__ieee754_pow+0xa4c>)
 8008eea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008eee:	429e      	cmp	r6, r3
 8008ef0:	f77f af0c 	ble.w	8008d0c <__ieee754_pow+0x7ac>
 8008ef4:	4b2e      	ldr	r3, [pc, #184]	; (8008fb0 <__ieee754_pow+0xa50>)
 8008ef6:	440b      	add	r3, r1
 8008ef8:	4303      	orrs	r3, r0
 8008efa:	d009      	beq.n	8008f10 <__ieee754_pow+0x9b0>
 8008efc:	ec51 0b18 	vmov	r0, r1, d8
 8008f00:	2200      	movs	r2, #0
 8008f02:	2300      	movs	r3, #0
 8008f04:	f7f7 fe12 	bl	8000b2c <__aeabi_dcmplt>
 8008f08:	3800      	subs	r0, #0
 8008f0a:	bf18      	it	ne
 8008f0c:	2001      	movne	r0, #1
 8008f0e:	e447      	b.n	80087a0 <__ieee754_pow+0x240>
 8008f10:	4622      	mov	r2, r4
 8008f12:	462b      	mov	r3, r5
 8008f14:	f7f7 f9e0 	bl	80002d8 <__aeabi_dsub>
 8008f18:	4642      	mov	r2, r8
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	f7f7 fe1a 	bl	8000b54 <__aeabi_dcmpge>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	f43f aef3 	beq.w	8008d0c <__ieee754_pow+0x7ac>
 8008f26:	e7e9      	b.n	8008efc <__ieee754_pow+0x99c>
 8008f28:	f04f 0a00 	mov.w	sl, #0
 8008f2c:	e71a      	b.n	8008d64 <__ieee754_pow+0x804>
 8008f2e:	ec51 0b10 	vmov	r0, r1, d0
 8008f32:	4619      	mov	r1, r3
 8008f34:	e7d4      	b.n	8008ee0 <__ieee754_pow+0x980>
 8008f36:	491c      	ldr	r1, [pc, #112]	; (8008fa8 <__ieee754_pow+0xa48>)
 8008f38:	2000      	movs	r0, #0
 8008f3a:	f7ff bb30 	b.w	800859e <__ieee754_pow+0x3e>
 8008f3e:	2000      	movs	r0, #0
 8008f40:	2100      	movs	r1, #0
 8008f42:	f7ff bb2c 	b.w	800859e <__ieee754_pow+0x3e>
 8008f46:	4630      	mov	r0, r6
 8008f48:	4639      	mov	r1, r7
 8008f4a:	f7ff bb28 	b.w	800859e <__ieee754_pow+0x3e>
 8008f4e:	9204      	str	r2, [sp, #16]
 8008f50:	f7ff bb7a 	b.w	8008648 <__ieee754_pow+0xe8>
 8008f54:	2300      	movs	r3, #0
 8008f56:	f7ff bb64 	b.w	8008622 <__ieee754_pow+0xc2>
 8008f5a:	bf00      	nop
 8008f5c:	f3af 8000 	nop.w
 8008f60:	00000000 	.word	0x00000000
 8008f64:	3fe62e43 	.word	0x3fe62e43
 8008f68:	fefa39ef 	.word	0xfefa39ef
 8008f6c:	3fe62e42 	.word	0x3fe62e42
 8008f70:	0ca86c39 	.word	0x0ca86c39
 8008f74:	be205c61 	.word	0xbe205c61
 8008f78:	72bea4d0 	.word	0x72bea4d0
 8008f7c:	3e663769 	.word	0x3e663769
 8008f80:	c5d26bf1 	.word	0xc5d26bf1
 8008f84:	3ebbbd41 	.word	0x3ebbbd41
 8008f88:	af25de2c 	.word	0xaf25de2c
 8008f8c:	3f11566a 	.word	0x3f11566a
 8008f90:	16bebd93 	.word	0x16bebd93
 8008f94:	3f66c16c 	.word	0x3f66c16c
 8008f98:	5555553e 	.word	0x5555553e
 8008f9c:	3fc55555 	.word	0x3fc55555
 8008fa0:	3fe00000 	.word	0x3fe00000
 8008fa4:	000fffff 	.word	0x000fffff
 8008fa8:	3ff00000 	.word	0x3ff00000
 8008fac:	4090cbff 	.word	0x4090cbff
 8008fb0:	3f6f3400 	.word	0x3f6f3400
 8008fb4:	652b82fe 	.word	0x652b82fe
 8008fb8:	3c971547 	.word	0x3c971547

08008fbc <__ieee754_sqrt>:
 8008fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc0:	ec55 4b10 	vmov	r4, r5, d0
 8008fc4:	4e55      	ldr	r6, [pc, #340]	; (800911c <__ieee754_sqrt+0x160>)
 8008fc6:	43ae      	bics	r6, r5
 8008fc8:	ee10 0a10 	vmov	r0, s0
 8008fcc:	ee10 3a10 	vmov	r3, s0
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	d110      	bne.n	8008ff8 <__ieee754_sqrt+0x3c>
 8008fd6:	ee10 2a10 	vmov	r2, s0
 8008fda:	462b      	mov	r3, r5
 8008fdc:	f7f7 fb34 	bl	8000648 <__aeabi_dmul>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	f7f7 f978 	bl	80002dc <__adddf3>
 8008fec:	4604      	mov	r4, r0
 8008fee:	460d      	mov	r5, r1
 8008ff0:	ec45 4b10 	vmov	d0, r4, r5
 8008ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff8:	2d00      	cmp	r5, #0
 8008ffa:	dc10      	bgt.n	800901e <__ieee754_sqrt+0x62>
 8008ffc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009000:	4330      	orrs	r0, r6
 8009002:	d0f5      	beq.n	8008ff0 <__ieee754_sqrt+0x34>
 8009004:	b15d      	cbz	r5, 800901e <__ieee754_sqrt+0x62>
 8009006:	ee10 2a10 	vmov	r2, s0
 800900a:	462b      	mov	r3, r5
 800900c:	ee10 0a10 	vmov	r0, s0
 8009010:	f7f7 f962 	bl	80002d8 <__aeabi_dsub>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	f7f7 fc40 	bl	800089c <__aeabi_ddiv>
 800901c:	e7e6      	b.n	8008fec <__ieee754_sqrt+0x30>
 800901e:	1512      	asrs	r2, r2, #20
 8009020:	d074      	beq.n	800910c <__ieee754_sqrt+0x150>
 8009022:	07d4      	lsls	r4, r2, #31
 8009024:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009028:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800902c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009030:	bf5e      	ittt	pl
 8009032:	0fda      	lsrpl	r2, r3, #31
 8009034:	005b      	lslpl	r3, r3, #1
 8009036:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800903a:	2400      	movs	r4, #0
 800903c:	0fda      	lsrs	r2, r3, #31
 800903e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009042:	107f      	asrs	r7, r7, #1
 8009044:	005b      	lsls	r3, r3, #1
 8009046:	2516      	movs	r5, #22
 8009048:	4620      	mov	r0, r4
 800904a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800904e:	1886      	adds	r6, r0, r2
 8009050:	428e      	cmp	r6, r1
 8009052:	bfde      	ittt	le
 8009054:	1b89      	suble	r1, r1, r6
 8009056:	18b0      	addle	r0, r6, r2
 8009058:	18a4      	addle	r4, r4, r2
 800905a:	0049      	lsls	r1, r1, #1
 800905c:	3d01      	subs	r5, #1
 800905e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009062:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009066:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800906a:	d1f0      	bne.n	800904e <__ieee754_sqrt+0x92>
 800906c:	462a      	mov	r2, r5
 800906e:	f04f 0e20 	mov.w	lr, #32
 8009072:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009076:	4281      	cmp	r1, r0
 8009078:	eb06 0c05 	add.w	ip, r6, r5
 800907c:	dc02      	bgt.n	8009084 <__ieee754_sqrt+0xc8>
 800907e:	d113      	bne.n	80090a8 <__ieee754_sqrt+0xec>
 8009080:	459c      	cmp	ip, r3
 8009082:	d811      	bhi.n	80090a8 <__ieee754_sqrt+0xec>
 8009084:	f1bc 0f00 	cmp.w	ip, #0
 8009088:	eb0c 0506 	add.w	r5, ip, r6
 800908c:	da43      	bge.n	8009116 <__ieee754_sqrt+0x15a>
 800908e:	2d00      	cmp	r5, #0
 8009090:	db41      	blt.n	8009116 <__ieee754_sqrt+0x15a>
 8009092:	f100 0801 	add.w	r8, r0, #1
 8009096:	1a09      	subs	r1, r1, r0
 8009098:	459c      	cmp	ip, r3
 800909a:	bf88      	it	hi
 800909c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80090a0:	eba3 030c 	sub.w	r3, r3, ip
 80090a4:	4432      	add	r2, r6
 80090a6:	4640      	mov	r0, r8
 80090a8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80090ac:	f1be 0e01 	subs.w	lr, lr, #1
 80090b0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80090b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80090b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80090bc:	d1db      	bne.n	8009076 <__ieee754_sqrt+0xba>
 80090be:	430b      	orrs	r3, r1
 80090c0:	d006      	beq.n	80090d0 <__ieee754_sqrt+0x114>
 80090c2:	1c50      	adds	r0, r2, #1
 80090c4:	bf13      	iteet	ne
 80090c6:	3201      	addne	r2, #1
 80090c8:	3401      	addeq	r4, #1
 80090ca:	4672      	moveq	r2, lr
 80090cc:	f022 0201 	bicne.w	r2, r2, #1
 80090d0:	1063      	asrs	r3, r4, #1
 80090d2:	0852      	lsrs	r2, r2, #1
 80090d4:	07e1      	lsls	r1, r4, #31
 80090d6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80090da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80090de:	bf48      	it	mi
 80090e0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80090e4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80090e8:	4614      	mov	r4, r2
 80090ea:	e781      	b.n	8008ff0 <__ieee754_sqrt+0x34>
 80090ec:	0ad9      	lsrs	r1, r3, #11
 80090ee:	3815      	subs	r0, #21
 80090f0:	055b      	lsls	r3, r3, #21
 80090f2:	2900      	cmp	r1, #0
 80090f4:	d0fa      	beq.n	80090ec <__ieee754_sqrt+0x130>
 80090f6:	02cd      	lsls	r5, r1, #11
 80090f8:	d50a      	bpl.n	8009110 <__ieee754_sqrt+0x154>
 80090fa:	f1c2 0420 	rsb	r4, r2, #32
 80090fe:	fa23 f404 	lsr.w	r4, r3, r4
 8009102:	1e55      	subs	r5, r2, #1
 8009104:	4093      	lsls	r3, r2
 8009106:	4321      	orrs	r1, r4
 8009108:	1b42      	subs	r2, r0, r5
 800910a:	e78a      	b.n	8009022 <__ieee754_sqrt+0x66>
 800910c:	4610      	mov	r0, r2
 800910e:	e7f0      	b.n	80090f2 <__ieee754_sqrt+0x136>
 8009110:	0049      	lsls	r1, r1, #1
 8009112:	3201      	adds	r2, #1
 8009114:	e7ef      	b.n	80090f6 <__ieee754_sqrt+0x13a>
 8009116:	4680      	mov	r8, r0
 8009118:	e7bd      	b.n	8009096 <__ieee754_sqrt+0xda>
 800911a:	bf00      	nop
 800911c:	7ff00000 	.word	0x7ff00000

08009120 <with_errno>:
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	4604      	mov	r4, r0
 8009124:	460d      	mov	r5, r1
 8009126:	4616      	mov	r6, r2
 8009128:	f7fe fcce 	bl	8007ac8 <__errno>
 800912c:	4629      	mov	r1, r5
 800912e:	6006      	str	r6, [r0, #0]
 8009130:	4620      	mov	r0, r4
 8009132:	bd70      	pop	{r4, r5, r6, pc}

08009134 <xflow>:
 8009134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009136:	4614      	mov	r4, r2
 8009138:	461d      	mov	r5, r3
 800913a:	b108      	cbz	r0, 8009140 <xflow+0xc>
 800913c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009140:	e9cd 2300 	strd	r2, r3, [sp]
 8009144:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009148:	4620      	mov	r0, r4
 800914a:	4629      	mov	r1, r5
 800914c:	f7f7 fa7c 	bl	8000648 <__aeabi_dmul>
 8009150:	2222      	movs	r2, #34	; 0x22
 8009152:	b003      	add	sp, #12
 8009154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009158:	f7ff bfe2 	b.w	8009120 <with_errno>

0800915c <__math_uflow>:
 800915c:	b508      	push	{r3, lr}
 800915e:	2200      	movs	r2, #0
 8009160:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009164:	f7ff ffe6 	bl	8009134 <xflow>
 8009168:	ec41 0b10 	vmov	d0, r0, r1
 800916c:	bd08      	pop	{r3, pc}

0800916e <__math_oflow>:
 800916e:	b508      	push	{r3, lr}
 8009170:	2200      	movs	r2, #0
 8009172:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009176:	f7ff ffdd 	bl	8009134 <xflow>
 800917a:	ec41 0b10 	vmov	d0, r0, r1
 800917e:	bd08      	pop	{r3, pc}

08009180 <fabs>:
 8009180:	ec51 0b10 	vmov	r0, r1, d0
 8009184:	ee10 2a10 	vmov	r2, s0
 8009188:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800918c:	ec43 2b10 	vmov	d0, r2, r3
 8009190:	4770      	bx	lr

08009192 <finite>:
 8009192:	b082      	sub	sp, #8
 8009194:	ed8d 0b00 	vstr	d0, [sp]
 8009198:	9801      	ldr	r0, [sp, #4]
 800919a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800919e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80091a2:	0fc0      	lsrs	r0, r0, #31
 80091a4:	b002      	add	sp, #8
 80091a6:	4770      	bx	lr

080091a8 <scalbn>:
 80091a8:	b570      	push	{r4, r5, r6, lr}
 80091aa:	ec55 4b10 	vmov	r4, r5, d0
 80091ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80091b2:	4606      	mov	r6, r0
 80091b4:	462b      	mov	r3, r5
 80091b6:	b99a      	cbnz	r2, 80091e0 <scalbn+0x38>
 80091b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091bc:	4323      	orrs	r3, r4
 80091be:	d036      	beq.n	800922e <scalbn+0x86>
 80091c0:	4b39      	ldr	r3, [pc, #228]	; (80092a8 <scalbn+0x100>)
 80091c2:	4629      	mov	r1, r5
 80091c4:	ee10 0a10 	vmov	r0, s0
 80091c8:	2200      	movs	r2, #0
 80091ca:	f7f7 fa3d 	bl	8000648 <__aeabi_dmul>
 80091ce:	4b37      	ldr	r3, [pc, #220]	; (80092ac <scalbn+0x104>)
 80091d0:	429e      	cmp	r6, r3
 80091d2:	4604      	mov	r4, r0
 80091d4:	460d      	mov	r5, r1
 80091d6:	da10      	bge.n	80091fa <scalbn+0x52>
 80091d8:	a32b      	add	r3, pc, #172	; (adr r3, 8009288 <scalbn+0xe0>)
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	e03a      	b.n	8009256 <scalbn+0xae>
 80091e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80091e4:	428a      	cmp	r2, r1
 80091e6:	d10c      	bne.n	8009202 <scalbn+0x5a>
 80091e8:	ee10 2a10 	vmov	r2, s0
 80091ec:	4620      	mov	r0, r4
 80091ee:	4629      	mov	r1, r5
 80091f0:	f7f7 f874 	bl	80002dc <__adddf3>
 80091f4:	4604      	mov	r4, r0
 80091f6:	460d      	mov	r5, r1
 80091f8:	e019      	b.n	800922e <scalbn+0x86>
 80091fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80091fe:	460b      	mov	r3, r1
 8009200:	3a36      	subs	r2, #54	; 0x36
 8009202:	4432      	add	r2, r6
 8009204:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009208:	428a      	cmp	r2, r1
 800920a:	dd08      	ble.n	800921e <scalbn+0x76>
 800920c:	2d00      	cmp	r5, #0
 800920e:	a120      	add	r1, pc, #128	; (adr r1, 8009290 <scalbn+0xe8>)
 8009210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009214:	da1c      	bge.n	8009250 <scalbn+0xa8>
 8009216:	a120      	add	r1, pc, #128	; (adr r1, 8009298 <scalbn+0xf0>)
 8009218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800921c:	e018      	b.n	8009250 <scalbn+0xa8>
 800921e:	2a00      	cmp	r2, #0
 8009220:	dd08      	ble.n	8009234 <scalbn+0x8c>
 8009222:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009226:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800922a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800922e:	ec45 4b10 	vmov	d0, r4, r5
 8009232:	bd70      	pop	{r4, r5, r6, pc}
 8009234:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009238:	da19      	bge.n	800926e <scalbn+0xc6>
 800923a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800923e:	429e      	cmp	r6, r3
 8009240:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009244:	dd0a      	ble.n	800925c <scalbn+0xb4>
 8009246:	a112      	add	r1, pc, #72	; (adr r1, 8009290 <scalbn+0xe8>)
 8009248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1e2      	bne.n	8009216 <scalbn+0x6e>
 8009250:	a30f      	add	r3, pc, #60	; (adr r3, 8009290 <scalbn+0xe8>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f7f7 f9f7 	bl	8000648 <__aeabi_dmul>
 800925a:	e7cb      	b.n	80091f4 <scalbn+0x4c>
 800925c:	a10a      	add	r1, pc, #40	; (adr r1, 8009288 <scalbn+0xe0>)
 800925e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0b8      	beq.n	80091d8 <scalbn+0x30>
 8009266:	a10e      	add	r1, pc, #56	; (adr r1, 80092a0 <scalbn+0xf8>)
 8009268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800926c:	e7b4      	b.n	80091d8 <scalbn+0x30>
 800926e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009272:	3236      	adds	r2, #54	; 0x36
 8009274:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009278:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800927c:	4620      	mov	r0, r4
 800927e:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <scalbn+0x108>)
 8009280:	2200      	movs	r2, #0
 8009282:	e7e8      	b.n	8009256 <scalbn+0xae>
 8009284:	f3af 8000 	nop.w
 8009288:	c2f8f359 	.word	0xc2f8f359
 800928c:	01a56e1f 	.word	0x01a56e1f
 8009290:	8800759c 	.word	0x8800759c
 8009294:	7e37e43c 	.word	0x7e37e43c
 8009298:	8800759c 	.word	0x8800759c
 800929c:	fe37e43c 	.word	0xfe37e43c
 80092a0:	c2f8f359 	.word	0xc2f8f359
 80092a4:	81a56e1f 	.word	0x81a56e1f
 80092a8:	43500000 	.word	0x43500000
 80092ac:	ffff3cb0 	.word	0xffff3cb0
 80092b0:	3c900000 	.word	0x3c900000

080092b4 <_init>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	bf00      	nop
 80092b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ba:	bc08      	pop	{r3}
 80092bc:	469e      	mov	lr, r3
 80092be:	4770      	bx	lr

080092c0 <_fini>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	bf00      	nop
 80092c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c6:	bc08      	pop	{r3}
 80092c8:	469e      	mov	lr, r3
 80092ca:	4770      	bx	lr
