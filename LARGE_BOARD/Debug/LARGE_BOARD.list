
LARGE_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005068  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005314  08005314  00015314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005358  08005358  00015358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800535c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  0800536c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  0800536c  000200c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f2d8  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001bcd  00000000  00000000  0002f316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a30  00000000  00000000  00030ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000998  00000000  00000000  00031918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002e9d2  00000000  00000000  000322b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d8ed  00000000  00000000  00060c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00131e6e  00000000  00000000  0006e56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a03dd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000029a0  00000000  00000000  001a0430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080052fc 	.word	0x080052fc

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080052fc 	.word	0x080052fc

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fb44 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f808 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f8d0 	bl	80007a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f87a 	bl	80006f8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000604:	f000 f8c4 	bl	8000790 <MX_USB_OTG_HS_USB_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x18>
	...

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b09c      	sub	sp, #112	; 0x70
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000616:	224c      	movs	r2, #76	; 0x4c
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fe66 	bl	80052ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2220      	movs	r2, #32
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fe60 	bl	80052ec <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800062c:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <SystemClock_Config+0xe4>)
 800062e:	f04f 32ff 	mov.w	r2, #4294967295
 8000632:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000636:	2004      	movs	r0, #4
 8000638:	f000 fe62 	bl	8001300 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800063c:	2300      	movs	r3, #0
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <SystemClock_Config+0xe8>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a2b      	ldr	r2, [pc, #172]	; (80006f4 <SystemClock_Config+0xe8>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <SystemClock_Config+0xe8>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000658:	bf00      	nop
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <SystemClock_Config+0xe8>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000666:	d1f8      	bne.n	800065a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000668:	2321      	movs	r3, #33	; 0x21
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800066c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000672:	2301      	movs	r3, #1
 8000674:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	2302      	movs	r3, #2
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000682:	2318      	movs	r3, #24
 8000684:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000686:	2302      	movs	r3, #2
 8000688:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068a:	2304      	movs	r3, #4
 800068c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000692:	230c      	movs	r3, #12
 8000694:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000696:	2300      	movs	r3, #0
 8000698:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fe86 	bl	80013b4 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ae:	f000 f991 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	233f      	movs	r3, #63	; 0x3f
 80006b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2303      	movs	r3, #3
 80006b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fa9e 	bl	8001c18 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80006e2:	f000 f977 	bl	80009d4 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3770      	adds	r7, #112	; 0x70
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	58024400 	.word	0x58024400
 80006f4:	58024800 	.word	0x58024800

080006f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <MX_USART3_UART_Init+0x90>)
 80006fe:	4a23      	ldr	r2, [pc, #140]	; (800078c <MX_USART3_UART_Init+0x94>)
 8000700:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_USART3_UART_Init+0x90>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_USART3_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_USART3_UART_Init+0x90>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_USART3_UART_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_USART3_UART_Init+0x90>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_USART3_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_USART3_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_USART3_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USART3_UART_Init+0x90>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_USART3_UART_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000740:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_USART3_UART_Init+0x90>)
 8000742:	f003 fbd5 	bl	8003ef0 <HAL_UART_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800074c:	f000 f942 	bl	80009d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_USART3_UART_Init+0x90>)
 8000754:	f004 fcdb 	bl	800510e <HAL_UARTEx_SetTxFifoThreshold>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800075e:	f000 f939 	bl	80009d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000762:	2100      	movs	r1, #0
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <MX_USART3_UART_Init+0x90>)
 8000766:	f004 fd10 	bl	800518a <HAL_UARTEx_SetRxFifoThreshold>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000770:	f000 f930 	bl	80009d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_USART3_UART_Init+0x90>)
 8000776:	f004 fc91 	bl	800509c <HAL_UARTEx_DisableFifoMode>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000780:	f000 f928 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2400002c 	.word	0x2400002c
 800078c:	40004800 	.word	0x40004800

08000790 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	; 0x38
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b80      	ldr	r3, [pc, #512]	; (80009b8 <MX_GPIO_Init+0x218>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007bc:	4a7e      	ldr	r2, [pc, #504]	; (80009b8 <MX_GPIO_Init+0x218>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c6:	4b7c      	ldr	r3, [pc, #496]	; (80009b8 <MX_GPIO_Init+0x218>)
 80007c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	623b      	str	r3, [r7, #32]
 80007d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d4:	4b78      	ldr	r3, [pc, #480]	; (80009b8 <MX_GPIO_Init+0x218>)
 80007d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007da:	4a77      	ldr	r2, [pc, #476]	; (80009b8 <MX_GPIO_Init+0x218>)
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e4:	4b74      	ldr	r3, [pc, #464]	; (80009b8 <MX_GPIO_Init+0x218>)
 80007e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ea:	f003 0320 	and.w	r3, r3, #32
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	4b71      	ldr	r3, [pc, #452]	; (80009b8 <MX_GPIO_Init+0x218>)
 80007f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f8:	4a6f      	ldr	r2, [pc, #444]	; (80009b8 <MX_GPIO_Init+0x218>)
 80007fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000802:	4b6d      	ldr	r3, [pc, #436]	; (80009b8 <MX_GPIO_Init+0x218>)
 8000804:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b69      	ldr	r3, [pc, #420]	; (80009b8 <MX_GPIO_Init+0x218>)
 8000812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000816:	4a68      	ldr	r2, [pc, #416]	; (80009b8 <MX_GPIO_Init+0x218>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000820:	4b65      	ldr	r3, [pc, #404]	; (80009b8 <MX_GPIO_Init+0x218>)
 8000822:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b62      	ldr	r3, [pc, #392]	; (80009b8 <MX_GPIO_Init+0x218>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000834:	4a60      	ldr	r2, [pc, #384]	; (80009b8 <MX_GPIO_Init+0x218>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800083e:	4b5e      	ldr	r3, [pc, #376]	; (80009b8 <MX_GPIO_Init+0x218>)
 8000840:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084c:	4b5a      	ldr	r3, [pc, #360]	; (80009b8 <MX_GPIO_Init+0x218>)
 800084e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000852:	4a59      	ldr	r2, [pc, #356]	; (80009b8 <MX_GPIO_Init+0x218>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000858:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800085c:	4b56      	ldr	r3, [pc, #344]	; (80009b8 <MX_GPIO_Init+0x218>)
 800085e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b53      	ldr	r3, [pc, #332]	; (80009b8 <MX_GPIO_Init+0x218>)
 800086c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000870:	4a51      	ldr	r2, [pc, #324]	; (80009b8 <MX_GPIO_Init+0x218>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087a:	4b4f      	ldr	r3, [pc, #316]	; (80009b8 <MX_GPIO_Init+0x218>)
 800087c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000888:	4b4b      	ldr	r3, [pc, #300]	; (80009b8 <MX_GPIO_Init+0x218>)
 800088a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088e:	4a4a      	ldr	r2, [pc, #296]	; (80009b8 <MX_GPIO_Init+0x218>)
 8000890:	f043 0310 	orr.w	r3, r3, #16
 8000894:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000898:	4b47      	ldr	r3, [pc, #284]	; (80009b8 <MX_GPIO_Init+0x218>)
 800089a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ac:	4843      	ldr	r0, [pc, #268]	; (80009bc <MX_GPIO_Init+0x21c>)
 80008ae:	f000 fd0d 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f244 0101 	movw	r1, #16385	; 0x4001
 80008b8:	4841      	ldr	r0, [pc, #260]	; (80009c0 <MX_GPIO_Init+0x220>)
 80008ba:	f000 fd07 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2102      	movs	r1, #2
 80008c2:	4840      	ldr	r0, [pc, #256]	; (80009c4 <MX_GPIO_Init+0x224>)
 80008c4:	f000 fd02 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	4619      	mov	r1, r3
 80008dc:	483a      	ldr	r0, [pc, #232]	; (80009c8 <MX_GPIO_Init+0x228>)
 80008de:	f000 fb45 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80008e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	4830      	ldr	r0, [pc, #192]	; (80009bc <MX_GPIO_Init+0x21c>)
 80008fc:	f000 fb36 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000900:	f244 0301 	movw	r3, #16385	; 0x4001
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	4829      	ldr	r0, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x220>)
 800091a:	f000 fb27 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000922:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	4826      	ldr	r0, [pc, #152]	; (80009cc <MX_GPIO_Init+0x22c>)
 8000934:	f000 fb1a 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	4619      	mov	r1, r3
 800094c:	4820      	ldr	r0, [pc, #128]	; (80009d0 <MX_GPIO_Init+0x230>)
 800094e:	f000 fb0d 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000964:	230a      	movs	r3, #10
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	4818      	ldr	r0, [pc, #96]	; (80009d0 <MX_GPIO_Init+0x230>)
 8000970:	f000 fafc 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000974:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098a:	4619      	mov	r1, r3
 800098c:	4810      	ldr	r0, [pc, #64]	; (80009d0 <MX_GPIO_Init+0x230>)
 800098e:	f000 faed 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000992:	2302      	movs	r3, #2
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MX_GPIO_Init+0x224>)
 80009aa:	f000 fadf 	bl	8000f6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ae:	bf00      	nop
 80009b0:	3738      	adds	r7, #56	; 0x38
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	58024400 	.word	0x58024400
 80009bc:	58021400 	.word	0x58021400
 80009c0:	58020400 	.word	0x58020400
 80009c4:	58021000 	.word	0x58021000
 80009c8:	58020800 	.word	0x58020800
 80009cc:	58021800 	.word	0x58021800
 80009d0:	58020000 	.word	0x58020000

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_MspInit+0x30>)
 80009e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009ec:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x30>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x30>)
 80009f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	58024400 	.word	0x58024400

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0ba      	sub	sp, #232	; 0xe8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	22c0      	movs	r2, #192	; 0xc0
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f004 fc59 	bl	80052ec <memset>
  if(huart->Instance==USART3)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a27      	ldr	r2, [pc, #156]	; (8000adc <HAL_UART_MspInit+0xc8>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d146      	bne.n	8000ad2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a44:	f04f 0202 	mov.w	r2, #2
 8000a48:	f04f 0300 	mov.w	r3, #0
 8000a4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fc68 	bl	8002330 <HAL_RCCEx_PeriphCLKConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a66:	f7ff ffb5 	bl	80009d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <HAL_UART_MspInit+0xcc>)
 8000a6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0xcc>)
 8000a72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a76:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_UART_MspInit+0xcc>)
 8000a7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_UART_MspInit+0xcc>)
 8000a8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a8e:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0xcc>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0xcc>)
 8000a9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000aa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <HAL_UART_MspInit+0xd0>)
 8000ace:	f000 fa4d 	bl	8000f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	37e8      	adds	r7, #232	; 0xe8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004800 	.word	0x40004800
 8000ae0:	58024400 	.word	0x58024400
 8000ae4:	58020c00 	.word	0x58020c00

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f916 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b40:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <SystemInit+0xd0>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a31      	ldr	r2, [pc, #196]	; (8000c0c <SystemInit+0xd0>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b50:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <SystemInit+0xd4>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 030f 	and.w	r3, r3, #15
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d807      	bhi.n	8000b6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <SystemInit+0xd4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f023 030f 	bic.w	r3, r3, #15
 8000b64:	4a2a      	ldr	r2, [pc, #168]	; (8000c10 <SystemInit+0xd4>)
 8000b66:	f043 0303 	orr.w	r3, r3, #3
 8000b6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b6c:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <SystemInit+0xd8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a28      	ldr	r2, [pc, #160]	; (8000c14 <SystemInit+0xd8>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <SystemInit+0xd8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b7e:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <SystemInit+0xd8>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4924      	ldr	r1, [pc, #144]	; (8000c14 <SystemInit+0xd8>)
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <SystemInit+0xdc>)
 8000b86:	4013      	ands	r3, r2
 8000b88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <SystemInit+0xd4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 030c 	and.w	r3, r3, #12
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d007      	beq.n	8000ba6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <SystemInit+0xd4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f023 030f 	bic.w	r3, r3, #15
 8000b9e:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <SystemInit+0xd4>)
 8000ba0:	f043 0303 	orr.w	r3, r3, #3
 8000ba4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <SystemInit+0xd8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <SystemInit+0xd8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <SystemInit+0xd8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <SystemInit+0xd8>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <SystemInit+0xe0>)
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <SystemInit+0xd8>)
 8000bc0:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <SystemInit+0xe4>)
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <SystemInit+0xd8>)
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <SystemInit+0xe8>)
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <SystemInit+0xd8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <SystemInit+0xd8>)
 8000bd2:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <SystemInit+0xe8>)
 8000bd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <SystemInit+0xd8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <SystemInit+0xd8>)
 8000bde:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <SystemInit+0xe8>)
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <SystemInit+0xd8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <SystemInit+0xd8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <SystemInit+0xd8>)
 8000bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <SystemInit+0xd8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <SystemInit+0xec>)
 8000bfc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00
 8000c10:	52002000 	.word	0x52002000
 8000c14:	58024400 	.word	0x58024400
 8000c18:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c1c:	02020200 	.word	0x02020200
 8000c20:	01ff0000 	.word	0x01ff0000
 8000c24:	01010280 	.word	0x01010280
 8000c28:	52004000 	.word	0x52004000

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c30:	f7ff ff84 	bl	8000b3c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c36:	490d      	ldr	r1, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	; (8000c78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f004 fb23 	bl	80052a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fcc7 	bl	80005f0 <main>
  bx  lr
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c64:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c6c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c70:	0800535c 	.word	0x0800535c
  ldr r2, =_sbss
 8000c74:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c78:	240000c4 	.word	0x240000c4

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c86:	2003      	movs	r0, #3
 8000c88:	f000 f93e 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000c8c:	f001 f97a 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8000c90:	4602      	mov	r2, r0
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_Init+0x68>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	f003 030f 	and.w	r3, r3, #15
 8000c9c:	4913      	ldr	r1, [pc, #76]	; (8000cec <HAL_Init+0x6c>)
 8000c9e:	5ccb      	ldrb	r3, [r1, r3]
 8000ca0:	f003 031f 	and.w	r3, r3, #31
 8000ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_Init+0x68>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_Init+0x6c>)
 8000cb4:	5cd3      	ldrb	r3, [r2, r3]
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_Init+0x70>)
 8000cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cc4:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <HAL_Init+0x74>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 f814 	bl	8000cf8 <HAL_InitTick>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e002      	b.n	8000ce0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cda:	f7ff fe81 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	08005314 	.word	0x08005314
 8000cf0:	24000004 	.word	0x24000004
 8000cf4:	24000000 	.word	0x24000000

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_InitTick+0x60>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e021      	b.n	8000d50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_InitTick+0x64>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_InitTick+0x60>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f915 	bl	8000f52 <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f000 f8ed 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_InitTick+0x68>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2400000c 	.word	0x2400000c
 8000d5c:	24000000 	.word	0x24000000
 8000d60:	24000008 	.word	0x24000008

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	2400000c 	.word	0x2400000c
 8000d88:	240000c0 	.word	0x240000c0

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	240000c0 	.word	0x240000c0

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <__NVIC_SetPriorityGrouping+0x40>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x40>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00
 8000de8:	05fa0000 	.word	0x05fa0000

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff47 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff5e 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff90 	bl	8000e5c <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5f 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffb2 	bl	8000ec4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f7a:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <HAL_GPIO_Init+0x234>)
 8000f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f7e:	e194      	b.n	80012aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 8186 	beq.w	80012a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d005      	beq.n	8000fb0 <HAL_GPIO_Init+0x44>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d130      	bne.n	8001012 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	f003 0201 	and.w	r2, r3, #1
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b03      	cmp	r3, #3
 800101c:	d017      	beq.n	800104e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d123      	bne.n	80010a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	69b9      	ldr	r1, [r7, #24]
 800109e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0203 	and.w	r2, r3, #3
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80e0 	beq.w	80012a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <HAL_GPIO_Init+0x238>)
 80010e6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010ea:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <HAL_GPIO_Init+0x238>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HAL_GPIO_Init+0x238>)
 80010f6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001102:	4a29      	ldr	r2, [pc, #164]	; (80011a8 <HAL_GPIO_Init+0x23c>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a20      	ldr	r2, [pc, #128]	; (80011ac <HAL_GPIO_Init+0x240>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d052      	beq.n	80011d4 <HAL_GPIO_Init+0x268>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <HAL_GPIO_Init+0x244>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d031      	beq.n	800119a <HAL_GPIO_Init+0x22e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <HAL_GPIO_Init+0x248>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d02b      	beq.n	8001196 <HAL_GPIO_Init+0x22a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1d      	ldr	r2, [pc, #116]	; (80011b8 <HAL_GPIO_Init+0x24c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d025      	beq.n	8001192 <HAL_GPIO_Init+0x226>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <HAL_GPIO_Init+0x250>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01f      	beq.n	800118e <HAL_GPIO_Init+0x222>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <HAL_GPIO_Init+0x254>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x21e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_GPIO_Init+0x258>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x21a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <HAL_GPIO_Init+0x25c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x216>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a18      	ldr	r2, [pc, #96]	; (80011cc <HAL_GPIO_Init+0x260>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x212>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_GPIO_Init+0x264>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x20e>
 8001176:	2309      	movs	r3, #9
 8001178:	e02d      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800117a:	230a      	movs	r3, #10
 800117c:	e02b      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800117e:	2308      	movs	r3, #8
 8001180:	e029      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 8001182:	2307      	movs	r3, #7
 8001184:	e027      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 8001186:	2306      	movs	r3, #6
 8001188:	e025      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800118a:	2305      	movs	r3, #5
 800118c:	e023      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800118e:	2304      	movs	r3, #4
 8001190:	e021      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 8001192:	2303      	movs	r3, #3
 8001194:	e01f      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 8001196:	2302      	movs	r3, #2
 8001198:	e01d      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800119a:	2301      	movs	r3, #1
 800119c:	e01b      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800119e:	bf00      	nop
 80011a0:	58000080 	.word	0x58000080
 80011a4:	58024400 	.word	0x58024400
 80011a8:	58000400 	.word	0x58000400
 80011ac:	58020000 	.word	0x58020000
 80011b0:	58020400 	.word	0x58020400
 80011b4:	58020800 	.word	0x58020800
 80011b8:	58020c00 	.word	0x58020c00
 80011bc:	58021000 	.word	0x58021000
 80011c0:	58021400 	.word	0x58021400
 80011c4:	58021800 	.word	0x58021800
 80011c8:	58021c00 	.word	0x58021c00
 80011cc:	58022000 	.word	0x58022000
 80011d0:	58022400 	.word	0x58022400
 80011d4:	2300      	movs	r3, #0
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	f002 0203 	and.w	r2, r2, #3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4093      	lsls	r3, r2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e6:	4938      	ldr	r1, [pc, #224]	; (80012c8 <HAL_GPIO_Init+0x35c>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800121a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	3301      	adds	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f47f ae63 	bne.w	8000f80 <HAL_GPIO_Init+0x14>
  }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3724      	adds	r7, #36	; 0x24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	58000400 	.word	0x58000400

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	2b06      	cmp	r3, #6
 8001312:	d00a      	beq.n	800132a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001314:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d001      	beq.n	8001326 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e040      	b.n	80013a8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e03e      	b.n	80013a8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001332:	491f      	ldr	r1, [pc, #124]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4313      	orrs	r3, r2
 8001338:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800133a:	f7ff fd27 	bl	8000d8c <HAL_GetTick>
 800133e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001340:	e009      	b.n	8001356 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001342:	f7ff fd23 	bl	8000d8c <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001350:	d901      	bls.n	8001356 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e028      	b.n	80013a8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001362:	d1ee      	bne.n	8001342 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b1e      	cmp	r3, #30
 8001368:	d008      	beq.n	800137c <HAL_PWREx_ConfigSupply+0x7c>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b2e      	cmp	r3, #46	; 0x2e
 800136e:	d005      	beq.n	800137c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b1d      	cmp	r3, #29
 8001374:	d002      	beq.n	800137c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b2d      	cmp	r3, #45	; 0x2d
 800137a:	d114      	bne.n	80013a6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800137c:	f7ff fd06 	bl	8000d8c <HAL_GetTick>
 8001380:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001382:	e009      	b.n	8001398 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001384:	f7ff fd02 	bl	8000d8c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001392:	d901      	bls.n	8001398 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e007      	b.n	80013a8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a4:	d1ee      	bne.n	8001384 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	58024800 	.word	0x58024800

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f000 bc1f 	b.w	8001c06 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80b3 	beq.w	800153c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d6:	4b95      	ldr	r3, [pc, #596]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013e0:	4b92      	ldr	r3, [pc, #584]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	2b10      	cmp	r3, #16
 80013ea:	d007      	beq.n	80013fc <HAL_RCC_OscConfig+0x48>
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	2b18      	cmp	r3, #24
 80013f0:	d112      	bne.n	8001418 <HAL_RCC_OscConfig+0x64>
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d10d      	bne.n	8001418 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	4b8b      	ldr	r3, [pc, #556]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 8098 	beq.w	800153a <HAL_RCC_OscConfig+0x186>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 8093 	bne.w	800153a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e3f6      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x7c>
 8001422:	4b82      	ldr	r3, [pc, #520]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a81      	ldr	r2, [pc, #516]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e058      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d112      	bne.n	800145e <HAL_RCC_OscConfig+0xaa>
 8001438:	4b7c      	ldr	r3, [pc, #496]	; (800162c <HAL_RCC_OscConfig+0x278>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a7b      	ldr	r2, [pc, #492]	; (800162c <HAL_RCC_OscConfig+0x278>)
 800143e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b79      	ldr	r3, [pc, #484]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a78      	ldr	r2, [pc, #480]	; (800162c <HAL_RCC_OscConfig+0x278>)
 800144a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b76      	ldr	r3, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a75      	ldr	r2, [pc, #468]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e041      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001466:	d112      	bne.n	800148e <HAL_RCC_OscConfig+0xda>
 8001468:	4b70      	ldr	r3, [pc, #448]	; (800162c <HAL_RCC_OscConfig+0x278>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a6f      	ldr	r2, [pc, #444]	; (800162c <HAL_RCC_OscConfig+0x278>)
 800146e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b6d      	ldr	r3, [pc, #436]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a6c      	ldr	r2, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0x278>)
 800147a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a69      	ldr	r2, [pc, #420]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	e029      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001496:	d112      	bne.n	80014be <HAL_RCC_OscConfig+0x10a>
 8001498:	4b64      	ldr	r3, [pc, #400]	; (800162c <HAL_RCC_OscConfig+0x278>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a63      	ldr	r2, [pc, #396]	; (800162c <HAL_RCC_OscConfig+0x278>)
 800149e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b61      	ldr	r3, [pc, #388]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a60      	ldr	r2, [pc, #384]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b5e      	ldr	r3, [pc, #376]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a5d      	ldr	r2, [pc, #372]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	e011      	b.n	80014e2 <HAL_RCC_OscConfig+0x12e>
 80014be:	4b5b      	ldr	r3, [pc, #364]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a5a      	ldr	r2, [pc, #360]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b58      	ldr	r3, [pc, #352]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a57      	ldr	r2, [pc, #348]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b55      	ldr	r3, [pc, #340]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a54      	ldr	r2, [pc, #336]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d013      	beq.n	8001512 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7ff fc4f 	bl	8000d8c <HAL_GetTick>
 80014ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f2:	f7ff fc4b 	bl	8000d8c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	; 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e380      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001504:	4b49      	ldr	r3, [pc, #292]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x13e>
 8001510:	e014      	b.n	800153c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fc3b 	bl	8000d8c <HAL_GetTick>
 8001516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151a:	f7ff fc37 	bl	8000d8c <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b64      	cmp	r3, #100	; 0x64
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e36c      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800152c:	4b3f      	ldr	r3, [pc, #252]	; (800162c <HAL_RCC_OscConfig+0x278>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x166>
 8001538:	e000      	b.n	800153c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 808c 	beq.w	8001662 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <HAL_RCC_OscConfig+0x278>)
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001552:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001554:	4b35      	ldr	r3, [pc, #212]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_RCC_OscConfig+0x1bc>
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	2b18      	cmp	r3, #24
 8001564:	d137      	bne.n	80015d6 <HAL_RCC_OscConfig+0x222>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d132      	bne.n	80015d6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_OscConfig+0x1d4>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e33e      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <HAL_RCC_OscConfig+0x278>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 0219 	bic.w	r2, r3, #25
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4925      	ldr	r1, [pc, #148]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fbf7 	bl	8000d8c <HAL_GetTick>
 800159e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fbf3 	bl	8000d8c <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e328      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	4917      	ldr	r1, [pc, #92]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d4:	e045      	b.n	8001662 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d028      	beq.n	8001630 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 0219 	bic.w	r2, r3, #25
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4910      	ldr	r1, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fbcc 	bl	8000d8c <HAL_GetTick>
 80015f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fbc8 	bl	8000d8c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e2fd      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_RCC_OscConfig+0x278>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	061b      	lsls	r3, r3, #24
 8001624:	4901      	ldr	r1, [pc, #4]	; (800162c <HAL_RCC_OscConfig+0x278>)
 8001626:	4313      	orrs	r3, r2
 8001628:	604b      	str	r3, [r1, #4]
 800162a:	e01a      	b.n	8001662 <HAL_RCC_OscConfig+0x2ae>
 800162c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001630:	4b97      	ldr	r3, [pc, #604]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a96      	ldr	r2, [pc, #600]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fba6 	bl	8000d8c <HAL_GetTick>
 8001640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fba2 	bl	8000d8c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e2d7      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001656:	4b8e      	ldr	r3, [pc, #568]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	d06a      	beq.n	8001744 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166e:	4b88      	ldr	r3, [pc, #544]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001676:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001678:	4b85      	ldr	r3, [pc, #532]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b08      	cmp	r3, #8
 8001682:	d007      	beq.n	8001694 <HAL_RCC_OscConfig+0x2e0>
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b18      	cmp	r3, #24
 8001688:	d11b      	bne.n	80016c2 <HAL_RCC_OscConfig+0x30e>
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d116      	bne.n	80016c2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001694:	4b7e      	ldr	r3, [pc, #504]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_OscConfig+0x2f8>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	2b80      	cmp	r3, #128	; 0x80
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e2ac      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016ac:	4b78      	ldr	r3, [pc, #480]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	061b      	lsls	r3, r3, #24
 80016ba:	4975      	ldr	r1, [pc, #468]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016c0:	e040      	b.n	8001744 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d023      	beq.n	8001712 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016ca:	4b71      	ldr	r3, [pc, #452]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a70      	ldr	r2, [pc, #448]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 80016d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb59 	bl	8000d8c <HAL_GetTick>
 80016da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016de:	f7ff fb55 	bl	8000d8c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e28a      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016f0:	4b67      	ldr	r3, [pc, #412]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016fc:	4b64      	ldr	r3, [pc, #400]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	061b      	lsls	r3, r3, #24
 800170a:	4961      	ldr	r1, [pc, #388]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 800170c:	4313      	orrs	r3, r2
 800170e:	60cb      	str	r3, [r1, #12]
 8001710:	e018      	b.n	8001744 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001712:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a5e      	ldr	r2, [pc, #376]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 8001718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800171c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff fb35 	bl	8000d8c <HAL_GetTick>
 8001722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001726:	f7ff fb31 	bl	8000d8c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e266      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001738:	4b55      	ldr	r3, [pc, #340]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d036      	beq.n	80017be <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d019      	beq.n	800178c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001758:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 800175a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800175c:	4a4c      	ldr	r2, [pc, #304]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001764:	f7ff fb12 	bl	8000d8c <HAL_GetTick>
 8001768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176c:	f7ff fb0e 	bl	8000d8c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e243      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800177e:	4b44      	ldr	r3, [pc, #272]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 8001780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x3b8>
 800178a:	e018      	b.n	80017be <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178c:	4b40      	ldr	r3, [pc, #256]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 800178e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001790:	4a3f      	ldr	r2, [pc, #252]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff faf8 	bl	8000d8c <HAL_GetTick>
 800179c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff faf4 	bl	8000d8c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e229      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017b2:	4b37      	ldr	r3, [pc, #220]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 80017b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d036      	beq.n	8001838 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d019      	beq.n	8001806 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017d2:	4b2f      	ldr	r3, [pc, #188]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a2e      	ldr	r2, [pc, #184]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 80017d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017de:	f7ff fad5 	bl	8000d8c <HAL_GetTick>
 80017e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017e6:	f7ff fad1 	bl	8000d8c <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e206      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x432>
 8001804:	e018      	b.n	8001838 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a21      	ldr	r2, [pc, #132]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 800180c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001810:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001812:	f7ff fabb 	bl	8000d8c <HAL_GetTick>
 8001816:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800181a:	f7ff fab7 	bl	8000d8c <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e1ec      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80af 	beq.w	80019a4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_RCC_OscConfig+0x4e0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <HAL_RCC_OscConfig+0x4e0>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001852:	f7ff fa9b 	bl	8000d8c <HAL_GetTick>
 8001856:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185a:	f7ff fa97 	bl	8000d8c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b64      	cmp	r3, #100	; 0x64
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1cc      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_RCC_OscConfig+0x4e0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d10b      	bne.n	8001898 <HAL_RCC_OscConfig+0x4e4>
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	4a02      	ldr	r2, [pc, #8]	; (8001890 <HAL_RCC_OscConfig+0x4dc>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6713      	str	r3, [r2, #112]	; 0x70
 800188c:	e05b      	b.n	8001946 <HAL_RCC_OscConfig+0x592>
 800188e:	bf00      	nop
 8001890:	58024400 	.word	0x58024400
 8001894:	58024800 	.word	0x58024800
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d112      	bne.n	80018c6 <HAL_RCC_OscConfig+0x512>
 80018a0:	4b9d      	ldr	r3, [pc, #628]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	4a9c      	ldr	r2, [pc, #624]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70
 80018ac:	4b9a      	ldr	r3, [pc, #616]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a99      	ldr	r2, [pc, #612]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
 80018b8:	4b97      	ldr	r3, [pc, #604]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a96      	ldr	r2, [pc, #600]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018be:	f023 0304 	bic.w	r3, r3, #4
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
 80018c4:	e03f      	b.n	8001946 <HAL_RCC_OscConfig+0x592>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	d112      	bne.n	80018f4 <HAL_RCC_OscConfig+0x540>
 80018ce:	4b92      	ldr	r3, [pc, #584]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	4a91      	ldr	r2, [pc, #580]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6713      	str	r3, [r2, #112]	; 0x70
 80018da:	4b8f      	ldr	r3, [pc, #572]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	4a8e      	ldr	r2, [pc, #568]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018e4:	6713      	str	r3, [r2, #112]	; 0x70
 80018e6:	4b8c      	ldr	r3, [pc, #560]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	4a8b      	ldr	r2, [pc, #556]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6713      	str	r3, [r2, #112]	; 0x70
 80018f2:	e028      	b.n	8001946 <HAL_RCC_OscConfig+0x592>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b85      	cmp	r3, #133	; 0x85
 80018fa:	d112      	bne.n	8001922 <HAL_RCC_OscConfig+0x56e>
 80018fc:	4b86      	ldr	r3, [pc, #536]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a85      	ldr	r2, [pc, #532]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	4b83      	ldr	r3, [pc, #524]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	4a82      	ldr	r2, [pc, #520]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 800190e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001912:	6713      	str	r3, [r2, #112]	; 0x70
 8001914:	4b80      	ldr	r3, [pc, #512]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001918:	4a7f      	ldr	r2, [pc, #508]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6713      	str	r3, [r2, #112]	; 0x70
 8001920:	e011      	b.n	8001946 <HAL_RCC_OscConfig+0x592>
 8001922:	4b7d      	ldr	r3, [pc, #500]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	4a7c      	ldr	r2, [pc, #496]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6713      	str	r3, [r2, #112]	; 0x70
 800192e:	4b7a      	ldr	r3, [pc, #488]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	4a79      	ldr	r2, [pc, #484]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	6713      	str	r3, [r2, #112]	; 0x70
 800193a:	4b77      	ldr	r3, [pc, #476]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	4a76      	ldr	r2, [pc, #472]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001944:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d015      	beq.n	800197a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7ff fa1d 	bl	8000d8c <HAL_GetTick>
 8001952:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001954:	e00a      	b.n	800196c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7ff fa19 	bl	8000d8c <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e14c      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800196c:	4b6a      	ldr	r3, [pc, #424]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0ee      	beq.n	8001956 <HAL_RCC_OscConfig+0x5a2>
 8001978:	e014      	b.n	80019a4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197a:	f7ff fa07 	bl	8000d8c <HAL_GetTick>
 800197e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001980:	e00a      	b.n	8001998 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001982:	f7ff fa03 	bl	8000d8c <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e136      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001998:	4b5f      	ldr	r3, [pc, #380]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ee      	bne.n	8001982 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 812b 	beq.w	8001c04 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019ae:	4b5a      	ldr	r3, [pc, #360]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019b6:	2b18      	cmp	r3, #24
 80019b8:	f000 80bb 	beq.w	8001b32 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	f040 8095 	bne.w	8001af0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a53      	ldr	r2, [pc, #332]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80019cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff f9db 	bl	8000d8c <HAL_GetTick>
 80019d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019da:	f7ff f9d7 	bl	8000d8c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e10c      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ec:	4b4a      	ldr	r3, [pc, #296]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f8:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 80019fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019fc:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_RCC_OscConfig+0x768>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	4942      	ldr	r1, [pc, #264]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	628b      	str	r3, [r1, #40]	; 0x28
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a20:	3b01      	subs	r3, #1
 8001a22:	025b      	lsls	r3, r3, #9
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a42:	4935      	ldr	r1, [pc, #212]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a48:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	4a32      	ldr	r2, [pc, #200]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a58:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <HAL_RCC_OscConfig+0x76c>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a60:	00d2      	lsls	r2, r2, #3
 8001a62:	492d      	ldr	r1, [pc, #180]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	f023 020c 	bic.w	r2, r3, #12
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4928      	ldr	r1, [pc, #160]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a7a:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	f023 0202 	bic.w	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4924      	ldr	r1, [pc, #144]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f960 	bl	8000d8c <HAL_GetTick>
 8001acc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff f95c 	bl	8000d8c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e091      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x71c>
 8001aee:	e089      	b.n	8001c04 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <HAL_RCC_OscConfig+0x764>)
 8001af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff f946 	bl	8000d8c <HAL_GetTick>
 8001b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b02:	e00f      	b.n	8001b24 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff f942 	bl	8000d8c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d908      	bls.n	8001b24 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e077      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
 8001b16:	bf00      	nop
 8001b18:	58024400 	.word	0x58024400
 8001b1c:	fffffc0c 	.word	0xfffffc0c
 8001b20:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b24:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <HAL_RCC_OscConfig+0x85c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1e9      	bne.n	8001b04 <HAL_RCC_OscConfig+0x750>
 8001b30:	e068      	b.n	8001c04 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b32:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <HAL_RCC_OscConfig+0x85c>)
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <HAL_RCC_OscConfig+0x85c>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d031      	beq.n	8001baa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d12a      	bne.n	8001baa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d122      	bne.n	8001baa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d11a      	bne.n	8001baa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	0a5b      	lsrs	r3, r3, #9
 8001b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b80:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d111      	bne.n	8001baa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d108      	bne.n	8001baa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	0e1b      	lsrs	r3, r3, #24
 8001b9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e02b      	b.n	8001c06 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_RCC_OscConfig+0x85c>)
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb2:	08db      	lsrs	r3, r3, #3
 8001bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bb8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d01f      	beq.n	8001c04 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_RCC_OscConfig+0x85c>)
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	4a11      	ldr	r2, [pc, #68]	; (8001c10 <HAL_RCC_OscConfig+0x85c>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bd0:	f7ff f8dc 	bl	8000d8c <HAL_GetTick>
 8001bd4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff f8d8 	bl	8000d8c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d0f9      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_RCC_OscConfig+0x85c>)
 8001be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_RCC_OscConfig+0x860>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bf0:	00d2      	lsls	r2, r2, #3
 8001bf2:	4907      	ldr	r1, [pc, #28]	; (8001c10 <HAL_RCC_OscConfig+0x85c>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_OscConfig+0x85c>)
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_RCC_OscConfig+0x85c>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3730      	adds	r7, #48	; 0x30
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	58024400 	.word	0x58024400
 8001c14:	ffff0007 	.word	0xffff0007

08001c18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e19c      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b8a      	ldr	r3, [pc, #552]	; (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d910      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b87      	ldr	r3, [pc, #540]	; (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 020f 	bic.w	r2, r3, #15
 8001c42:	4985      	ldr	r1, [pc, #532]	; (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b83      	ldr	r3, [pc, #524]	; (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e184      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	4b7b      	ldr	r3, [pc, #492]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d908      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c78:	4b78      	ldr	r3, [pc, #480]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	4975      	ldr	r1, [pc, #468]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d010      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	4b70      	ldr	r3, [pc, #448]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d908      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	496a      	ldr	r1, [pc, #424]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	4b64      	ldr	r3, [pc, #400]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d908      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cd4:	4b61      	ldr	r3, [pc, #388]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	495e      	ldr	r1, [pc, #376]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d908      	bls.n	8001d14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d02:	4b56      	ldr	r3, [pc, #344]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4953      	ldr	r1, [pc, #332]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4b4d      	ldr	r3, [pc, #308]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d908      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f023 020f 	bic.w	r2, r3, #15
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4947      	ldr	r1, [pc, #284]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d055      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d4e:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4940      	ldr	r1, [pc, #256]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d68:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d121      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0f6      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d80:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d115      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0ea      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d98:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0de      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da8:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0d6      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f023 0207 	bic.w	r2, r3, #7
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4925      	ldr	r1, [pc, #148]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dca:	f7fe ffdf 	bl	8000d8c <HAL_GetTick>
 8001dce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd0:	e00a      	b.n	8001de8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd2:	f7fe ffdb 	bl	8000d8c <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e0be      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d1eb      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d010      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d208      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f023 020f 	bic.w	r2, r3, #15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	490e      	ldr	r1, [pc, #56]	; (8001e5c <HAL_RCC_ClockConfig+0x244>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d214      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 020f 	bic.w	r2, r3, #15
 8001e3e:	4906      	ldr	r1, [pc, #24]	; (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <HAL_RCC_ClockConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e086      	b.n	8001f66 <HAL_RCC_ClockConfig+0x34e>
 8001e58:	52002000 	.word	0x52002000
 8001e5c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d010      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	4b3f      	ldr	r3, [pc, #252]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d208      	bcs.n	8001e8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e7c:	4b3c      	ldr	r3, [pc, #240]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	4939      	ldr	r1, [pc, #228]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d010      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d208      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	492e      	ldr	r1, [pc, #184]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d208      	bcs.n	8001eea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4922      	ldr	r1, [pc, #136]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d010      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69da      	ldr	r2, [r3, #28]
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d208      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4917      	ldr	r1, [pc, #92]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001f18:	f000 f834 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	4912      	ldr	r1, [pc, #72]	; (8001f74 <HAL_RCC_ClockConfig+0x35c>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_RCC_ClockConfig+0x358>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <HAL_RCC_ClockConfig+0x35c>)
 8001f40:	5cd3      	ldrb	r3, [r2, r3]
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_RCC_ClockConfig+0x360>)
 8001f4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_RCC_ClockConfig+0x364>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x368>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fecc 	bl	8000cf8 <HAL_InitTick>
 8001f60:	4603      	mov	r3, r0
 8001f62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	58024400 	.word	0x58024400
 8001f74:	08005314 	.word	0x08005314
 8001f78:	24000004 	.word	0x24000004
 8001f7c:	24000000 	.word	0x24000000
 8001f80:	24000008 	.word	0x24000008

08001f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	; 0x24
 8001f88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f8a:	4bb3      	ldr	r3, [pc, #716]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f92:	2b18      	cmp	r3, #24
 8001f94:	f200 8155 	bhi.w	8002242 <HAL_RCC_GetSysClockFreq+0x2be>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08002005 	.word	0x08002005
 8001fa4:	08002243 	.word	0x08002243
 8001fa8:	08002243 	.word	0x08002243
 8001fac:	08002243 	.word	0x08002243
 8001fb0:	08002243 	.word	0x08002243
 8001fb4:	08002243 	.word	0x08002243
 8001fb8:	08002243 	.word	0x08002243
 8001fbc:	08002243 	.word	0x08002243
 8001fc0:	0800202b 	.word	0x0800202b
 8001fc4:	08002243 	.word	0x08002243
 8001fc8:	08002243 	.word	0x08002243
 8001fcc:	08002243 	.word	0x08002243
 8001fd0:	08002243 	.word	0x08002243
 8001fd4:	08002243 	.word	0x08002243
 8001fd8:	08002243 	.word	0x08002243
 8001fdc:	08002243 	.word	0x08002243
 8001fe0:	08002031 	.word	0x08002031
 8001fe4:	08002243 	.word	0x08002243
 8001fe8:	08002243 	.word	0x08002243
 8001fec:	08002243 	.word	0x08002243
 8001ff0:	08002243 	.word	0x08002243
 8001ff4:	08002243 	.word	0x08002243
 8001ff8:	08002243 	.word	0x08002243
 8001ffc:	08002243 	.word	0x08002243
 8002000:	08002037 	.word	0x08002037
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002004:	4b94      	ldr	r3, [pc, #592]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002010:	4b91      	ldr	r3, [pc, #580]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	08db      	lsrs	r3, r3, #3
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	4a90      	ldr	r2, [pc, #576]	; (800225c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
 8002020:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002022:	e111      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002024:	4b8d      	ldr	r3, [pc, #564]	; (800225c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002026:	61bb      	str	r3, [r7, #24]
      break;
 8002028:	e10e      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800202a:	4b8d      	ldr	r3, [pc, #564]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800202c:	61bb      	str	r3, [r7, #24]
      break;
 800202e:	e10b      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002030:	4b8c      	ldr	r3, [pc, #560]	; (8002264 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002032:	61bb      	str	r3, [r7, #24]
      break;
 8002034:	e108      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002036:	4b88      	ldr	r3, [pc, #544]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002040:	4b85      	ldr	r3, [pc, #532]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800204a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800204c:	4b82      	ldr	r3, [pc, #520]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002056:	4b80      	ldr	r3, [pc, #512]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80e1 	beq.w	800223c <HAL_RCC_GetSysClockFreq+0x2b8>
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b02      	cmp	r3, #2
 800207e:	f000 8083 	beq.w	8002188 <HAL_RCC_GetSysClockFreq+0x204>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b02      	cmp	r3, #2
 8002086:	f200 80a1 	bhi.w	80021cc <HAL_RCC_GetSysClockFreq+0x248>
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x114>
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d056      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002096:	e099      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002098:	4b6f      	ldr	r3, [pc, #444]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d02d      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020a4:	4b6c      	ldr	r3, [pc, #432]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	4a6b      	ldr	r2, [pc, #428]	; (800225c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ce:	4b62      	ldr	r3, [pc, #392]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020de:	ed97 6a02 	vldr	s12, [r7, #8]
 80020e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002268 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80020fe:	e087      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800226c <HAL_RCC_GetSysClockFreq+0x2e8>
 800210e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002112:	4b51      	ldr	r3, [pc, #324]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002122:	ed97 6a02 	vldr	s12, [r7, #8]
 8002126:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002268 <HAL_RCC_GetSysClockFreq+0x2e4>
 800212a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800212e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002142:	e065      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002270 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002156:	4b40      	ldr	r3, [pc, #256]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002166:	ed97 6a02 	vldr	s12, [r7, #8]
 800216a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002268 <HAL_RCC_GetSysClockFreq+0x2e4>
 800216e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800217a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002186:	e043      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002192:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002274 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800219a:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002268 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021ca:	e021      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002270 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80021f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002268 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800220e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	0a5b      	lsrs	r3, r3, #9
 8002216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800221a:	3301      	adds	r3, #1
 800221c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002228:	edd7 6a07 	vldr	s13, [r7, #28]
 800222c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002234:	ee17 3a90 	vmov	r3, s15
 8002238:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800223a:	e005      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
      break;
 8002240:	e002      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002244:	61bb      	str	r3, [r7, #24]
      break;
 8002246:	bf00      	nop
  }

  return sysclockfreq;
 8002248:	69bb      	ldr	r3, [r7, #24]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	58024400 	.word	0x58024400
 800225c:	03d09000 	.word	0x03d09000
 8002260:	003d0900 	.word	0x003d0900
 8002264:	007a1200 	.word	0x007a1200
 8002268:	46000000 	.word	0x46000000
 800226c:	4c742400 	.word	0x4c742400
 8002270:	4a742400 	.word	0x4a742400
 8002274:	4af42400 	.word	0x4af42400

08002278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800227e:	f7ff fe81 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8002282:	4602      	mov	r2, r0
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	490f      	ldr	r1, [pc, #60]	; (80022cc <HAL_RCC_GetHCLKFreq+0x54>)
 8002290:	5ccb      	ldrb	r3, [r1, r3]
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	fa22 f303 	lsr.w	r3, r2, r3
 800229a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	4a09      	ldr	r2, [pc, #36]	; (80022cc <HAL_RCC_GetHCLKFreq+0x54>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80022b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022b6:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	58024400 	.word	0x58024400
 80022cc:	08005314 	.word	0x08005314
 80022d0:	24000004 	.word	0x24000004
 80022d4:	24000000 	.word	0x24000000

080022d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80022dc:	f7ff ffcc 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4904      	ldr	r1, [pc, #16]	; (8002300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	58024400 	.word	0x58024400
 8002300:	08005314 	.word	0x08005314

08002304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002308:	f7ff ffb6 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4904      	ldr	r1, [pc, #16]	; (800232c <HAL_RCC_GetPCLK2Freq+0x28>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	58024400 	.word	0x58024400
 800232c:	08005314 	.word	0x08005314

08002330 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002334:	b0c8      	sub	sp, #288	; 0x120
 8002336:	af00      	add	r7, sp, #0
 8002338:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800233c:	2300      	movs	r3, #0
 800233e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002342:	2300      	movs	r3, #0
 8002344:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002354:	2500      	movs	r5, #0
 8002356:	ea54 0305 	orrs.w	r3, r4, r5
 800235a:	d049      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800235c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002362:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002366:	d02f      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002368:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800236c:	d828      	bhi.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800236e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002372:	d01a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002378:	d822      	bhi.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800237e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002382:	d007      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002384:	e01c      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002386:	4ba7      	ldr	r3, [pc, #668]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	4aa6      	ldr	r2, [pc, #664]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002392:	e01a      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002398:	3308      	adds	r3, #8
 800239a:	2102      	movs	r1, #2
 800239c:	4618      	mov	r0, r3
 800239e:	f001 fc43 	bl	8003c28 <RCCEx_PLL2_Config>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023a8:	e00f      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80023aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023ae:	3328      	adds	r3, #40	; 0x28
 80023b0:	2102      	movs	r1, #2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f001 fcea 	bl	8003d8c <RCCEx_PLL3_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023be:	e004      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80023c6:	e000      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80023c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10a      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80023d2:	4b94      	ldr	r3, [pc, #592]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80023da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e0:	4a90      	ldr	r2, [pc, #576]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023e2:	430b      	orrs	r3, r1
 80023e4:	6513      	str	r3, [r2, #80]	; 0x50
 80023e6:	e003      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80023ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80023fc:	f04f 0900 	mov.w	r9, #0
 8002400:	ea58 0309 	orrs.w	r3, r8, r9
 8002404:	d047      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240c:	2b04      	cmp	r3, #4
 800240e:	d82a      	bhi.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002410:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002416:	bf00      	nop
 8002418:	0800242d 	.word	0x0800242d
 800241c:	0800243b 	.word	0x0800243b
 8002420:	08002451 	.word	0x08002451
 8002424:	0800246f 	.word	0x0800246f
 8002428:	0800246f 	.word	0x0800246f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800242c:	4b7d      	ldr	r3, [pc, #500]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	4a7c      	ldr	r2, [pc, #496]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002438:	e01a      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800243a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800243e:	3308      	adds	r3, #8
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f001 fbf0 	bl	8003c28 <RCCEx_PLL2_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800244e:	e00f      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002454:	3328      	adds	r3, #40	; 0x28
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f001 fc97 	bl	8003d8c <RCCEx_PLL3_Config>
 800245e:	4603      	mov	r3, r0
 8002460:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002464:	e004      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800246c:	e000      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800246e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002470:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002478:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800247a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247c:	f023 0107 	bic.w	r1, r3, #7
 8002480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	4a67      	ldr	r2, [pc, #412]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002488:	430b      	orrs	r3, r1
 800248a:	6513      	str	r3, [r2, #80]	; 0x50
 800248c:	e003      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800248e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002492:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80024a2:	f04f 0b00 	mov.w	fp, #0
 80024a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80024aa:	d054      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80024ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80024b6:	d036      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80024b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80024bc:	d82f      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80024be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c2:	d032      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80024c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c8:	d829      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80024ca:	2bc0      	cmp	r3, #192	; 0xc0
 80024cc:	d02f      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80024ce:	2bc0      	cmp	r3, #192	; 0xc0
 80024d0:	d825      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80024d2:	2b80      	cmp	r3, #128	; 0x80
 80024d4:	d018      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80024d6:	2b80      	cmp	r3, #128	; 0x80
 80024d8:	d821      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80024de:	2b40      	cmp	r3, #64	; 0x40
 80024e0:	d007      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80024e2:	e01c      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024e4:	4b4f      	ldr	r3, [pc, #316]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	4a4e      	ldr	r2, [pc, #312]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80024f0:	e01e      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024f6:	3308      	adds	r3, #8
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 fb94 	bl	8003c28 <RCCEx_PLL2_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002506:	e013      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800250c:	3328      	adds	r3, #40	; 0x28
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f001 fc3b 	bl	8003d8c <RCCEx_PLL3_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800251c:	e008      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002524:	e004      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002526:	bf00      	nop
 8002528:	e002      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800252a:	bf00      	nop
 800252c:	e000      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800252e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002530:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002538:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800253a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	4a37      	ldr	r2, [pc, #220]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002548:	430b      	orrs	r3, r1
 800254a:	6513      	str	r3, [r2, #80]	; 0x50
 800254c:	e003      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002552:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002562:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800256c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002570:	460b      	mov	r3, r1
 8002572:	4313      	orrs	r3, r2
 8002574:	d05c      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800257a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002580:	d03b      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002582:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002586:	d834      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800258c:	d037      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800258e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002592:	d82e      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002594:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002598:	d033      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800259a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800259e:	d828      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a4:	d01a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80025a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025aa:	d822      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80025b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b4:	d007      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80025b6:	e01c      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	4a19      	ldr	r2, [pc, #100]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80025c4:	e01e      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025ca:	3308      	adds	r3, #8
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 fb2a 	bl	8003c28 <RCCEx_PLL2_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80025da:	e013      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025e0:	3328      	adds	r3, #40	; 0x28
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f001 fbd1 	bl	8003d8c <RCCEx_PLL3_Config>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80025f0:	e008      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80025f8:	e004      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80025fa:	bf00      	nop
 80025fc:	e002      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80025fe:	bf00      	nop
 8002600:	e000      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10d      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800260e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002610:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	4a02      	ldr	r2, [pc, #8]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800261c:	430b      	orrs	r3, r1
 800261e:	6513      	str	r3, [r2, #80]	; 0x50
 8002620:	e006      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002622:	bf00      	nop
 8002624:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002628:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800262c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002638:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800263c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002646:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800264a:	460b      	mov	r3, r1
 800264c:	4313      	orrs	r3, r2
 800264e:	d03a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	2b30      	cmp	r3, #48	; 0x30
 8002658:	d01f      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800265a:	2b30      	cmp	r3, #48	; 0x30
 800265c:	d819      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800265e:	2b20      	cmp	r3, #32
 8002660:	d00c      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002662:	2b20      	cmp	r3, #32
 8002664:	d815      	bhi.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002666:	2b00      	cmp	r3, #0
 8002668:	d019      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800266a:	2b10      	cmp	r3, #16
 800266c:	d111      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800266e:	4bae      	ldr	r3, [pc, #696]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	4aad      	ldr	r2, [pc, #692]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002678:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800267a:	e011      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800267c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002680:	3308      	adds	r3, #8
 8002682:	2102      	movs	r1, #2
 8002684:	4618      	mov	r0, r3
 8002686:	f001 facf 	bl	8003c28 <RCCEx_PLL2_Config>
 800268a:	4603      	mov	r3, r0
 800268c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002690:	e006      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002698:	e002      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800269a:	bf00      	nop
 800269c:	e000      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800269e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80026a8:	4b9f      	ldr	r3, [pc, #636]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80026b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	4a9c      	ldr	r2, [pc, #624]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026b8:	430b      	orrs	r3, r1
 80026ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026bc:	e003      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80026c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80026d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80026dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4313      	orrs	r3, r2
 80026e4:	d051      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80026e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026f0:	d035      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80026f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026f6:	d82e      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80026f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026fc:	d031      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80026fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002702:	d828      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002708:	d01a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800270a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800270e:	d822      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002718:	d007      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800271a:	e01c      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271c:	4b82      	ldr	r3, [pc, #520]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	4a81      	ldr	r2, [pc, #516]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002728:	e01c      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800272a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800272e:	3308      	adds	r3, #8
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f001 fa78 	bl	8003c28 <RCCEx_PLL2_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800273e:	e011      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002744:	3328      	adds	r3, #40	; 0x28
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f001 fb1f 	bl	8003d8c <RCCEx_PLL3_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002754:	e006      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800275c:	e002      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002764:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800276c:	4b6e      	ldr	r3, [pc, #440]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800276e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002770:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800277a:	4a6b      	ldr	r2, [pc, #428]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800277c:	430b      	orrs	r3, r1
 800277e:	6513      	str	r3, [r2, #80]	; 0x50
 8002780:	e003      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002782:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002786:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800278a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80027a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80027a4:	460b      	mov	r3, r1
 80027a6:	4313      	orrs	r3, r2
 80027a8:	d053      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80027aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b4:	d033      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80027b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ba:	d82c      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80027bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027c0:	d02f      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80027c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027c6:	d826      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80027c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027cc:	d02b      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80027ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027d2:	d820      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80027d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027d8:	d012      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80027da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027de:	d81a      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d022      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e8:	d115      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ee:	3308      	adds	r3, #8
 80027f0:	2101      	movs	r1, #1
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 fa18 	bl	8003c28 <RCCEx_PLL2_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80027fe:	e015      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002804:	3328      	adds	r3, #40	; 0x28
 8002806:	2101      	movs	r1, #1
 8002808:	4618      	mov	r0, r3
 800280a:	f001 fabf 	bl	8003d8c <RCCEx_PLL3_Config>
 800280e:	4603      	mov	r3, r0
 8002810:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002814:	e00a      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800281e:	bf00      	nop
 8002820:	e004      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002822:	bf00      	nop
 8002824:	e002      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002826:	bf00      	nop
 8002828:	e000      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800282a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800282c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002834:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002838:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800283c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002842:	4a39      	ldr	r2, [pc, #228]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002844:	430b      	orrs	r3, r1
 8002846:	6513      	str	r3, [r2, #80]	; 0x50
 8002848:	e003      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800284e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800285e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002862:	2300      	movs	r3, #0
 8002864:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002868:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800286c:	460b      	mov	r3, r1
 800286e:	4313      	orrs	r3, r2
 8002870:	d060      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002876:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800287a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800287e:	d039      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002880:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002884:	d832      	bhi.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002886:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800288a:	d035      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800288c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002890:	d82c      	bhi.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002896:	d031      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	d826      	bhi.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800289e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028a2:	d02d      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80028a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028a8:	d820      	bhi.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ae:	d012      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80028b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028b4:	d81a      	bhi.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d024      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80028ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028be:	d115      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80028c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028c4:	3308      	adds	r3, #8
 80028c6:	2101      	movs	r1, #1
 80028c8:	4618      	mov	r0, r3
 80028ca:	f001 f9ad 	bl	8003c28 <RCCEx_PLL2_Config>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80028d4:	e017      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80028d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028da:	3328      	adds	r3, #40	; 0x28
 80028dc:	2101      	movs	r1, #1
 80028de:	4618      	mov	r0, r3
 80028e0:	f001 fa54 	bl	8003d8c <RCCEx_PLL3_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80028ea:	e00c      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80028f2:	e008      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80028f4:	bf00      	nop
 80028f6:	e006      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80028f8:	bf00      	nop
 80028fa:	e004      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80028fc:	bf00      	nop
 80028fe:	e002      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002900:	bf00      	nop
 8002902:	e000      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002906:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800291a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800291e:	4a02      	ldr	r2, [pc, #8]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002920:	430b      	orrs	r3, r1
 8002922:	6593      	str	r3, [r2, #88]	; 0x58
 8002924:	e006      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002926:	bf00      	nop
 8002928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002930:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002940:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800294a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800294e:	460b      	mov	r3, r1
 8002950:	4313      	orrs	r3, r2
 8002952:	d037      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800295a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800295e:	d00e      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002964:	d816      	bhi.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002966:	2b00      	cmp	r3, #0
 8002968:	d018      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800296a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800296e:	d111      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002970:	4bc4      	ldr	r3, [pc, #784]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	4ac3      	ldr	r2, [pc, #780]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800297c:	e00f      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800297e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002982:	3308      	adds	r3, #8
 8002984:	2101      	movs	r1, #1
 8002986:	4618      	mov	r0, r3
 8002988:	f001 f94e 	bl	8003c28 <RCCEx_PLL2_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002992:	e004      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800299a:	e000      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800299c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800299e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029a6:	4bb7      	ldr	r3, [pc, #732]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80029ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b4:	4ab3      	ldr	r2, [pc, #716]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029b6:	430b      	orrs	r3, r1
 80029b8:	6513      	str	r3, [r2, #80]	; 0x50
 80029ba:	e003      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80029c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80029d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80029da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80029de:	460b      	mov	r3, r1
 80029e0:	4313      	orrs	r3, r2
 80029e2:	d039      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80029e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d81c      	bhi.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80029ee:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002a31 	.word	0x08002a31
 80029f8:	08002a05 	.word	0x08002a05
 80029fc:	08002a13 	.word	0x08002a13
 8002a00:	08002a31 	.word	0x08002a31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a04:	4b9f      	ldr	r3, [pc, #636]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	4a9e      	ldr	r2, [pc, #632]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a10:	e00f      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a16:	3308      	adds	r3, #8
 8002a18:	2102      	movs	r1, #2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 f904 	bl	8003c28 <RCCEx_PLL2_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a26:	e004      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a2e:	e000      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a3a:	4b92      	ldr	r3, [pc, #584]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	f023 0103 	bic.w	r1, r3, #3
 8002a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a48:	4a8e      	ldr	r2, [pc, #568]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4e:	e003      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a54:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002a64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002a72:	460b      	mov	r3, r1
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f000 8099 	beq.w	8002bac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a7a:	4b83      	ldr	r3, [pc, #524]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a82      	ldr	r2, [pc, #520]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a86:	f7fe f981 	bl	8000d8c <HAL_GetTick>
 8002a8a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7fe f97c 	bl	8000d8c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b64      	cmp	r3, #100	; 0x64
 8002a9e:	d903      	bls.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002aa6:	e005      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aa8:	4b77      	ldr	r3, [pc, #476]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ed      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002ab4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d173      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002abc:	4b71      	ldr	r3, [pc, #452]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002abe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ac4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ac8:	4053      	eors	r3, r2
 8002aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d015      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ad2:	4b6c      	ldr	r3, [pc, #432]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ada:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ade:	4b69      	ldr	r3, [pc, #420]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	4a68      	ldr	r2, [pc, #416]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aea:	4b66      	ldr	r3, [pc, #408]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a65      	ldr	r2, [pc, #404]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002af6:	4a63      	ldr	r2, [pc, #396]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0a:	d118      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe f93e 	bl	8000d8c <HAL_GetTick>
 8002b10:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b14:	e00d      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe f939 	bl	8000d8c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b20:	1ad2      	subs	r2, r2, r3
 8002b22:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d903      	bls.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002b30:	e005      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b32:	4b54      	ldr	r3, [pc, #336]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0eb      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002b3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d129      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b56:	d10e      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002b58:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b68:	091a      	lsrs	r2, r3, #4
 8002b6a:	4b48      	ldr	r3, [pc, #288]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	4a45      	ldr	r2, [pc, #276]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6113      	str	r3, [r2, #16]
 8002b74:	e005      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002b76:	4b43      	ldr	r3, [pc, #268]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	4a42      	ldr	r2, [pc, #264]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b80:	6113      	str	r3, [r2, #16]
 8002b82:	4b40      	ldr	r3, [pc, #256]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b84:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b92:	4a3c      	ldr	r2, [pc, #240]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6713      	str	r3, [r2, #112]	; 0x70
 8002b98:	e008      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002ba2:	e003      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ba8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f002 0301 	and.w	r3, r2, #1
 8002bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bc2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f000 8090 	beq.w	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd6:	2b28      	cmp	r3, #40	; 0x28
 8002bd8:	d870      	bhi.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002bda:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002cc5 	.word	0x08002cc5
 8002be4:	08002cbd 	.word	0x08002cbd
 8002be8:	08002cbd 	.word	0x08002cbd
 8002bec:	08002cbd 	.word	0x08002cbd
 8002bf0:	08002cbd 	.word	0x08002cbd
 8002bf4:	08002cbd 	.word	0x08002cbd
 8002bf8:	08002cbd 	.word	0x08002cbd
 8002bfc:	08002cbd 	.word	0x08002cbd
 8002c00:	08002c91 	.word	0x08002c91
 8002c04:	08002cbd 	.word	0x08002cbd
 8002c08:	08002cbd 	.word	0x08002cbd
 8002c0c:	08002cbd 	.word	0x08002cbd
 8002c10:	08002cbd 	.word	0x08002cbd
 8002c14:	08002cbd 	.word	0x08002cbd
 8002c18:	08002cbd 	.word	0x08002cbd
 8002c1c:	08002cbd 	.word	0x08002cbd
 8002c20:	08002ca7 	.word	0x08002ca7
 8002c24:	08002cbd 	.word	0x08002cbd
 8002c28:	08002cbd 	.word	0x08002cbd
 8002c2c:	08002cbd 	.word	0x08002cbd
 8002c30:	08002cbd 	.word	0x08002cbd
 8002c34:	08002cbd 	.word	0x08002cbd
 8002c38:	08002cbd 	.word	0x08002cbd
 8002c3c:	08002cbd 	.word	0x08002cbd
 8002c40:	08002cc5 	.word	0x08002cc5
 8002c44:	08002cbd 	.word	0x08002cbd
 8002c48:	08002cbd 	.word	0x08002cbd
 8002c4c:	08002cbd 	.word	0x08002cbd
 8002c50:	08002cbd 	.word	0x08002cbd
 8002c54:	08002cbd 	.word	0x08002cbd
 8002c58:	08002cbd 	.word	0x08002cbd
 8002c5c:	08002cbd 	.word	0x08002cbd
 8002c60:	08002cc5 	.word	0x08002cc5
 8002c64:	08002cbd 	.word	0x08002cbd
 8002c68:	08002cbd 	.word	0x08002cbd
 8002c6c:	08002cbd 	.word	0x08002cbd
 8002c70:	08002cbd 	.word	0x08002cbd
 8002c74:	08002cbd 	.word	0x08002cbd
 8002c78:	08002cbd 	.word	0x08002cbd
 8002c7c:	08002cbd 	.word	0x08002cbd
 8002c80:	08002cc5 	.word	0x08002cc5
 8002c84:	58024400 	.word	0x58024400
 8002c88:	58024800 	.word	0x58024800
 8002c8c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c94:	3308      	adds	r3, #8
 8002c96:	2101      	movs	r1, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 ffc5 	bl	8003c28 <RCCEx_PLL2_Config>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ca4:	e00f      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002caa:	3328      	adds	r3, #40	; 0x28
 8002cac:	2101      	movs	r1, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 f86c 	bl	8003d8c <RCCEx_PLL3_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002cba:	e004      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002cce:	4bc0      	ldr	r3, [pc, #768]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cde:	4abc      	ldr	r2, [pc, #752]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6553      	str	r3, [r2, #84]	; 0x54
 8002ce4:	e003      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	f002 0302 	and.w	r3, r2, #2
 8002cfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d04:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	d043      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d824      	bhi.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d6d 	.word	0x08002d6d
 8002d24:	08002d39 	.word	0x08002d39
 8002d28:	08002d4f 	.word	0x08002d4f
 8002d2c:	08002d6d 	.word	0x08002d6d
 8002d30:	08002d6d 	.word	0x08002d6d
 8002d34:	08002d6d 	.word	0x08002d6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	2101      	movs	r1, #1
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 ff71 	bl	8003c28 <RCCEx_PLL2_Config>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002d4c:	e00f      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d52:	3328      	adds	r3, #40	; 0x28
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f001 f818 	bl	8003d8c <RCCEx_PLL3_Config>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002d62:	e004      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d6a:	e000      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10b      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d76:	4b96      	ldr	r3, [pc, #600]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f023 0107 	bic.w	r1, r3, #7
 8002d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d86:	4a92      	ldr	r2, [pc, #584]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6553      	str	r3, [r2, #84]	; 0x54
 8002d8c:	e003      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d92:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	f002 0304 	and.w	r3, r2, #4
 8002da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dac:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4313      	orrs	r3, r2
 8002db4:	d043      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	d824      	bhi.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002dc2:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc8:	08002e15 	.word	0x08002e15
 8002dcc:	08002de1 	.word	0x08002de1
 8002dd0:	08002df7 	.word	0x08002df7
 8002dd4:	08002e15 	.word	0x08002e15
 8002dd8:	08002e15 	.word	0x08002e15
 8002ddc:	08002e15 	.word	0x08002e15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002de4:	3308      	adds	r3, #8
 8002de6:	2101      	movs	r1, #1
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 ff1d 	bl	8003c28 <RCCEx_PLL2_Config>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002df4:	e00f      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dfa:	3328      	adds	r3, #40	; 0x28
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 ffc4 	bl	8003d8c <RCCEx_PLL3_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e0a:	e004      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e12:	e000      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10b      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e1e:	4b6c      	ldr	r3, [pc, #432]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	f023 0107 	bic.w	r1, r3, #7
 8002e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e2e:	4a68      	ldr	r2, [pc, #416]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6593      	str	r3, [r2, #88]	; 0x58
 8002e34:	e003      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e46:	f002 0320 	and.w	r3, r2, #32
 8002e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	d055      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e6a:	d033      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e70:	d82c      	bhi.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e76:	d02f      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7c:	d826      	bhi.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002e7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e82:	d02b      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002e84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e88:	d820      	bhi.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8e:	d012      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e94:	d81a      	bhi.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d022      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e9e:	d115      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 febd 	bl	8003c28 <RCCEx_PLL2_Config>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eba:	3328      	adds	r3, #40	; 0x28
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 ff64 	bl	8003d8c <RCCEx_PLL3_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ed2:	e006      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002ed4:	bf00      	nop
 8002ed6:	e004      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002ed8:	bf00      	nop
 8002eda:	e002      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002edc:	bf00      	nop
 8002ede:	e000      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eea:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002efa:	4a35      	ldr	r2, [pc, #212]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002efc:	430b      	orrs	r3, r1
 8002efe:	6553      	str	r3, [r2, #84]	; 0x54
 8002f00:	e003      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f20:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4313      	orrs	r3, r2
 8002f28:	d058      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f36:	d033      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002f38:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f3c:	d82c      	bhi.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f42:	d02f      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f48:	d826      	bhi.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f4e:	d02b      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f54:	d820      	bhi.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5a:	d012      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8002f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f60:	d81a      	bhi.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d022      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d115      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f70:	3308      	adds	r3, #8
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fe57 	bl	8003c28 <RCCEx_PLL2_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002f80:	e015      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f86:	3328      	adds	r3, #40	; 0x28
 8002f88:	2102      	movs	r1, #2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fefe 	bl	8003d8c <RCCEx_PLL3_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002f96:	e00a      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f9e:	e006      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002fa0:	bf00      	nop
 8002fa2:	e004      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002fa4:	bf00      	nop
 8002fa6:	e002      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002fa8:	bf00      	nop
 8002faa:	e000      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8002fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fc6:	4a02      	ldr	r2, [pc, #8]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6593      	str	r3, [r2, #88]	; 0x58
 8002fcc:	e006      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8002fce:	bf00      	nop
 8002fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fec:	2300      	movs	r3, #0
 8002fee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ff2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	d055      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003000:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003004:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003008:	d033      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800300a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800300e:	d82c      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003014:	d02f      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301a:	d826      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800301c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003020:	d02b      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003022:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003026:	d820      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800302c:	d012      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800302e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003032:	d81a      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d022      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303c:	d115      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800303e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003042:	3308      	adds	r3, #8
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fdee 	bl	8003c28 <RCCEx_PLL2_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003052:	e015      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003058:	3328      	adds	r3, #40	; 0x28
 800305a:	2102      	movs	r1, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fe95 	bl	8003d8c <RCCEx_PLL3_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003068:	e00a      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003070:	e006      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003072:	bf00      	nop
 8003074:	e004      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003076:	bf00      	nop
 8003078:	e002      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800307a:	bf00      	nop
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800307e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003080:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10b      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003088:	4ba1      	ldr	r3, [pc, #644]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003094:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003098:	4a9d      	ldr	r2, [pc, #628]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800309a:	430b      	orrs	r3, r1
 800309c:	6593      	str	r3, [r2, #88]	; 0x58
 800309e:	e003      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80030a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f002 0308 	and.w	r3, r2, #8
 80030b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030b8:	2300      	movs	r3, #0
 80030ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80030c2:	460b      	mov	r3, r1
 80030c4:	4313      	orrs	r3, r2
 80030c6:	d01e      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80030c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80030d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030da:	3328      	adds	r3, #40	; 0x28
 80030dc:	2102      	movs	r1, #2
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fe54 	bl	8003d8c <RCCEx_PLL3_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80030f0:	4b87      	ldr	r3, [pc, #540]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003100:	4a83      	ldr	r2, [pc, #524]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003102:	430b      	orrs	r3, r1
 8003104:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310e:	f002 0310 	and.w	r3, r2, #16
 8003112:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800311c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003120:	460b      	mov	r3, r1
 8003122:	4313      	orrs	r3, r2
 8003124:	d01e      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800312a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800312e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003132:	d10c      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003138:	3328      	adds	r3, #40	; 0x28
 800313a:	2102      	movs	r1, #2
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fe25 	bl	8003d8c <RCCEx_PLL3_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800314e:	4b70      	ldr	r3, [pc, #448]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800315a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800315e:	4a6c      	ldr	r2, [pc, #432]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003160:	430b      	orrs	r3, r1
 8003162:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003174:	2300      	movs	r3, #0
 8003176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800317a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800317e:	460b      	mov	r3, r1
 8003180:	4313      	orrs	r3, r2
 8003182:	d03e      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003188:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800318c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003190:	d022      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003196:	d81b      	bhi.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a0:	d00b      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80031a2:	e015      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031a8:	3308      	adds	r3, #8
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fd3b 	bl	8003c28 <RCCEx_PLL2_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80031b8:	e00f      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031be:	3328      	adds	r3, #40	; 0x28
 80031c0:	2102      	movs	r1, #2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fde2 	bl	8003d8c <RCCEx_PLL3_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80031ce:	e004      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031d6:	e000      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80031d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031e2:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80031ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031f2:	4a47      	ldr	r2, [pc, #284]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6593      	str	r3, [r2, #88]	; 0x58
 80031f8:	e003      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800320e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003210:	2300      	movs	r3, #0
 8003212:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003214:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003218:	460b      	mov	r3, r1
 800321a:	4313      	orrs	r3, r2
 800321c:	d03b      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800321e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800322a:	d01f      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800322c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003230:	d818      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003236:	d003      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003238:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800323c:	d007      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800323e:	e011      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003240:	4b33      	ldr	r3, [pc, #204]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	4a32      	ldr	r2, [pc, #200]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800324c:	e00f      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800324e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003252:	3328      	adds	r3, #40	; 0x28
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fd98 	bl	8003d8c <RCCEx_PLL3_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003262:	e004      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800326a:	e000      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800326c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003276:	4b26      	ldr	r3, [pc, #152]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800327e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	4a22      	ldr	r2, [pc, #136]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003288:	430b      	orrs	r3, r1
 800328a:	6553      	str	r3, [r2, #84]	; 0x54
 800328c:	e003      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003292:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80032a2:	673b      	str	r3, [r7, #112]	; 0x70
 80032a4:	2300      	movs	r3, #0
 80032a6:	677b      	str	r3, [r7, #116]	; 0x74
 80032a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80032ac:	460b      	mov	r3, r1
 80032ae:	4313      	orrs	r3, r2
 80032b0:	d034      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80032b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d007      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80032c2:	e011      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	4a11      	ldr	r2, [pc, #68]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80032d0:	e00e      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d6:	3308      	adds	r3, #8
 80032d8:	2102      	movs	r1, #2
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fca4 	bl	8003c28 <RCCEx_PLL2_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80032e6:	e003      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10d      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003306:	4a02      	ldr	r2, [pc, #8]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003308:	430b      	orrs	r3, r1
 800330a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800330c:	e006      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800330e:	bf00      	nop
 8003310:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003318:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800331c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003328:	66bb      	str	r3, [r7, #104]	; 0x68
 800332a:	2300      	movs	r3, #0
 800332c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800332e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003332:	460b      	mov	r3, r1
 8003334:	4313      	orrs	r3, r2
 8003336:	d00c      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800333c:	3328      	adds	r3, #40	; 0x28
 800333e:	2102      	movs	r1, #2
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fd23 	bl	8003d8c <RCCEx_PLL3_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800335e:	663b      	str	r3, [r7, #96]	; 0x60
 8003360:	2300      	movs	r3, #0
 8003362:	667b      	str	r3, [r7, #100]	; 0x64
 8003364:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003368:	460b      	mov	r3, r1
 800336a:	4313      	orrs	r3, r2
 800336c:	d038      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800336e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800337a:	d018      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800337c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003380:	d811      	bhi.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003386:	d014      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338c:	d80b      	bhi.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d011      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003396:	d106      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003398:	4bc3      	ldr	r3, [pc, #780]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	4ac2      	ldr	r2, [pc, #776]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800339e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80033a4:	e008      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033ac:	e004      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80033ae:	bf00      	nop
 80033b0:	e002      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80033b2:	bf00      	nop
 80033b4:	e000      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80033b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10b      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c0:	4bb9      	ldr	r3, [pc, #740]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	4ab5      	ldr	r2, [pc, #724]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033d2:	430b      	orrs	r3, r1
 80033d4:	6553      	str	r3, [r2, #84]	; 0x54
 80033d6:	e003      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80033ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80033ee:	2300      	movs	r3, #0
 80033f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80033f6:	460b      	mov	r3, r1
 80033f8:	4313      	orrs	r3, r2
 80033fa:	d009      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033fc:	4baa      	ldr	r3, [pc, #680]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003400:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800340a:	4aa7      	ldr	r2, [pc, #668]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800340c:	430b      	orrs	r3, r1
 800340e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800341c:	653b      	str	r3, [r7, #80]	; 0x50
 800341e:	2300      	movs	r3, #0
 8003420:	657b      	str	r3, [r7, #84]	; 0x54
 8003422:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003426:	460b      	mov	r3, r1
 8003428:	4313      	orrs	r3, r2
 800342a:	d009      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800342c:	4b9e      	ldr	r3, [pc, #632]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800342e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003430:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a9b      	ldr	r2, [pc, #620]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800343c:	430b      	orrs	r3, r1
 800343e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800344c:	64bb      	str	r3, [r7, #72]	; 0x48
 800344e:	2300      	movs	r3, #0
 8003450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003452:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003456:	460b      	mov	r3, r1
 8003458:	4313      	orrs	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800345c:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346a:	4a8f      	ldr	r2, [pc, #572]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800346c:	430b      	orrs	r3, r1
 800346e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800347c:	643b      	str	r3, [r7, #64]	; 0x40
 800347e:	2300      	movs	r3, #0
 8003480:	647b      	str	r3, [r7, #68]	; 0x44
 8003482:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003486:	460b      	mov	r3, r1
 8003488:	4313      	orrs	r3, r2
 800348a:	d00e      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800348c:	4b86      	ldr	r3, [pc, #536]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	4a85      	ldr	r2, [pc, #532]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003492:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003496:	6113      	str	r3, [r2, #16]
 8003498:	4b83      	ldr	r3, [pc, #524]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800349a:	6919      	ldr	r1, [r3, #16]
 800349c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034a4:	4a80      	ldr	r2, [pc, #512]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034a6:	430b      	orrs	r3, r1
 80034a8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80034aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034b8:	2300      	movs	r3, #0
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80034c0:	460b      	mov	r3, r1
 80034c2:	4313      	orrs	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80034c6:	4b78      	ldr	r3, [pc, #480]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80034ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d4:	4a74      	ldr	r2, [pc, #464]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034d6:	430b      	orrs	r3, r1
 80034d8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80034e6:	633b      	str	r3, [r7, #48]	; 0x30
 80034e8:	2300      	movs	r3, #0
 80034ea:	637b      	str	r3, [r7, #52]	; 0x34
 80034ec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80034f0:	460b      	mov	r3, r1
 80034f2:	4313      	orrs	r3, r2
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034f6:	4b6c      	ldr	r3, [pc, #432]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80034fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003506:	4a68      	ldr	r2, [pc, #416]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003508:	430b      	orrs	r3, r1
 800350a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800350c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	2100      	movs	r1, #0
 8003516:	62b9      	str	r1, [r7, #40]	; 0x28
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800351e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003522:	460b      	mov	r3, r1
 8003524:	4313      	orrs	r3, r2
 8003526:	d011      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352c:	3308      	adds	r3, #8
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fb79 	bl	8003c28 <RCCEx_PLL2_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800353c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003548:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800354c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	2100      	movs	r1, #0
 8003556:	6239      	str	r1, [r7, #32]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
 800355e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003562:	460b      	mov	r3, r1
 8003564:	4313      	orrs	r3, r2
 8003566:	d011      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800356c:	3308      	adds	r3, #8
 800356e:	2101      	movs	r1, #1
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fb59 	bl	8003c28 <RCCEx_PLL2_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800357c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003588:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800358c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	2100      	movs	r1, #0
 8003596:	61b9      	str	r1, [r7, #24]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80035a2:	460b      	mov	r3, r1
 80035a4:	4313      	orrs	r3, r2
 80035a6:	d011      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ac:	3308      	adds	r3, #8
 80035ae:	2102      	movs	r1, #2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fb39 	bl	8003c28 <RCCEx_PLL2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80035bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80035cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	2100      	movs	r1, #0
 80035d6:	6139      	str	r1, [r7, #16]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80035e2:	460b      	mov	r3, r1
 80035e4:	4313      	orrs	r3, r2
 80035e6:	d011      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ec:	3328      	adds	r3, #40	; 0x28
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fbcb 	bl	8003d8c <RCCEx_PLL3_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80035fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003608:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800360c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	2100      	movs	r1, #0
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003622:	460b      	mov	r3, r1
 8003624:	4313      	orrs	r3, r2
 8003626:	d011      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800362c:	3328      	adds	r3, #40	; 0x28
 800362e:	2101      	movs	r1, #1
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fbab 	bl	8003d8c <RCCEx_PLL3_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800363c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003644:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003648:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800364c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	2100      	movs	r1, #0
 8003656:	6039      	str	r1, [r7, #0]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003662:	460b      	mov	r3, r1
 8003664:	4313      	orrs	r3, r2
 8003666:	d011      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800366c:	3328      	adds	r3, #40	; 0x28
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fb8b 	bl	8003d8c <RCCEx_PLL3_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800367c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003688:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800368c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
}
 800369a:	4618      	mov	r0, r3
 800369c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80036a0:	46bd      	mov	sp, r7
 80036a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a6:	bf00      	nop
 80036a8:	58024400 	.word	0x58024400

080036ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80036b0:	f7fe fde2 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4904      	ldr	r1, [pc, #16]	; (80036d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	58024400 	.word	0x58024400
 80036d4:	08005314 	.word	0x08005314

080036d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	; 0x24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036e0:	4ba1      	ldr	r3, [pc, #644]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80036ea:	4b9f      	ldr	r3, [pc, #636]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	0b1b      	lsrs	r3, r3, #12
 80036f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80036f6:	4b9c      	ldr	r3, [pc, #624]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003702:	4b99      	ldr	r3, [pc, #612]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	08db      	lsrs	r3, r3, #3
 8003708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8111 	beq.w	8003948 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b02      	cmp	r3, #2
 800372a:	f000 8083 	beq.w	8003834 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b02      	cmp	r3, #2
 8003732:	f200 80a1 	bhi.w	8003878 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d056      	beq.n	80037f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003742:	e099      	b.n	8003878 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003744:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d02d      	beq.n	80037ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003750:	4b85      	ldr	r3, [pc, #532]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	08db      	lsrs	r3, r3, #3
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	4a84      	ldr	r2, [pc, #528]	; (800396c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
 8003760:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800377a:	4b7b      	ldr	r3, [pc, #492]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800378a:	ed97 6a03 	vldr	s12, [r7, #12]
 800378e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800379a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80037aa:	e087      	b.n	80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003974 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80037ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037be:	4b6a      	ldr	r3, [pc, #424]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80037d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037ee:	e065      	b.n	80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003978 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80037fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003802:	4b59      	ldr	r3, [pc, #356]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003812:	ed97 6a03 	vldr	s12, [r7, #12]
 8003816:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800381a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800382a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003832:	e043      	b.n	80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800397c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003846:	4b48      	ldr	r3, [pc, #288]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003856:	ed97 6a03 	vldr	s12, [r7, #12]
 800385a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800385e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800386a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003876:	e021      	b.n	80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003882:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003978 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800388a:	4b37      	ldr	r3, [pc, #220]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389a:	ed97 6a03 	vldr	s12, [r7, #12]
 800389e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003970 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80038bc:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	0a5b      	lsrs	r3, r3, #9
 80038c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80038da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e2:	ee17 2a90 	vmov	r2, s15
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80038ea:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003904:	edd7 6a07 	vldr	s13, [r7, #28]
 8003908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800390c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003910:	ee17 2a90 	vmov	r2, s15
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003918:	4b13      	ldr	r3, [pc, #76]	; (8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	0e1b      	lsrs	r3, r3, #24
 800391e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800392e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003932:	edd7 6a07 	vldr	s13, [r7, #28]
 8003936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800393a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800393e:	ee17 2a90 	vmov	r2, s15
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003946:	e008      	b.n	800395a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
}
 800395a:	bf00      	nop
 800395c:	3724      	adds	r7, #36	; 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	58024400 	.word	0x58024400
 800396c:	03d09000 	.word	0x03d09000
 8003970:	46000000 	.word	0x46000000
 8003974:	4c742400 	.word	0x4c742400
 8003978:	4a742400 	.word	0x4a742400
 800397c:	4af42400 	.word	0x4af42400

08003980 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003980:	b480      	push	{r7}
 8003982:	b089      	sub	sp, #36	; 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003988:	4ba1      	ldr	r3, [pc, #644]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003992:	4b9f      	ldr	r3, [pc, #636]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	0d1b      	lsrs	r3, r3, #20
 8003998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800399c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800399e:	4b9c      	ldr	r3, [pc, #624]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80039aa:	4b99      	ldr	r3, [pc, #612]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	08db      	lsrs	r3, r3, #3
 80039b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8111 	beq.w	8003bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	f000 8083 	beq.w	8003adc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	f200 80a1 	bhi.w	8003b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d056      	beq.n	8003a98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80039ea:	e099      	b.n	8003b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039ec:	4b88      	ldr	r3, [pc, #544]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d02d      	beq.n	8003a54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039f8:	4b85      	ldr	r3, [pc, #532]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	08db      	lsrs	r3, r3, #3
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	4a84      	ldr	r2, [pc, #528]	; (8003c14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
 8003a08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	ee07 3a90 	vmov	s15, r3
 8003a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a22:	4b7b      	ldr	r3, [pc, #492]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a52:	e087      	b.n	8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a66:	4b6a      	ldr	r3, [pc, #424]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a96:	e065      	b.n	8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aaa:	4b59      	ldr	r3, [pc, #356]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003abe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ada:	e043      	b.n	8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aee:	4b48      	ldr	r3, [pc, #288]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b02:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b1e:	e021      	b.n	8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b32:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b46:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003b64:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	0a5b      	lsrs	r3, r3, #9
 8003b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b8a:	ee17 2a90 	vmov	r2, s15
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003b92:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ba8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb8:	ee17 2a90 	vmov	r2, s15
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003bc0:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	0e1b      	lsrs	r3, r3, #24
 8003bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003be6:	ee17 2a90 	vmov	r2, s15
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003bee:	e008      	b.n	8003c02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	609a      	str	r2, [r3, #8]
}
 8003c02:	bf00      	nop
 8003c04:	3724      	adds	r7, #36	; 0x24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	58024400 	.word	0x58024400
 8003c14:	03d09000 	.word	0x03d09000
 8003c18:	46000000 	.word	0x46000000
 8003c1c:	4c742400 	.word	0x4c742400
 8003c20:	4a742400 	.word	0x4a742400
 8003c24:	4af42400 	.word	0x4af42400

08003c28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c36:	4b53      	ldr	r3, [pc, #332]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d101      	bne.n	8003c46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e099      	b.n	8003d7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003c46:	4b4f      	ldr	r3, [pc, #316]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a4e      	ldr	r2, [pc, #312]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003c4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c52:	f7fd f89b 	bl	8000d8c <HAL_GetTick>
 8003c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c58:	e008      	b.n	8003c6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003c5a:	f7fd f897 	bl	8000d8c <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e086      	b.n	8003d7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c6c:	4b45      	ldr	r3, [pc, #276]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c78:	4b42      	ldr	r3, [pc, #264]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	031b      	lsls	r3, r3, #12
 8003c86:	493f      	ldr	r1, [pc, #252]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	628b      	str	r3, [r1, #40]	; 0x28
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	025b      	lsls	r3, r3, #9
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cbc:	4931      	ldr	r1, [pc, #196]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003cc2:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	492d      	ldr	r1, [pc, #180]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	f023 0220 	bic.w	r2, r3, #32
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	4928      	ldr	r1, [pc, #160]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	4a26      	ldr	r2, [pc, #152]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003cec:	f023 0310 	bic.w	r3, r3, #16
 8003cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cf6:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <RCCEx_PLL2_Config+0x160>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	69d2      	ldr	r2, [r2, #28]
 8003cfe:	00d2      	lsls	r2, r2, #3
 8003d00:	4920      	ldr	r1, [pc, #128]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d06:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003d0c:	f043 0310 	orr.w	r3, r3, #16
 8003d10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d18:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	4a19      	ldr	r2, [pc, #100]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003d1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d24:	e00f      	b.n	8003d46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d106      	bne.n	8003d3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d2c:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	4a14      	ldr	r2, [pc, #80]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d38:	e005      	b.n	8003d46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	4a11      	ldr	r2, [pc, #68]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003d4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d52:	f7fd f81b 	bl	8000d8c <HAL_GetTick>
 8003d56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d58:	e008      	b.n	8003d6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d5a:	f7fd f817 	bl	8000d8c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e006      	b.n	8003d7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <RCCEx_PLL2_Config+0x15c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	58024400 	.word	0x58024400
 8003d88:	ffff0007 	.word	0xffff0007

08003d8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d9a:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d101      	bne.n	8003daa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e099      	b.n	8003ede <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003daa:	4b4f      	ldr	r3, [pc, #316]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a4e      	ldr	r2, [pc, #312]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db6:	f7fc ffe9 	bl	8000d8c <HAL_GetTick>
 8003dba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003dbe:	f7fc ffe5 	bl	8000d8c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e086      	b.n	8003ede <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003dd0:	4b45      	ldr	r3, [pc, #276]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ddc:	4b42      	ldr	r3, [pc, #264]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	051b      	lsls	r3, r3, #20
 8003dea:	493f      	ldr	r1, [pc, #252]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	628b      	str	r3, [r1, #40]	; 0x28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	025b      	lsls	r3, r3, #9
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	041b      	lsls	r3, r3, #16
 8003e0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	061b      	lsls	r3, r3, #24
 8003e1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e20:	4931      	ldr	r1, [pc, #196]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e26:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	492d      	ldr	r1, [pc, #180]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	4928      	ldr	r1, [pc, #160]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e4a:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	4a26      	ldr	r2, [pc, #152]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e56:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e5a:	4b24      	ldr	r3, [pc, #144]	; (8003eec <RCCEx_PLL3_Config+0x160>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	69d2      	ldr	r2, [r2, #28]
 8003e62:	00d2      	lsls	r2, r2, #3
 8003e64:	4920      	ldr	r1, [pc, #128]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003e6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	4a19      	ldr	r2, [pc, #100]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e88:	e00f      	b.n	8003eaa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d106      	bne.n	8003e9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e90:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	4a14      	ldr	r2, [pc, #80]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003e96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e9c:	e005      	b.n	8003eaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e9e:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	4a11      	ldr	r2, [pc, #68]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003ea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a0e      	ldr	r2, [pc, #56]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb6:	f7fc ff69 	bl	8000d8c <HAL_GetTick>
 8003eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ebc:	e008      	b.n	8003ed0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003ebe:	f7fc ff65 	bl	8000d8c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e006      	b.n	8003ede <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <RCCEx_PLL3_Config+0x15c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	ffff0007 	.word	0xffff0007

08003ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e042      	b.n	8003f88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7fc fd7d 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2224      	movs	r2, #36	; 0x24
 8003f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f82c 	bl	8003f90 <UART_SetConfig>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e022      	b.n	8003f88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fe8c 	bl	8004c68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 ff13 	bl	8004dac <UART_CheckIdleState>
 8003f86:	4603      	mov	r3, r0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f94:	b092      	sub	sp, #72	; 0x48
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4bbe      	ldr	r3, [pc, #760]	; (80042b8 <UART_SetConfig+0x328>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4ab3      	ldr	r2, [pc, #716]	; (80042bc <UART_SetConfig+0x32c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	4baf      	ldr	r3, [pc, #700]	; (80042c0 <UART_SetConfig+0x330>)
 8004004:	4013      	ands	r3, r2
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800400c:	430b      	orrs	r3, r1
 800400e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	f023 010f 	bic.w	r1, r3, #15
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4aa6      	ldr	r2, [pc, #664]	; (80042c4 <UART_SetConfig+0x334>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d177      	bne.n	8004120 <UART_SetConfig+0x190>
 8004030:	4ba5      	ldr	r3, [pc, #660]	; (80042c8 <UART_SetConfig+0x338>)
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004038:	2b28      	cmp	r3, #40	; 0x28
 800403a:	d86d      	bhi.n	8004118 <UART_SetConfig+0x188>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <UART_SetConfig+0xb4>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	080040e9 	.word	0x080040e9
 8004048:	08004119 	.word	0x08004119
 800404c:	08004119 	.word	0x08004119
 8004050:	08004119 	.word	0x08004119
 8004054:	08004119 	.word	0x08004119
 8004058:	08004119 	.word	0x08004119
 800405c:	08004119 	.word	0x08004119
 8004060:	08004119 	.word	0x08004119
 8004064:	080040f1 	.word	0x080040f1
 8004068:	08004119 	.word	0x08004119
 800406c:	08004119 	.word	0x08004119
 8004070:	08004119 	.word	0x08004119
 8004074:	08004119 	.word	0x08004119
 8004078:	08004119 	.word	0x08004119
 800407c:	08004119 	.word	0x08004119
 8004080:	08004119 	.word	0x08004119
 8004084:	080040f9 	.word	0x080040f9
 8004088:	08004119 	.word	0x08004119
 800408c:	08004119 	.word	0x08004119
 8004090:	08004119 	.word	0x08004119
 8004094:	08004119 	.word	0x08004119
 8004098:	08004119 	.word	0x08004119
 800409c:	08004119 	.word	0x08004119
 80040a0:	08004119 	.word	0x08004119
 80040a4:	08004101 	.word	0x08004101
 80040a8:	08004119 	.word	0x08004119
 80040ac:	08004119 	.word	0x08004119
 80040b0:	08004119 	.word	0x08004119
 80040b4:	08004119 	.word	0x08004119
 80040b8:	08004119 	.word	0x08004119
 80040bc:	08004119 	.word	0x08004119
 80040c0:	08004119 	.word	0x08004119
 80040c4:	08004109 	.word	0x08004109
 80040c8:	08004119 	.word	0x08004119
 80040cc:	08004119 	.word	0x08004119
 80040d0:	08004119 	.word	0x08004119
 80040d4:	08004119 	.word	0x08004119
 80040d8:	08004119 	.word	0x08004119
 80040dc:	08004119 	.word	0x08004119
 80040e0:	08004119 	.word	0x08004119
 80040e4:	08004111 	.word	0x08004111
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ee:	e326      	b.n	800473e <UART_SetConfig+0x7ae>
 80040f0:	2304      	movs	r3, #4
 80040f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040f6:	e322      	b.n	800473e <UART_SetConfig+0x7ae>
 80040f8:	2308      	movs	r3, #8
 80040fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040fe:	e31e      	b.n	800473e <UART_SetConfig+0x7ae>
 8004100:	2310      	movs	r3, #16
 8004102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004106:	e31a      	b.n	800473e <UART_SetConfig+0x7ae>
 8004108:	2320      	movs	r3, #32
 800410a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800410e:	e316      	b.n	800473e <UART_SetConfig+0x7ae>
 8004110:	2340      	movs	r3, #64	; 0x40
 8004112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004116:	e312      	b.n	800473e <UART_SetConfig+0x7ae>
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800411e:	e30e      	b.n	800473e <UART_SetConfig+0x7ae>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a69      	ldr	r2, [pc, #420]	; (80042cc <UART_SetConfig+0x33c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d130      	bne.n	800418c <UART_SetConfig+0x1fc>
 800412a:	4b67      	ldr	r3, [pc, #412]	; (80042c8 <UART_SetConfig+0x338>)
 800412c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	2b05      	cmp	r3, #5
 8004134:	d826      	bhi.n	8004184 <UART_SetConfig+0x1f4>
 8004136:	a201      	add	r2, pc, #4	; (adr r2, 800413c <UART_SetConfig+0x1ac>)
 8004138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413c:	08004155 	.word	0x08004155
 8004140:	0800415d 	.word	0x0800415d
 8004144:	08004165 	.word	0x08004165
 8004148:	0800416d 	.word	0x0800416d
 800414c:	08004175 	.word	0x08004175
 8004150:	0800417d 	.word	0x0800417d
 8004154:	2300      	movs	r3, #0
 8004156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800415a:	e2f0      	b.n	800473e <UART_SetConfig+0x7ae>
 800415c:	2304      	movs	r3, #4
 800415e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004162:	e2ec      	b.n	800473e <UART_SetConfig+0x7ae>
 8004164:	2308      	movs	r3, #8
 8004166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800416a:	e2e8      	b.n	800473e <UART_SetConfig+0x7ae>
 800416c:	2310      	movs	r3, #16
 800416e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004172:	e2e4      	b.n	800473e <UART_SetConfig+0x7ae>
 8004174:	2320      	movs	r3, #32
 8004176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800417a:	e2e0      	b.n	800473e <UART_SetConfig+0x7ae>
 800417c:	2340      	movs	r3, #64	; 0x40
 800417e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004182:	e2dc      	b.n	800473e <UART_SetConfig+0x7ae>
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800418a:	e2d8      	b.n	800473e <UART_SetConfig+0x7ae>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a4f      	ldr	r2, [pc, #316]	; (80042d0 <UART_SetConfig+0x340>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d130      	bne.n	80041f8 <UART_SetConfig+0x268>
 8004196:	4b4c      	ldr	r3, [pc, #304]	; (80042c8 <UART_SetConfig+0x338>)
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d826      	bhi.n	80041f0 <UART_SetConfig+0x260>
 80041a2:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <UART_SetConfig+0x218>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041c1 	.word	0x080041c1
 80041ac:	080041c9 	.word	0x080041c9
 80041b0:	080041d1 	.word	0x080041d1
 80041b4:	080041d9 	.word	0x080041d9
 80041b8:	080041e1 	.word	0x080041e1
 80041bc:	080041e9 	.word	0x080041e9
 80041c0:	2300      	movs	r3, #0
 80041c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041c6:	e2ba      	b.n	800473e <UART_SetConfig+0x7ae>
 80041c8:	2304      	movs	r3, #4
 80041ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ce:	e2b6      	b.n	800473e <UART_SetConfig+0x7ae>
 80041d0:	2308      	movs	r3, #8
 80041d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041d6:	e2b2      	b.n	800473e <UART_SetConfig+0x7ae>
 80041d8:	2310      	movs	r3, #16
 80041da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041de:	e2ae      	b.n	800473e <UART_SetConfig+0x7ae>
 80041e0:	2320      	movs	r3, #32
 80041e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041e6:	e2aa      	b.n	800473e <UART_SetConfig+0x7ae>
 80041e8:	2340      	movs	r3, #64	; 0x40
 80041ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ee:	e2a6      	b.n	800473e <UART_SetConfig+0x7ae>
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041f6:	e2a2      	b.n	800473e <UART_SetConfig+0x7ae>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a35      	ldr	r2, [pc, #212]	; (80042d4 <UART_SetConfig+0x344>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d130      	bne.n	8004264 <UART_SetConfig+0x2d4>
 8004202:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <UART_SetConfig+0x338>)
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	2b05      	cmp	r3, #5
 800420c:	d826      	bhi.n	800425c <UART_SetConfig+0x2cc>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x284>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	0800422d 	.word	0x0800422d
 8004218:	08004235 	.word	0x08004235
 800421c:	0800423d 	.word	0x0800423d
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	2300      	movs	r3, #0
 800422e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004232:	e284      	b.n	800473e <UART_SetConfig+0x7ae>
 8004234:	2304      	movs	r3, #4
 8004236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800423a:	e280      	b.n	800473e <UART_SetConfig+0x7ae>
 800423c:	2308      	movs	r3, #8
 800423e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004242:	e27c      	b.n	800473e <UART_SetConfig+0x7ae>
 8004244:	2310      	movs	r3, #16
 8004246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800424a:	e278      	b.n	800473e <UART_SetConfig+0x7ae>
 800424c:	2320      	movs	r3, #32
 800424e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004252:	e274      	b.n	800473e <UART_SetConfig+0x7ae>
 8004254:	2340      	movs	r3, #64	; 0x40
 8004256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800425a:	e270      	b.n	800473e <UART_SetConfig+0x7ae>
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004262:	e26c      	b.n	800473e <UART_SetConfig+0x7ae>
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <UART_SetConfig+0x348>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d142      	bne.n	80042f4 <UART_SetConfig+0x364>
 800426e:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <UART_SetConfig+0x338>)
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	2b05      	cmp	r3, #5
 8004278:	d838      	bhi.n	80042ec <UART_SetConfig+0x35c>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <UART_SetConfig+0x2f0>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	08004299 	.word	0x08004299
 8004284:	080042a1 	.word	0x080042a1
 8004288:	080042a9 	.word	0x080042a9
 800428c:	080042b1 	.word	0x080042b1
 8004290:	080042dd 	.word	0x080042dd
 8004294:	080042e5 	.word	0x080042e5
 8004298:	2300      	movs	r3, #0
 800429a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800429e:	e24e      	b.n	800473e <UART_SetConfig+0x7ae>
 80042a0:	2304      	movs	r3, #4
 80042a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042a6:	e24a      	b.n	800473e <UART_SetConfig+0x7ae>
 80042a8:	2308      	movs	r3, #8
 80042aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ae:	e246      	b.n	800473e <UART_SetConfig+0x7ae>
 80042b0:	2310      	movs	r3, #16
 80042b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042b6:	e242      	b.n	800473e <UART_SetConfig+0x7ae>
 80042b8:	cfff69f3 	.word	0xcfff69f3
 80042bc:	58000c00 	.word	0x58000c00
 80042c0:	11fff4ff 	.word	0x11fff4ff
 80042c4:	40011000 	.word	0x40011000
 80042c8:	58024400 	.word	0x58024400
 80042cc:	40004400 	.word	0x40004400
 80042d0:	40004800 	.word	0x40004800
 80042d4:	40004c00 	.word	0x40004c00
 80042d8:	40005000 	.word	0x40005000
 80042dc:	2320      	movs	r3, #32
 80042de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042e2:	e22c      	b.n	800473e <UART_SetConfig+0x7ae>
 80042e4:	2340      	movs	r3, #64	; 0x40
 80042e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ea:	e228      	b.n	800473e <UART_SetConfig+0x7ae>
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f2:	e224      	b.n	800473e <UART_SetConfig+0x7ae>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4ab1      	ldr	r2, [pc, #708]	; (80045c0 <UART_SetConfig+0x630>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d176      	bne.n	80043ec <UART_SetConfig+0x45c>
 80042fe:	4bb1      	ldr	r3, [pc, #708]	; (80045c4 <UART_SetConfig+0x634>)
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004306:	2b28      	cmp	r3, #40	; 0x28
 8004308:	d86c      	bhi.n	80043e4 <UART_SetConfig+0x454>
 800430a:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <UART_SetConfig+0x380>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	080043b5 	.word	0x080043b5
 8004314:	080043e5 	.word	0x080043e5
 8004318:	080043e5 	.word	0x080043e5
 800431c:	080043e5 	.word	0x080043e5
 8004320:	080043e5 	.word	0x080043e5
 8004324:	080043e5 	.word	0x080043e5
 8004328:	080043e5 	.word	0x080043e5
 800432c:	080043e5 	.word	0x080043e5
 8004330:	080043bd 	.word	0x080043bd
 8004334:	080043e5 	.word	0x080043e5
 8004338:	080043e5 	.word	0x080043e5
 800433c:	080043e5 	.word	0x080043e5
 8004340:	080043e5 	.word	0x080043e5
 8004344:	080043e5 	.word	0x080043e5
 8004348:	080043e5 	.word	0x080043e5
 800434c:	080043e5 	.word	0x080043e5
 8004350:	080043c5 	.word	0x080043c5
 8004354:	080043e5 	.word	0x080043e5
 8004358:	080043e5 	.word	0x080043e5
 800435c:	080043e5 	.word	0x080043e5
 8004360:	080043e5 	.word	0x080043e5
 8004364:	080043e5 	.word	0x080043e5
 8004368:	080043e5 	.word	0x080043e5
 800436c:	080043e5 	.word	0x080043e5
 8004370:	080043cd 	.word	0x080043cd
 8004374:	080043e5 	.word	0x080043e5
 8004378:	080043e5 	.word	0x080043e5
 800437c:	080043e5 	.word	0x080043e5
 8004380:	080043e5 	.word	0x080043e5
 8004384:	080043e5 	.word	0x080043e5
 8004388:	080043e5 	.word	0x080043e5
 800438c:	080043e5 	.word	0x080043e5
 8004390:	080043d5 	.word	0x080043d5
 8004394:	080043e5 	.word	0x080043e5
 8004398:	080043e5 	.word	0x080043e5
 800439c:	080043e5 	.word	0x080043e5
 80043a0:	080043e5 	.word	0x080043e5
 80043a4:	080043e5 	.word	0x080043e5
 80043a8:	080043e5 	.word	0x080043e5
 80043ac:	080043e5 	.word	0x080043e5
 80043b0:	080043dd 	.word	0x080043dd
 80043b4:	2301      	movs	r3, #1
 80043b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ba:	e1c0      	b.n	800473e <UART_SetConfig+0x7ae>
 80043bc:	2304      	movs	r3, #4
 80043be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043c2:	e1bc      	b.n	800473e <UART_SetConfig+0x7ae>
 80043c4:	2308      	movs	r3, #8
 80043c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ca:	e1b8      	b.n	800473e <UART_SetConfig+0x7ae>
 80043cc:	2310      	movs	r3, #16
 80043ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d2:	e1b4      	b.n	800473e <UART_SetConfig+0x7ae>
 80043d4:	2320      	movs	r3, #32
 80043d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043da:	e1b0      	b.n	800473e <UART_SetConfig+0x7ae>
 80043dc:	2340      	movs	r3, #64	; 0x40
 80043de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e2:	e1ac      	b.n	800473e <UART_SetConfig+0x7ae>
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ea:	e1a8      	b.n	800473e <UART_SetConfig+0x7ae>
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a75      	ldr	r2, [pc, #468]	; (80045c8 <UART_SetConfig+0x638>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d130      	bne.n	8004458 <UART_SetConfig+0x4c8>
 80043f6:	4b73      	ldr	r3, [pc, #460]	; (80045c4 <UART_SetConfig+0x634>)
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	2b05      	cmp	r3, #5
 8004400:	d826      	bhi.n	8004450 <UART_SetConfig+0x4c0>
 8004402:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <UART_SetConfig+0x478>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	08004421 	.word	0x08004421
 800440c:	08004429 	.word	0x08004429
 8004410:	08004431 	.word	0x08004431
 8004414:	08004439 	.word	0x08004439
 8004418:	08004441 	.word	0x08004441
 800441c:	08004449 	.word	0x08004449
 8004420:	2300      	movs	r3, #0
 8004422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004426:	e18a      	b.n	800473e <UART_SetConfig+0x7ae>
 8004428:	2304      	movs	r3, #4
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442e:	e186      	b.n	800473e <UART_SetConfig+0x7ae>
 8004430:	2308      	movs	r3, #8
 8004432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004436:	e182      	b.n	800473e <UART_SetConfig+0x7ae>
 8004438:	2310      	movs	r3, #16
 800443a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443e:	e17e      	b.n	800473e <UART_SetConfig+0x7ae>
 8004440:	2320      	movs	r3, #32
 8004442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004446:	e17a      	b.n	800473e <UART_SetConfig+0x7ae>
 8004448:	2340      	movs	r3, #64	; 0x40
 800444a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444e:	e176      	b.n	800473e <UART_SetConfig+0x7ae>
 8004450:	2380      	movs	r3, #128	; 0x80
 8004452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004456:	e172      	b.n	800473e <UART_SetConfig+0x7ae>
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a5b      	ldr	r2, [pc, #364]	; (80045cc <UART_SetConfig+0x63c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d130      	bne.n	80044c4 <UART_SetConfig+0x534>
 8004462:	4b58      	ldr	r3, [pc, #352]	; (80045c4 <UART_SetConfig+0x634>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	2b05      	cmp	r3, #5
 800446c:	d826      	bhi.n	80044bc <UART_SetConfig+0x52c>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <UART_SetConfig+0x4e4>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	0800448d 	.word	0x0800448d
 8004478:	08004495 	.word	0x08004495
 800447c:	0800449d 	.word	0x0800449d
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044b5 	.word	0x080044b5
 800448c:	2300      	movs	r3, #0
 800448e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004492:	e154      	b.n	800473e <UART_SetConfig+0x7ae>
 8004494:	2304      	movs	r3, #4
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449a:	e150      	b.n	800473e <UART_SetConfig+0x7ae>
 800449c:	2308      	movs	r3, #8
 800449e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a2:	e14c      	b.n	800473e <UART_SetConfig+0x7ae>
 80044a4:	2310      	movs	r3, #16
 80044a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044aa:	e148      	b.n	800473e <UART_SetConfig+0x7ae>
 80044ac:	2320      	movs	r3, #32
 80044ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b2:	e144      	b.n	800473e <UART_SetConfig+0x7ae>
 80044b4:	2340      	movs	r3, #64	; 0x40
 80044b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ba:	e140      	b.n	800473e <UART_SetConfig+0x7ae>
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044c2:	e13c      	b.n	800473e <UART_SetConfig+0x7ae>
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a41      	ldr	r2, [pc, #260]	; (80045d0 <UART_SetConfig+0x640>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	f040 8082 	bne.w	80045d4 <UART_SetConfig+0x644>
 80044d0:	4b3c      	ldr	r3, [pc, #240]	; (80045c4 <UART_SetConfig+0x634>)
 80044d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044d8:	2b28      	cmp	r3, #40	; 0x28
 80044da:	d86d      	bhi.n	80045b8 <UART_SetConfig+0x628>
 80044dc:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <UART_SetConfig+0x554>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	08004589 	.word	0x08004589
 80044e8:	080045b9 	.word	0x080045b9
 80044ec:	080045b9 	.word	0x080045b9
 80044f0:	080045b9 	.word	0x080045b9
 80044f4:	080045b9 	.word	0x080045b9
 80044f8:	080045b9 	.word	0x080045b9
 80044fc:	080045b9 	.word	0x080045b9
 8004500:	080045b9 	.word	0x080045b9
 8004504:	08004591 	.word	0x08004591
 8004508:	080045b9 	.word	0x080045b9
 800450c:	080045b9 	.word	0x080045b9
 8004510:	080045b9 	.word	0x080045b9
 8004514:	080045b9 	.word	0x080045b9
 8004518:	080045b9 	.word	0x080045b9
 800451c:	080045b9 	.word	0x080045b9
 8004520:	080045b9 	.word	0x080045b9
 8004524:	08004599 	.word	0x08004599
 8004528:	080045b9 	.word	0x080045b9
 800452c:	080045b9 	.word	0x080045b9
 8004530:	080045b9 	.word	0x080045b9
 8004534:	080045b9 	.word	0x080045b9
 8004538:	080045b9 	.word	0x080045b9
 800453c:	080045b9 	.word	0x080045b9
 8004540:	080045b9 	.word	0x080045b9
 8004544:	080045a1 	.word	0x080045a1
 8004548:	080045b9 	.word	0x080045b9
 800454c:	080045b9 	.word	0x080045b9
 8004550:	080045b9 	.word	0x080045b9
 8004554:	080045b9 	.word	0x080045b9
 8004558:	080045b9 	.word	0x080045b9
 800455c:	080045b9 	.word	0x080045b9
 8004560:	080045b9 	.word	0x080045b9
 8004564:	080045a9 	.word	0x080045a9
 8004568:	080045b9 	.word	0x080045b9
 800456c:	080045b9 	.word	0x080045b9
 8004570:	080045b9 	.word	0x080045b9
 8004574:	080045b9 	.word	0x080045b9
 8004578:	080045b9 	.word	0x080045b9
 800457c:	080045b9 	.word	0x080045b9
 8004580:	080045b9 	.word	0x080045b9
 8004584:	080045b1 	.word	0x080045b1
 8004588:	2301      	movs	r3, #1
 800458a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800458e:	e0d6      	b.n	800473e <UART_SetConfig+0x7ae>
 8004590:	2304      	movs	r3, #4
 8004592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004596:	e0d2      	b.n	800473e <UART_SetConfig+0x7ae>
 8004598:	2308      	movs	r3, #8
 800459a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800459e:	e0ce      	b.n	800473e <UART_SetConfig+0x7ae>
 80045a0:	2310      	movs	r3, #16
 80045a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045a6:	e0ca      	b.n	800473e <UART_SetConfig+0x7ae>
 80045a8:	2320      	movs	r3, #32
 80045aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ae:	e0c6      	b.n	800473e <UART_SetConfig+0x7ae>
 80045b0:	2340      	movs	r3, #64	; 0x40
 80045b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045b6:	e0c2      	b.n	800473e <UART_SetConfig+0x7ae>
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045be:	e0be      	b.n	800473e <UART_SetConfig+0x7ae>
 80045c0:	40011400 	.word	0x40011400
 80045c4:	58024400 	.word	0x58024400
 80045c8:	40007800 	.word	0x40007800
 80045cc:	40007c00 	.word	0x40007c00
 80045d0:	40011800 	.word	0x40011800
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4aad      	ldr	r2, [pc, #692]	; (8004890 <UART_SetConfig+0x900>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d176      	bne.n	80046cc <UART_SetConfig+0x73c>
 80045de:	4bad      	ldr	r3, [pc, #692]	; (8004894 <UART_SetConfig+0x904>)
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045e6:	2b28      	cmp	r3, #40	; 0x28
 80045e8:	d86c      	bhi.n	80046c4 <UART_SetConfig+0x734>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0x660>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004695 	.word	0x08004695
 80045f4:	080046c5 	.word	0x080046c5
 80045f8:	080046c5 	.word	0x080046c5
 80045fc:	080046c5 	.word	0x080046c5
 8004600:	080046c5 	.word	0x080046c5
 8004604:	080046c5 	.word	0x080046c5
 8004608:	080046c5 	.word	0x080046c5
 800460c:	080046c5 	.word	0x080046c5
 8004610:	0800469d 	.word	0x0800469d
 8004614:	080046c5 	.word	0x080046c5
 8004618:	080046c5 	.word	0x080046c5
 800461c:	080046c5 	.word	0x080046c5
 8004620:	080046c5 	.word	0x080046c5
 8004624:	080046c5 	.word	0x080046c5
 8004628:	080046c5 	.word	0x080046c5
 800462c:	080046c5 	.word	0x080046c5
 8004630:	080046a5 	.word	0x080046a5
 8004634:	080046c5 	.word	0x080046c5
 8004638:	080046c5 	.word	0x080046c5
 800463c:	080046c5 	.word	0x080046c5
 8004640:	080046c5 	.word	0x080046c5
 8004644:	080046c5 	.word	0x080046c5
 8004648:	080046c5 	.word	0x080046c5
 800464c:	080046c5 	.word	0x080046c5
 8004650:	080046ad 	.word	0x080046ad
 8004654:	080046c5 	.word	0x080046c5
 8004658:	080046c5 	.word	0x080046c5
 800465c:	080046c5 	.word	0x080046c5
 8004660:	080046c5 	.word	0x080046c5
 8004664:	080046c5 	.word	0x080046c5
 8004668:	080046c5 	.word	0x080046c5
 800466c:	080046c5 	.word	0x080046c5
 8004670:	080046b5 	.word	0x080046b5
 8004674:	080046c5 	.word	0x080046c5
 8004678:	080046c5 	.word	0x080046c5
 800467c:	080046c5 	.word	0x080046c5
 8004680:	080046c5 	.word	0x080046c5
 8004684:	080046c5 	.word	0x080046c5
 8004688:	080046c5 	.word	0x080046c5
 800468c:	080046c5 	.word	0x080046c5
 8004690:	080046bd 	.word	0x080046bd
 8004694:	2301      	movs	r3, #1
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469a:	e050      	b.n	800473e <UART_SetConfig+0x7ae>
 800469c:	2304      	movs	r3, #4
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a2:	e04c      	b.n	800473e <UART_SetConfig+0x7ae>
 80046a4:	2308      	movs	r3, #8
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046aa:	e048      	b.n	800473e <UART_SetConfig+0x7ae>
 80046ac:	2310      	movs	r3, #16
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b2:	e044      	b.n	800473e <UART_SetConfig+0x7ae>
 80046b4:	2320      	movs	r3, #32
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ba:	e040      	b.n	800473e <UART_SetConfig+0x7ae>
 80046bc:	2340      	movs	r3, #64	; 0x40
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c2:	e03c      	b.n	800473e <UART_SetConfig+0x7ae>
 80046c4:	2380      	movs	r3, #128	; 0x80
 80046c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ca:	e038      	b.n	800473e <UART_SetConfig+0x7ae>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a71      	ldr	r2, [pc, #452]	; (8004898 <UART_SetConfig+0x908>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d130      	bne.n	8004738 <UART_SetConfig+0x7a8>
 80046d6:	4b6f      	ldr	r3, [pc, #444]	; (8004894 <UART_SetConfig+0x904>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	2b05      	cmp	r3, #5
 80046e0:	d826      	bhi.n	8004730 <UART_SetConfig+0x7a0>
 80046e2:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <UART_SetConfig+0x758>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	08004701 	.word	0x08004701
 80046ec:	08004709 	.word	0x08004709
 80046f0:	08004711 	.word	0x08004711
 80046f4:	08004719 	.word	0x08004719
 80046f8:	08004721 	.word	0x08004721
 80046fc:	08004729 	.word	0x08004729
 8004700:	2302      	movs	r3, #2
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004706:	e01a      	b.n	800473e <UART_SetConfig+0x7ae>
 8004708:	2304      	movs	r3, #4
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470e:	e016      	b.n	800473e <UART_SetConfig+0x7ae>
 8004710:	2308      	movs	r3, #8
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004716:	e012      	b.n	800473e <UART_SetConfig+0x7ae>
 8004718:	2310      	movs	r3, #16
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471e:	e00e      	b.n	800473e <UART_SetConfig+0x7ae>
 8004720:	2320      	movs	r3, #32
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004726:	e00a      	b.n	800473e <UART_SetConfig+0x7ae>
 8004728:	2340      	movs	r3, #64	; 0x40
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472e:	e006      	b.n	800473e <UART_SetConfig+0x7ae>
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004736:	e002      	b.n	800473e <UART_SetConfig+0x7ae>
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a55      	ldr	r2, [pc, #340]	; (8004898 <UART_SetConfig+0x908>)
 8004744:	4293      	cmp	r3, r2
 8004746:	f040 80f8 	bne.w	800493a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800474a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800474e:	2b20      	cmp	r3, #32
 8004750:	dc46      	bgt.n	80047e0 <UART_SetConfig+0x850>
 8004752:	2b02      	cmp	r3, #2
 8004754:	db75      	blt.n	8004842 <UART_SetConfig+0x8b2>
 8004756:	3b02      	subs	r3, #2
 8004758:	2b1e      	cmp	r3, #30
 800475a:	d872      	bhi.n	8004842 <UART_SetConfig+0x8b2>
 800475c:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <UART_SetConfig+0x7d4>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	080047e7 	.word	0x080047e7
 8004768:	08004843 	.word	0x08004843
 800476c:	080047ef 	.word	0x080047ef
 8004770:	08004843 	.word	0x08004843
 8004774:	08004843 	.word	0x08004843
 8004778:	08004843 	.word	0x08004843
 800477c:	080047ff 	.word	0x080047ff
 8004780:	08004843 	.word	0x08004843
 8004784:	08004843 	.word	0x08004843
 8004788:	08004843 	.word	0x08004843
 800478c:	08004843 	.word	0x08004843
 8004790:	08004843 	.word	0x08004843
 8004794:	08004843 	.word	0x08004843
 8004798:	08004843 	.word	0x08004843
 800479c:	0800480f 	.word	0x0800480f
 80047a0:	08004843 	.word	0x08004843
 80047a4:	08004843 	.word	0x08004843
 80047a8:	08004843 	.word	0x08004843
 80047ac:	08004843 	.word	0x08004843
 80047b0:	08004843 	.word	0x08004843
 80047b4:	08004843 	.word	0x08004843
 80047b8:	08004843 	.word	0x08004843
 80047bc:	08004843 	.word	0x08004843
 80047c0:	08004843 	.word	0x08004843
 80047c4:	08004843 	.word	0x08004843
 80047c8:	08004843 	.word	0x08004843
 80047cc:	08004843 	.word	0x08004843
 80047d0:	08004843 	.word	0x08004843
 80047d4:	08004843 	.word	0x08004843
 80047d8:	08004843 	.word	0x08004843
 80047dc:	08004835 	.word	0x08004835
 80047e0:	2b40      	cmp	r3, #64	; 0x40
 80047e2:	d02a      	beq.n	800483a <UART_SetConfig+0x8aa>
 80047e4:	e02d      	b.n	8004842 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80047e6:	f7fe ff61 	bl	80036ac <HAL_RCCEx_GetD3PCLK1Freq>
 80047ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80047ec:	e02f      	b.n	800484e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe ff70 	bl	80036d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047fc:	e027      	b.n	800484e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047fe:	f107 0318 	add.w	r3, r7, #24
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff f8bc 	bl	8003980 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800480c:	e01f      	b.n	800484e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800480e:	4b21      	ldr	r3, [pc, #132]	; (8004894 <UART_SetConfig+0x904>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <UART_SetConfig+0x904>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	08db      	lsrs	r3, r3, #3
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	4a1d      	ldr	r2, [pc, #116]	; (800489c <UART_SetConfig+0x90c>)
 8004826:	fa22 f303 	lsr.w	r3, r2, r3
 800482a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800482c:	e00f      	b.n	800484e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800482e:	4b1b      	ldr	r3, [pc, #108]	; (800489c <UART_SetConfig+0x90c>)
 8004830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004832:	e00c      	b.n	800484e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004834:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <UART_SetConfig+0x910>)
 8004836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004838:	e009      	b.n	800484e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004840:	e005      	b.n	800484e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800484c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 81ee 	beq.w	8004c32 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	4a12      	ldr	r2, [pc, #72]	; (80048a4 <UART_SetConfig+0x914>)
 800485c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004860:	461a      	mov	r2, r3
 8004862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004864:	fbb3 f3f2 	udiv	r3, r3, r2
 8004868:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4413      	add	r3, r2
 8004874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004876:	429a      	cmp	r2, r3
 8004878:	d305      	bcc.n	8004886 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004882:	429a      	cmp	r2, r3
 8004884:	d910      	bls.n	80048a8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800488c:	e1d1      	b.n	8004c32 <UART_SetConfig+0xca2>
 800488e:	bf00      	nop
 8004890:	40011c00 	.word	0x40011c00
 8004894:	58024400 	.word	0x58024400
 8004898:	58000c00 	.word	0x58000c00
 800489c:	03d09000 	.word	0x03d09000
 80048a0:	003d0900 	.word	0x003d0900
 80048a4:	08005324 	.word	0x08005324
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048aa:	2200      	movs	r2, #0
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	60fa      	str	r2, [r7, #12]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	4ac0      	ldr	r2, [pc, #768]	; (8004bb8 <UART_SetConfig+0xc28>)
 80048b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2200      	movs	r2, #0
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048ca:	f7fb fd0f 	bl	80002ec <__aeabi_uldivmod>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4610      	mov	r0, r2
 80048d4:	4619      	mov	r1, r3
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	020b      	lsls	r3, r1, #8
 80048e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048e4:	0202      	lsls	r2, r0, #8
 80048e6:	6979      	ldr	r1, [r7, #20]
 80048e8:	6849      	ldr	r1, [r1, #4]
 80048ea:	0849      	lsrs	r1, r1, #1
 80048ec:	2000      	movs	r0, #0
 80048ee:	460c      	mov	r4, r1
 80048f0:	4605      	mov	r5, r0
 80048f2:	eb12 0804 	adds.w	r8, r2, r4
 80048f6:	eb43 0905 	adc.w	r9, r3, r5
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	469a      	mov	sl, r3
 8004902:	4693      	mov	fp, r2
 8004904:	4652      	mov	r2, sl
 8004906:	465b      	mov	r3, fp
 8004908:	4640      	mov	r0, r8
 800490a:	4649      	mov	r1, r9
 800490c:	f7fb fcee 	bl	80002ec <__aeabi_uldivmod>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4613      	mov	r3, r2
 8004916:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800491e:	d308      	bcc.n	8004932 <UART_SetConfig+0x9a2>
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004926:	d204      	bcs.n	8004932 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800492e:	60da      	str	r2, [r3, #12]
 8004930:	e17f      	b.n	8004c32 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004938:	e17b      	b.n	8004c32 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004942:	f040 80bd 	bne.w	8004ac0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004946:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800494a:	2b20      	cmp	r3, #32
 800494c:	dc48      	bgt.n	80049e0 <UART_SetConfig+0xa50>
 800494e:	2b00      	cmp	r3, #0
 8004950:	db7b      	blt.n	8004a4a <UART_SetConfig+0xaba>
 8004952:	2b20      	cmp	r3, #32
 8004954:	d879      	bhi.n	8004a4a <UART_SetConfig+0xaba>
 8004956:	a201      	add	r2, pc, #4	; (adr r2, 800495c <UART_SetConfig+0x9cc>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	080049e7 	.word	0x080049e7
 8004960:	080049ef 	.word	0x080049ef
 8004964:	08004a4b 	.word	0x08004a4b
 8004968:	08004a4b 	.word	0x08004a4b
 800496c:	080049f7 	.word	0x080049f7
 8004970:	08004a4b 	.word	0x08004a4b
 8004974:	08004a4b 	.word	0x08004a4b
 8004978:	08004a4b 	.word	0x08004a4b
 800497c:	08004a07 	.word	0x08004a07
 8004980:	08004a4b 	.word	0x08004a4b
 8004984:	08004a4b 	.word	0x08004a4b
 8004988:	08004a4b 	.word	0x08004a4b
 800498c:	08004a4b 	.word	0x08004a4b
 8004990:	08004a4b 	.word	0x08004a4b
 8004994:	08004a4b 	.word	0x08004a4b
 8004998:	08004a4b 	.word	0x08004a4b
 800499c:	08004a17 	.word	0x08004a17
 80049a0:	08004a4b 	.word	0x08004a4b
 80049a4:	08004a4b 	.word	0x08004a4b
 80049a8:	08004a4b 	.word	0x08004a4b
 80049ac:	08004a4b 	.word	0x08004a4b
 80049b0:	08004a4b 	.word	0x08004a4b
 80049b4:	08004a4b 	.word	0x08004a4b
 80049b8:	08004a4b 	.word	0x08004a4b
 80049bc:	08004a4b 	.word	0x08004a4b
 80049c0:	08004a4b 	.word	0x08004a4b
 80049c4:	08004a4b 	.word	0x08004a4b
 80049c8:	08004a4b 	.word	0x08004a4b
 80049cc:	08004a4b 	.word	0x08004a4b
 80049d0:	08004a4b 	.word	0x08004a4b
 80049d4:	08004a4b 	.word	0x08004a4b
 80049d8:	08004a4b 	.word	0x08004a4b
 80049dc:	08004a3d 	.word	0x08004a3d
 80049e0:	2b40      	cmp	r3, #64	; 0x40
 80049e2:	d02e      	beq.n	8004a42 <UART_SetConfig+0xab2>
 80049e4:	e031      	b.n	8004a4a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e6:	f7fd fc77 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 80049ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049ec:	e033      	b.n	8004a56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049ee:	f7fd fc89 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 80049f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049f4:	e02f      	b.n	8004a56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fe6c 	bl	80036d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a04:	e027      	b.n	8004a56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a06:	f107 0318 	add.w	r3, r7, #24
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe ffb8 	bl	8003980 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a14:	e01f      	b.n	8004a56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a16:	4b69      	ldr	r3, [pc, #420]	; (8004bbc <UART_SetConfig+0xc2c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a22:	4b66      	ldr	r3, [pc, #408]	; (8004bbc <UART_SetConfig+0xc2c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	08db      	lsrs	r3, r3, #3
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	4a64      	ldr	r2, [pc, #400]	; (8004bc0 <UART_SetConfig+0xc30>)
 8004a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a34:	e00f      	b.n	8004a56 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004a36:	4b62      	ldr	r3, [pc, #392]	; (8004bc0 <UART_SetConfig+0xc30>)
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a3a:	e00c      	b.n	8004a56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a3c:	4b61      	ldr	r3, [pc, #388]	; (8004bc4 <UART_SetConfig+0xc34>)
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a40:	e009      	b.n	8004a56 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a48:	e005      	b.n	8004a56 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004a54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80ea 	beq.w	8004c32 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	4a55      	ldr	r2, [pc, #340]	; (8004bb8 <UART_SetConfig+0xc28>)
 8004a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a70:	005a      	lsls	r2, r3, #1
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	085b      	lsrs	r3, r3, #1
 8004a78:	441a      	add	r2, r3
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	d916      	bls.n	8004ab8 <UART_SetConfig+0xb28>
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a90:	d212      	bcs.n	8004ab8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f023 030f 	bic.w	r3, r3, #15
 8004a9a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004ab4:	60da      	str	r2, [r3, #12]
 8004ab6:	e0bc      	b.n	8004c32 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004abe:	e0b8      	b.n	8004c32 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ac0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	dc4b      	bgt.n	8004b60 <UART_SetConfig+0xbd0>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f2c0 8087 	blt.w	8004bdc <UART_SetConfig+0xc4c>
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	f200 8084 	bhi.w	8004bdc <UART_SetConfig+0xc4c>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0xb4c>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b67 	.word	0x08004b67
 8004ae0:	08004b6f 	.word	0x08004b6f
 8004ae4:	08004bdd 	.word	0x08004bdd
 8004ae8:	08004bdd 	.word	0x08004bdd
 8004aec:	08004b77 	.word	0x08004b77
 8004af0:	08004bdd 	.word	0x08004bdd
 8004af4:	08004bdd 	.word	0x08004bdd
 8004af8:	08004bdd 	.word	0x08004bdd
 8004afc:	08004b87 	.word	0x08004b87
 8004b00:	08004bdd 	.word	0x08004bdd
 8004b04:	08004bdd 	.word	0x08004bdd
 8004b08:	08004bdd 	.word	0x08004bdd
 8004b0c:	08004bdd 	.word	0x08004bdd
 8004b10:	08004bdd 	.word	0x08004bdd
 8004b14:	08004bdd 	.word	0x08004bdd
 8004b18:	08004bdd 	.word	0x08004bdd
 8004b1c:	08004b97 	.word	0x08004b97
 8004b20:	08004bdd 	.word	0x08004bdd
 8004b24:	08004bdd 	.word	0x08004bdd
 8004b28:	08004bdd 	.word	0x08004bdd
 8004b2c:	08004bdd 	.word	0x08004bdd
 8004b30:	08004bdd 	.word	0x08004bdd
 8004b34:	08004bdd 	.word	0x08004bdd
 8004b38:	08004bdd 	.word	0x08004bdd
 8004b3c:	08004bdd 	.word	0x08004bdd
 8004b40:	08004bdd 	.word	0x08004bdd
 8004b44:	08004bdd 	.word	0x08004bdd
 8004b48:	08004bdd 	.word	0x08004bdd
 8004b4c:	08004bdd 	.word	0x08004bdd
 8004b50:	08004bdd 	.word	0x08004bdd
 8004b54:	08004bdd 	.word	0x08004bdd
 8004b58:	08004bdd 	.word	0x08004bdd
 8004b5c:	08004bcf 	.word	0x08004bcf
 8004b60:	2b40      	cmp	r3, #64	; 0x40
 8004b62:	d037      	beq.n	8004bd4 <UART_SetConfig+0xc44>
 8004b64:	e03a      	b.n	8004bdc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b66:	f7fd fbb7 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8004b6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b6c:	e03c      	b.n	8004be8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b6e:	f7fd fbc9 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8004b72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b74:	e038      	b.n	8004be8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe fdac 	bl	80036d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b84:	e030      	b.n	8004be8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b86:	f107 0318 	add.w	r3, r7, #24
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe fef8 	bl	8003980 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b94:	e028      	b.n	8004be8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <UART_SetConfig+0xc2c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d012      	beq.n	8004bc8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <UART_SetConfig+0xc2c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	08db      	lsrs	r3, r3, #3
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <UART_SetConfig+0xc30>)
 8004bae:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bb4:	e018      	b.n	8004be8 <UART_SetConfig+0xc58>
 8004bb6:	bf00      	nop
 8004bb8:	08005324 	.word	0x08005324
 8004bbc:	58024400 	.word	0x58024400
 8004bc0:	03d09000 	.word	0x03d09000
 8004bc4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004bc8:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <UART_SetConfig+0xccc>)
 8004bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bcc:	e00c      	b.n	8004be8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bce:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <UART_SetConfig+0xcd0>)
 8004bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bd2:	e009      	b.n	8004be8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bda:	e005      	b.n	8004be8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004be6:	bf00      	nop
    }

    if (pclk != 0U)
 8004be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d021      	beq.n	8004c32 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <UART_SetConfig+0xcd4>)
 8004bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfc:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	441a      	add	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c10:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	2b0f      	cmp	r3, #15
 8004c16:	d909      	bls.n	8004c2c <UART_SetConfig+0xc9c>
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1e:	d205      	bcs.n	8004c2c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60da      	str	r2, [r3, #12]
 8004c2a:	e002      	b.n	8004c32 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2200      	movs	r2, #0
 8004c46:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c4e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3748      	adds	r7, #72	; 0x48
 8004c56:	46bd      	mov	sp, r7
 8004c58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c5c:	03d09000 	.word	0x03d09000
 8004c60:	003d0900 	.word	0x003d0900
 8004c64:	08005324 	.word	0x08005324

08004c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01a      	beq.n	8004d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d66:	d10a      	bne.n	8004d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b098      	sub	sp, #96	; 0x60
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dbc:	f7fb ffe6 	bl	8000d8c <HAL_GetTick>
 8004dc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d12f      	bne.n	8004e30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f88e 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d022      	beq.n	8004e30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e08:	647b      	str	r3, [r7, #68]	; 0x44
 8004e0a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e6      	bne.n	8004dea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e063      	b.n	8004ef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d149      	bne.n	8004ed2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e46:	2200      	movs	r2, #0
 8004e48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f857 	bl	8004f00 <UART_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d03c      	beq.n	8004ed2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	623b      	str	r3, [r7, #32]
   return(result);
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e76:	633b      	str	r3, [r7, #48]	; 0x30
 8004e78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e6      	bne.n	8004e58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3308      	adds	r3, #8
 8004e90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eaa:	61fa      	str	r2, [r7, #28]
 8004eac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	69b9      	ldr	r1, [r7, #24]
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e012      	b.n	8004ef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3758      	adds	r7, #88	; 0x58
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f10:	e049      	b.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d045      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1a:	f7fb ff37 	bl	8000d8c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e048      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d031      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d110      	bne.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2208      	movs	r2, #8
 8004f56:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f839 	bl	8004fd0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2208      	movs	r2, #8
 8004f62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e029      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f80:	d111      	bne.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f81f 	bl	8004fd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e00f      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d0a6      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b095      	sub	sp, #84	; 0x54
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ffc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e6      	bne.n	8004fd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3308      	adds	r3, #8
 8005010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	61fb      	str	r3, [r7, #28]
   return(result);
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	4b1e      	ldr	r3, [pc, #120]	; (8005098 <UART_EndRxTransfer+0xc8>)
 800501e:	4013      	ands	r3, r2
 8005020:	64bb      	str	r3, [r7, #72]	; 0x48
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3308      	adds	r3, #8
 8005028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800502a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e5      	bne.n	800500a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d118      	bne.n	8005078 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	60bb      	str	r3, [r7, #8]
   return(result);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f023 0310 	bic.w	r3, r3, #16
 800505a:	647b      	str	r3, [r7, #68]	; 0x44
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6979      	ldr	r1, [r7, #20]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	613b      	str	r3, [r7, #16]
   return(result);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800508c:	bf00      	nop
 800508e:	3754      	adds	r7, #84	; 0x54
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	effffffe 	.word	0xeffffffe

0800509c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e027      	b.n	8005102 <HAL_UARTEx_DisableFifoMode+0x66>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2224      	movs	r2, #36	; 0x24
 80050be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005122:	2302      	movs	r3, #2
 8005124:	e02d      	b.n	8005182 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2224      	movs	r2, #36	; 0x24
 8005132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f850 	bl	8005208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800519e:	2302      	movs	r3, #2
 80051a0:	e02d      	b.n	80051fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2224      	movs	r2, #36	; 0x24
 80051ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f812 	bl	8005208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005214:	2b00      	cmp	r3, #0
 8005216:	d108      	bne.n	800522a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005228:	e031      	b.n	800528e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800522a:	2310      	movs	r3, #16
 800522c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800522e:	2310      	movs	r3, #16
 8005230:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	0e5b      	lsrs	r3, r3, #25
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	0f5b      	lsrs	r3, r3, #29
 800524a:	b2db      	uxtb	r3, r3
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005252:	7bbb      	ldrb	r3, [r7, #14]
 8005254:	7b3a      	ldrb	r2, [r7, #12]
 8005256:	4911      	ldr	r1, [pc, #68]	; (800529c <UARTEx_SetNbDataToProcess+0x94>)
 8005258:	5c8a      	ldrb	r2, [r1, r2]
 800525a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800525e:	7b3a      	ldrb	r2, [r7, #12]
 8005260:	490f      	ldr	r1, [pc, #60]	; (80052a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005262:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005264:	fb93 f3f2 	sdiv	r3, r3, r2
 8005268:	b29a      	uxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	7b7a      	ldrb	r2, [r7, #13]
 8005274:	4909      	ldr	r1, [pc, #36]	; (800529c <UARTEx_SetNbDataToProcess+0x94>)
 8005276:	5c8a      	ldrb	r2, [r1, r2]
 8005278:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800527c:	7b7a      	ldrb	r2, [r7, #13]
 800527e:	4908      	ldr	r1, [pc, #32]	; (80052a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005280:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005282:	fb93 f3f2 	sdiv	r3, r3, r2
 8005286:	b29a      	uxth	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	0800533c 	.word	0x0800533c
 80052a0:	08005344 	.word	0x08005344

080052a4 <__libc_init_array>:
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	4d0d      	ldr	r5, [pc, #52]	; (80052dc <__libc_init_array+0x38>)
 80052a8:	4c0d      	ldr	r4, [pc, #52]	; (80052e0 <__libc_init_array+0x3c>)
 80052aa:	1b64      	subs	r4, r4, r5
 80052ac:	10a4      	asrs	r4, r4, #2
 80052ae:	2600      	movs	r6, #0
 80052b0:	42a6      	cmp	r6, r4
 80052b2:	d109      	bne.n	80052c8 <__libc_init_array+0x24>
 80052b4:	4d0b      	ldr	r5, [pc, #44]	; (80052e4 <__libc_init_array+0x40>)
 80052b6:	4c0c      	ldr	r4, [pc, #48]	; (80052e8 <__libc_init_array+0x44>)
 80052b8:	f000 f820 	bl	80052fc <_init>
 80052bc:	1b64      	subs	r4, r4, r5
 80052be:	10a4      	asrs	r4, r4, #2
 80052c0:	2600      	movs	r6, #0
 80052c2:	42a6      	cmp	r6, r4
 80052c4:	d105      	bne.n	80052d2 <__libc_init_array+0x2e>
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052cc:	4798      	blx	r3
 80052ce:	3601      	adds	r6, #1
 80052d0:	e7ee      	b.n	80052b0 <__libc_init_array+0xc>
 80052d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d6:	4798      	blx	r3
 80052d8:	3601      	adds	r6, #1
 80052da:	e7f2      	b.n	80052c2 <__libc_init_array+0x1e>
 80052dc:	08005354 	.word	0x08005354
 80052e0:	08005354 	.word	0x08005354
 80052e4:	08005354 	.word	0x08005354
 80052e8:	08005358 	.word	0x08005358

080052ec <memset>:
 80052ec:	4402      	add	r2, r0
 80052ee:	4603      	mov	r3, r0
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d100      	bne.n	80052f6 <memset+0xa>
 80052f4:	4770      	bx	lr
 80052f6:	f803 1b01 	strb.w	r1, [r3], #1
 80052fa:	e7f9      	b.n	80052f0 <memset+0x4>

080052fc <_init>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr

08005308 <_fini>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	bf00      	nop
 800530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530e:	bc08      	pop	{r3}
 8005310:	469e      	mov	lr, r3
 8005312:	4770      	bx	lr
