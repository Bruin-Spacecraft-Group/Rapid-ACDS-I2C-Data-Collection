
debug test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050dc  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080053d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  080053e0  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  080053e0  000200c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f2ef  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001bcd  00000000  00000000  0002f32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a30  00000000  00000000  00030f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000998  00000000  00000000  00031930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002e9d2  00000000  00000000  000322c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000db97  00000000  00000000  00060c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00131e68  00000000  00000000  0006e831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a0699  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000029a0  00000000  00000000  001a06ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005370 	.word	0x08005370

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005370 	.word	0x08005370

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fb5a 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f81e 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f8e6 	bl	80007cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f890 	bl	8000724 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000604:	f000 f8da 	bl	80007bc <MX_USB_OTG_HS_USB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(3000);
 8000608:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800060c:	f000 fbe0 	bl	8000dd0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <main+0x44>)
 8000618:	f000 fe92 	bl	8001340 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 800061c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000620:	f000 fbd6 	bl	8000dd0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062a:	4802      	ldr	r0, [pc, #8]	; (8000634 <main+0x44>)
 800062c:	f000 fe88 	bl	8001340 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 8000630:	e7ea      	b.n	8000608 <main+0x18>
 8000632:	bf00      	nop
 8000634:	58020400 	.word	0x58020400

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b09c      	sub	sp, #112	; 0x70
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000642:	224c      	movs	r2, #76	; 0x4c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fe8a 	bl	8005360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2220      	movs	r2, #32
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fe84 	bl	8005360 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <SystemClock_Config+0xe4>)
 800065a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800065e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000662:	2004      	movs	r0, #4
 8000664:	f000 fe86 	bl	8001374 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <SystemClock_Config+0xe8>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a2b      	ldr	r2, [pc, #172]	; (8000720 <SystemClock_Config+0xe8>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <SystemClock_Config+0xe8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000684:	bf00      	nop
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <SystemClock_Config+0xe8>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800068e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000692:	d1f8      	bne.n	8000686 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000694:	2321      	movs	r3, #33	; 0x21
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000698:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006ae:	2318      	movs	r3, #24
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b6:	2304      	movs	r3, #4
 80006b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006be:	230c      	movs	r3, #12
 80006c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 feaa 	bl	8001428 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006da:	f000 f991 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	233f      	movs	r3, #63	; 0x3f
 80006e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2303      	movs	r3, #3
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fac2 	bl	8001c8c <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800070e:	f000 f977 	bl	8000a00 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3770      	adds	r7, #112	; 0x70
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58024400 	.word	0x58024400
 8000720:	58024800 	.word	0x58024800

08000724 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800072a:	4a23      	ldr	r2, [pc, #140]	; (80007b8 <MX_USART3_UART_Init+0x94>)
 800072c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800076e:	f003 fbf9 	bl	8003f64 <HAL_UART_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000778:	f000 f942 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000780:	f004 fcff 	bl	8005182 <HAL_UARTEx_SetTxFifoThreshold>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800078a:	f000 f939 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000792:	f004 fd34 	bl	80051fe <HAL_UARTEx_SetRxFifoThreshold>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800079c:	f000 f930 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 80007a2:	f004 fcb5 	bl	8005110 <HAL_UARTEx_DisableFifoMode>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007ac:	f000 f928 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2400002c 	.word	0x2400002c
 80007b8:	40004800 	.word	0x40004800

080007bc <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08e      	sub	sp, #56	; 0x38
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b80      	ldr	r3, [pc, #512]	; (80009e4 <MX_GPIO_Init+0x218>)
 80007e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e8:	4a7e      	ldr	r2, [pc, #504]	; (80009e4 <MX_GPIO_Init+0x218>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007f2:	4b7c      	ldr	r3, [pc, #496]	; (80009e4 <MX_GPIO_Init+0x218>)
 80007f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	623b      	str	r3, [r7, #32]
 80007fe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000800:	4b78      	ldr	r3, [pc, #480]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000806:	4a77      	ldr	r2, [pc, #476]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000810:	4b74      	ldr	r3, [pc, #464]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000816:	f003 0320 	and.w	r3, r3, #32
 800081a:	61fb      	str	r3, [r7, #28]
 800081c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b71      	ldr	r3, [pc, #452]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000824:	4a6f      	ldr	r2, [pc, #444]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800082e:	4b6d      	ldr	r3, [pc, #436]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	4b69      	ldr	r3, [pc, #420]	; (80009e4 <MX_GPIO_Init+0x218>)
 800083e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000842:	4a68      	ldr	r2, [pc, #416]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084c:	4b65      	ldr	r3, [pc, #404]	; (80009e4 <MX_GPIO_Init+0x218>)
 800084e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <MX_GPIO_Init+0x218>)
 800085c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000860:	4a60      	ldr	r2, [pc, #384]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000862:	f043 0308 	orr.w	r3, r3, #8
 8000866:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800086a:	4b5e      	ldr	r3, [pc, #376]	; (80009e4 <MX_GPIO_Init+0x218>)
 800086c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000870:	f003 0308 	and.w	r3, r3, #8
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000878:	4b5a      	ldr	r3, [pc, #360]	; (80009e4 <MX_GPIO_Init+0x218>)
 800087a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087e:	4a59      	ldr	r2, [pc, #356]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000884:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000888:	4b56      	ldr	r3, [pc, #344]	; (80009e4 <MX_GPIO_Init+0x218>)
 800088a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b53      	ldr	r3, [pc, #332]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000898:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089c:	4a51      	ldr	r2, [pc, #324]	; (80009e4 <MX_GPIO_Init+0x218>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a6:	4b4f      	ldr	r3, [pc, #316]	; (80009e4 <MX_GPIO_Init+0x218>)
 80008a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b4:	4b4b      	ldr	r3, [pc, #300]	; (80009e4 <MX_GPIO_Init+0x218>)
 80008b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ba:	4a4a      	ldr	r2, [pc, #296]	; (80009e4 <MX_GPIO_Init+0x218>)
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008c4:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <MX_GPIO_Init+0x218>)
 80008c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d8:	4843      	ldr	r0, [pc, #268]	; (80009e8 <MX_GPIO_Init+0x21c>)
 80008da:	f000 fd31 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f244 1101 	movw	r1, #16641	; 0x4101
 80008e4:	4841      	ldr	r0, [pc, #260]	; (80009ec <MX_GPIO_Init+0x220>)
 80008e6:	f000 fd2b 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2102      	movs	r1, #2
 80008ee:	4840      	ldr	r0, [pc, #256]	; (80009f0 <MX_GPIO_Init+0x224>)
 80008f0:	f000 fd26 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	483a      	ldr	r0, [pc, #232]	; (80009f4 <MX_GPIO_Init+0x228>)
 800090a:	f000 fb69 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800090e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	4830      	ldr	r0, [pc, #192]	; (80009e8 <MX_GPIO_Init+0x21c>)
 8000928:	f000 fb5a 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB8 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_8;
 800092c:	f244 1301 	movw	r3, #16641	; 0x4101
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	4619      	mov	r1, r3
 8000944:	4829      	ldr	r0, [pc, #164]	; (80009ec <MX_GPIO_Init+0x220>)
 8000946:	f000 fb4b 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	4826      	ldr	r0, [pc, #152]	; (80009f8 <MX_GPIO_Init+0x22c>)
 8000960:	f000 fb3e 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	4820      	ldr	r0, [pc, #128]	; (80009fc <MX_GPIO_Init+0x230>)
 800097a:	f000 fb31 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000990:	230a      	movs	r3, #10
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000998:	4619      	mov	r1, r3
 800099a:	4818      	ldr	r0, [pc, #96]	; (80009fc <MX_GPIO_Init+0x230>)
 800099c:	f000 fb20 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4810      	ldr	r0, [pc, #64]	; (80009fc <MX_GPIO_Init+0x230>)
 80009ba:	f000 fb11 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009be:	2302      	movs	r3, #2
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_GPIO_Init+0x224>)
 80009d6:	f000 fb03 	bl	8000fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	3738      	adds	r7, #56	; 0x38
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	58024400 	.word	0x58024400
 80009e8:	58021400 	.word	0x58021400
 80009ec:	58020400 	.word	0x58020400
 80009f0:	58021000 	.word	0x58021000
 80009f4:	58020800 	.word	0x58020800
 80009f8:	58021800 	.word	0x58021800
 80009fc:	58020000 	.word	0x58020000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_MspInit+0x30>)
 8000a14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a18:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_MspInit+0x30>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_MspInit+0x30>)
 8000a24:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	58024400 	.word	0x58024400

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0ba      	sub	sp, #232	; 0xe8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	22c0      	movs	r2, #192	; 0xc0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 fc7d 	bl	8005360 <memset>
  if(huart->Instance==USART3)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <HAL_UART_MspInit+0xc8>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d146      	bne.n	8000afe <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a70:	f04f 0202 	mov.w	r2, #2
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fc8c 	bl	80023a4 <HAL_RCCEx_PeriphCLKConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a92:	f7ff ffb5 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <HAL_UART_MspInit+0xcc>)
 8000a98:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <HAL_UART_MspInit+0xcc>)
 8000a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_UART_MspInit+0xcc>)
 8000aa8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_UART_MspInit+0xcc>)
 8000ab6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_UART_MspInit+0xcc>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_UART_MspInit+0xcc>)
 8000ac6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ad2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aec:	2307      	movs	r3, #7
 8000aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <HAL_UART_MspInit+0xd0>)
 8000afa:	f000 fa71 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	37e8      	adds	r7, #232	; 0xe8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40004800 	.word	0x40004800
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	58020c00 	.word	0x58020c00

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f916 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <SystemInit+0xd0>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <SystemInit+0xd0>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <SystemInit+0xd4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d807      	bhi.n	8000b98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b88:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <SystemInit+0xd4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f023 030f 	bic.w	r3, r3, #15
 8000b90:	4a2a      	ldr	r2, [pc, #168]	; (8000c3c <SystemInit+0xd4>)
 8000b92:	f043 0303 	orr.w	r3, r3, #3
 8000b96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <SystemInit+0xd8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a28      	ldr	r2, [pc, #160]	; (8000c40 <SystemInit+0xd8>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <SystemInit+0xd8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <SystemInit+0xd8>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4924      	ldr	r1, [pc, #144]	; (8000c40 <SystemInit+0xd8>)
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <SystemInit+0xdc>)
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <SystemInit+0xd4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 030c 	and.w	r3, r3, #12
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <SystemInit+0xd4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f023 030f 	bic.w	r3, r3, #15
 8000bca:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <SystemInit+0xd4>)
 8000bcc:	f043 0303 	orr.w	r3, r3, #3
 8000bd0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <SystemInit+0xd8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <SystemInit+0xd8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <SystemInit+0xd8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <SystemInit+0xd8>)
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <SystemInit+0xe0>)
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <SystemInit+0xd8>)
 8000bec:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <SystemInit+0xe4>)
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <SystemInit+0xd8>)
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <SystemInit+0xe8>)
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <SystemInit+0xd8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <SystemInit+0xd8>)
 8000bfe:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <SystemInit+0xe8>)
 8000c00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <SystemInit+0xd8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <SystemInit+0xd8>)
 8000c0a:	4a11      	ldr	r2, [pc, #68]	; (8000c50 <SystemInit+0xe8>)
 8000c0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <SystemInit+0xd8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <SystemInit+0xd8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <SystemInit+0xd8>)
 8000c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <SystemInit+0xd8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <SystemInit+0xec>)
 8000c28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00
 8000c3c:	52002000 	.word	0x52002000
 8000c40:	58024400 	.word	0x58024400
 8000c44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c48:	02020200 	.word	0x02020200
 8000c4c:	01ff0000 	.word	0x01ff0000
 8000c50:	01010280 	.word	0x01010280
 8000c54:	52004000 	.word	0x52004000

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c5c:	f7ff ff84 	bl	8000b68 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f004 fb47 	bl	8005318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fcb1 	bl	80005f0 <main>
  bx  lr
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c98:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c9c:	080053d0 	.word	0x080053d0
  ldr r2, =_sbss
 8000ca0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ca4:	240000c4 	.word	0x240000c4

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f000 f962 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000cb8:	f001 f99e 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_Init+0x68>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	f003 030f 	and.w	r3, r3, #15
 8000cc8:	4913      	ldr	r1, [pc, #76]	; (8000d18 <HAL_Init+0x6c>)
 8000cca:	5ccb      	ldrb	r3, [r1, r3]
 8000ccc:	f003 031f 	and.w	r3, r3, #31
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_Init+0x68>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <HAL_Init+0x6c>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cec:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <HAL_Init+0x70>)
 8000cee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_Init+0x74>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f814 	bl	8000d24 <HAL_InitTick>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e002      	b.n	8000d0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d06:	f7ff fe81 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	58024400 	.word	0x58024400
 8000d18:	08005388 	.word	0x08005388
 8000d1c:	24000004 	.word	0x24000004
 8000d20:	24000000 	.word	0x24000000

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_InitTick+0x60>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e021      	b.n	8000d7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <HAL_InitTick+0x64>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_InitTick+0x60>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f939 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d6c:	f000 f911 	bl	8000f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_InitTick+0x68>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2400000c 	.word	0x2400000c
 8000d88:	24000000 	.word	0x24000000
 8000d8c:	24000008 	.word	0x24000008

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2400000c 	.word	0x2400000c
 8000db4:	240000c0 	.word	0x240000c0

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	240000c0 	.word	0x240000c0

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff ffee 	bl	8000db8 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_Delay+0x44>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffde 	bl	8000db8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2400000c 	.word	0x2400000c

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <__NVIC_SetPriorityGrouping+0x40>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x40>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00
 8000e5c:	05fa0000 	.word	0x05fa0000

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00f      	b.n	8000f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <SysTick_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f56:	210f      	movs	r1, #15
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f5c:	f7ff ff8e 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x40>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff47 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa0:	f7ff ff5e 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f7ff ff90 	bl	8000ed0 <NVIC_EncodePriority>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff5f 	bl	8000e7c <__NVIC_SetPriority>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffb2 	bl	8000f38 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fee:	4b89      	ldr	r3, [pc, #548]	; (8001214 <HAL_GPIO_Init+0x234>)
 8000ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ff2:	e194      	b.n	800131e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8186 	beq.w	8001318 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d005      	beq.n	8001024 <HAL_GPIO_Init+0x44>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d130      	bne.n	8001086 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105a:	2201      	movs	r2, #1
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	f003 0201 	and.w	r2, r3, #1
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b03      	cmp	r3, #3
 8001090:	d017      	beq.n	80010c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d123      	bne.n	8001116 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	691a      	ldr	r2, [r3, #16]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	69b9      	ldr	r1, [r7, #24]
 8001112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0203 	and.w	r2, r3, #3
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 80e0 	beq.w	8001318 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <HAL_GPIO_Init+0x238>)
 800115a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800115e:	4a2e      	ldr	r2, [pc, #184]	; (8001218 <HAL_GPIO_Init+0x238>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <HAL_GPIO_Init+0x238>)
 800116a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001176:	4a29      	ldr	r2, [pc, #164]	; (800121c <HAL_GPIO_Init+0x23c>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a20      	ldr	r2, [pc, #128]	; (8001220 <HAL_GPIO_Init+0x240>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d052      	beq.n	8001248 <HAL_GPIO_Init+0x268>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <HAL_GPIO_Init+0x244>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d031      	beq.n	800120e <HAL_GPIO_Init+0x22e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <HAL_GPIO_Init+0x248>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d02b      	beq.n	800120a <HAL_GPIO_Init+0x22a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_GPIO_Init+0x24c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d025      	beq.n	8001206 <HAL_GPIO_Init+0x226>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <HAL_GPIO_Init+0x250>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01f      	beq.n	8001202 <HAL_GPIO_Init+0x222>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <HAL_GPIO_Init+0x254>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x21e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <HAL_GPIO_Init+0x258>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x21a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <HAL_GPIO_Init+0x25c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x216>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_GPIO_Init+0x260>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x212>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_GPIO_Init+0x264>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x20e>
 80011ea:	2309      	movs	r3, #9
 80011ec:	e02d      	b.n	800124a <HAL_GPIO_Init+0x26a>
 80011ee:	230a      	movs	r3, #10
 80011f0:	e02b      	b.n	800124a <HAL_GPIO_Init+0x26a>
 80011f2:	2308      	movs	r3, #8
 80011f4:	e029      	b.n	800124a <HAL_GPIO_Init+0x26a>
 80011f6:	2307      	movs	r3, #7
 80011f8:	e027      	b.n	800124a <HAL_GPIO_Init+0x26a>
 80011fa:	2306      	movs	r3, #6
 80011fc:	e025      	b.n	800124a <HAL_GPIO_Init+0x26a>
 80011fe:	2305      	movs	r3, #5
 8001200:	e023      	b.n	800124a <HAL_GPIO_Init+0x26a>
 8001202:	2304      	movs	r3, #4
 8001204:	e021      	b.n	800124a <HAL_GPIO_Init+0x26a>
 8001206:	2303      	movs	r3, #3
 8001208:	e01f      	b.n	800124a <HAL_GPIO_Init+0x26a>
 800120a:	2302      	movs	r3, #2
 800120c:	e01d      	b.n	800124a <HAL_GPIO_Init+0x26a>
 800120e:	2301      	movs	r3, #1
 8001210:	e01b      	b.n	800124a <HAL_GPIO_Init+0x26a>
 8001212:	bf00      	nop
 8001214:	58000080 	.word	0x58000080
 8001218:	58024400 	.word	0x58024400
 800121c:	58000400 	.word	0x58000400
 8001220:	58020000 	.word	0x58020000
 8001224:	58020400 	.word	0x58020400
 8001228:	58020800 	.word	0x58020800
 800122c:	58020c00 	.word	0x58020c00
 8001230:	58021000 	.word	0x58021000
 8001234:	58021400 	.word	0x58021400
 8001238:	58021800 	.word	0x58021800
 800123c:	58021c00 	.word	0x58021c00
 8001240:	58022000 	.word	0x58022000
 8001244:	58022400 	.word	0x58022400
 8001248:	2300      	movs	r3, #0
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	f002 0203 	and.w	r2, r2, #3
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	4093      	lsls	r3, r2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125a:	4938      	ldr	r1, [pc, #224]	; (800133c <HAL_GPIO_Init+0x35c>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800128e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	3301      	adds	r3, #1
 800131c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	f47f ae63 	bne.w	8000ff4 <HAL_GPIO_Init+0x14>
  }
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	3724      	adds	r7, #36	; 0x24
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	58000400 	.word	0x58000400

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800137c:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_PWREx_ConfigSupply+0xb0>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	2b06      	cmp	r3, #6
 8001386:	d00a      	beq.n	800139e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <HAL_PWREx_ConfigSupply+0xb0>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	d001      	beq.n	800139a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e040      	b.n	800141c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e03e      	b.n	800141c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <HAL_PWREx_ConfigSupply+0xb0>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80013a6:	491f      	ldr	r1, [pc, #124]	; (8001424 <HAL_PWREx_ConfigSupply+0xb0>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80013ae:	f7ff fd03 	bl	8000db8 <HAL_GetTick>
 80013b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013b4:	e009      	b.n	80013ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013b6:	f7ff fcff 	bl	8000db8 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013c4:	d901      	bls.n	80013ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e028      	b.n	800141c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_PWREx_ConfigSupply+0xb0>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013d6:	d1ee      	bne.n	80013b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b1e      	cmp	r3, #30
 80013dc:	d008      	beq.n	80013f0 <HAL_PWREx_ConfigSupply+0x7c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b2e      	cmp	r3, #46	; 0x2e
 80013e2:	d005      	beq.n	80013f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b1d      	cmp	r3, #29
 80013e8:	d002      	beq.n	80013f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b2d      	cmp	r3, #45	; 0x2d
 80013ee:	d114      	bne.n	800141a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80013f0:	f7ff fce2 	bl	8000db8 <HAL_GetTick>
 80013f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013f6:	e009      	b.n	800140c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013f8:	f7ff fcde 	bl	8000db8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001406:	d901      	bls.n	800140c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e007      	b.n	800141c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_PWREx_ConfigSupply+0xb0>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001418:	d1ee      	bne.n	80013f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	58024800 	.word	0x58024800

08001428 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	; 0x30
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f000 bc1f 	b.w	8001c7a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80b3 	beq.w	80015b0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144a:	4b95      	ldr	r3, [pc, #596]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001454:	4b92      	ldr	r3, [pc, #584]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145c:	2b10      	cmp	r3, #16
 800145e:	d007      	beq.n	8001470 <HAL_RCC_OscConfig+0x48>
 8001460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001462:	2b18      	cmp	r3, #24
 8001464:	d112      	bne.n	800148c <HAL_RCC_OscConfig+0x64>
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d10d      	bne.n	800148c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	4b8b      	ldr	r3, [pc, #556]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 8098 	beq.w	80015ae <HAL_RCC_OscConfig+0x186>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f040 8093 	bne.w	80015ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e3f6      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d106      	bne.n	80014a4 <HAL_RCC_OscConfig+0x7c>
 8001496:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a81      	ldr	r2, [pc, #516]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e058      	b.n	8001556 <HAL_RCC_OscConfig+0x12e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d112      	bne.n	80014d2 <HAL_RCC_OscConfig+0xaa>
 80014ac:	4b7c      	ldr	r3, [pc, #496]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a7b      	ldr	r2, [pc, #492]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b79      	ldr	r3, [pc, #484]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a78      	ldr	r2, [pc, #480]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80014be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a75      	ldr	r2, [pc, #468]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	e041      	b.n	8001556 <HAL_RCC_OscConfig+0x12e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014da:	d112      	bne.n	8001502 <HAL_RCC_OscConfig+0xda>
 80014dc:	4b70      	ldr	r3, [pc, #448]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a6f      	ldr	r2, [pc, #444]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80014e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b6d      	ldr	r3, [pc, #436]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a6c      	ldr	r2, [pc, #432]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80014ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a69      	ldr	r2, [pc, #420]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e029      	b.n	8001556 <HAL_RCC_OscConfig+0x12e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800150a:	d112      	bne.n	8001532 <HAL_RCC_OscConfig+0x10a>
 800150c:	4b64      	ldr	r3, [pc, #400]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a63      	ldr	r2, [pc, #396]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b61      	ldr	r3, [pc, #388]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a60      	ldr	r2, [pc, #384]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 800151e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b5e      	ldr	r3, [pc, #376]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a5d      	ldr	r2, [pc, #372]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 800152a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e011      	b.n	8001556 <HAL_RCC_OscConfig+0x12e>
 8001532:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a5a      	ldr	r2, [pc, #360]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a57      	ldr	r2, [pc, #348]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a54      	ldr	r2, [pc, #336]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001550:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001554:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d013      	beq.n	8001586 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff fc2b 	bl	8000db8 <HAL_GetTick>
 8001562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001566:	f7ff fc27 	bl	8000db8 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b64      	cmp	r3, #100	; 0x64
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e380      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001578:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x13e>
 8001584:	e014      	b.n	80015b0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff fc17 	bl	8000db8 <HAL_GetTick>
 800158a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158e:	f7ff fc13 	bl	8000db8 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b64      	cmp	r3, #100	; 0x64
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e36c      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015a0:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x166>
 80015ac:	e000      	b.n	80015b0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 808c 	beq.w	80016d6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015be:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015c6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015c8:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1bc>
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	2b18      	cmp	r3, #24
 80015d8:	d137      	bne.n	800164a <HAL_RCC_OscConfig+0x222>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d132      	bne.n	800164a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e4:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x1d4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e33e      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 0219 	bic.w	r2, r3, #25
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4925      	ldr	r1, [pc, #148]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff fbd3 	bl	8000db8 <HAL_GetTick>
 8001612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001616:	f7ff fbcf 	bl	8000db8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e328      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	061b      	lsls	r3, r3, #24
 8001642:	4917      	ldr	r1, [pc, #92]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001648:	e045      	b.n	80016d6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d028      	beq.n	80016a4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 0219 	bic.w	r2, r3, #25
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	4910      	ldr	r1, [pc, #64]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fba8 	bl	8000db8 <HAL_GetTick>
 8001668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166c:	f7ff fba4 	bl	8000db8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e2fd      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	061b      	lsls	r3, r3, #24
 8001698:	4901      	ldr	r1, [pc, #4]	; (80016a0 <HAL_RCC_OscConfig+0x278>)
 800169a:	4313      	orrs	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
 800169e:	e01a      	b.n	80016d6 <HAL_RCC_OscConfig+0x2ae>
 80016a0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a4:	4b97      	ldr	r3, [pc, #604]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a96      	ldr	r2, [pc, #600]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb82 	bl	8000db8 <HAL_GetTick>
 80016b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff fb7e 	bl	8000db8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e2d7      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016ca:	4b8e      	ldr	r3, [pc, #568]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d06a      	beq.n	80017b8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e2:	4b88      	ldr	r3, [pc, #544]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016ec:	4b85      	ldr	r3, [pc, #532]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d007      	beq.n	8001708 <HAL_RCC_OscConfig+0x2e0>
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b18      	cmp	r3, #24
 80016fc:	d11b      	bne.n	8001736 <HAL_RCC_OscConfig+0x30e>
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d116      	bne.n	8001736 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001708:	4b7e      	ldr	r3, [pc, #504]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_OscConfig+0x2f8>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	2b80      	cmp	r3, #128	; 0x80
 800171a:	d001      	beq.n	8001720 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e2ac      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001720:	4b78      	ldr	r3, [pc, #480]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	4975      	ldr	r1, [pc, #468]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001730:	4313      	orrs	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001734:	e040      	b.n	80017b8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d023      	beq.n	8001786 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800173e:	4b71      	ldr	r3, [pc, #452]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a70      	ldr	r2, [pc, #448]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fb35 	bl	8000db8 <HAL_GetTick>
 800174e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001752:	f7ff fb31 	bl	8000db8 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e28a      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001764:	4b67      	ldr	r3, [pc, #412]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001770:	4b64      	ldr	r3, [pc, #400]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	061b      	lsls	r3, r3, #24
 800177e:	4961      	ldr	r1, [pc, #388]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001780:	4313      	orrs	r3, r2
 8001782:	60cb      	str	r3, [r1, #12]
 8001784:	e018      	b.n	80017b8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001786:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5e      	ldr	r2, [pc, #376]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 800178c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff fb11 	bl	8000db8 <HAL_GetTick>
 8001796:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800179a:	f7ff fb0d 	bl	8000db8 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e266      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017ac:	4b55      	ldr	r3, [pc, #340]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d036      	beq.n	8001832 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d019      	beq.n	8001800 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017cc:	4b4d      	ldr	r3, [pc, #308]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80017ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d0:	4a4c      	ldr	r2, [pc, #304]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff faee 	bl	8000db8 <HAL_GetTick>
 80017dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff faea 	bl	8000db8 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e243      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80017f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3b8>
 80017fe:	e018      	b.n	8001832 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001800:	4b40      	ldr	r3, [pc, #256]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001804:	4a3f      	ldr	r2, [pc, #252]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fad4 	bl	8000db8 <HAL_GetTick>
 8001810:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fad0 	bl	8000db8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e229      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001826:	4b37      	ldr	r3, [pc, #220]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0320 	and.w	r3, r3, #32
 800183a:	2b00      	cmp	r3, #0
 800183c:	d036      	beq.n	80018ac <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d019      	beq.n	800187a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a2e      	ldr	r2, [pc, #184]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 800184c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001850:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001852:	f7ff fab1 	bl	8000db8 <HAL_GetTick>
 8001856:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185a:	f7ff faad 	bl	8000db8 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e206      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x432>
 8001878:	e018      	b.n	80018ac <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a21      	ldr	r2, [pc, #132]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 8001880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001884:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001886:	f7ff fa97 	bl	8000db8 <HAL_GetTick>
 800188a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800188e:	f7ff fa93 	bl	8000db8 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e1ec      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80af 	beq.w	8001a18 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_RCC_OscConfig+0x4e0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <HAL_RCC_OscConfig+0x4e0>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018c6:	f7ff fa77 	bl	8000db8 <HAL_GetTick>
 80018ca:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ce:	f7ff fa73 	bl	8000db8 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b64      	cmp	r3, #100	; 0x64
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1cc      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_OscConfig+0x4e0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d10b      	bne.n	800190c <HAL_RCC_OscConfig+0x4e4>
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a02      	ldr	r2, [pc, #8]	; (8001904 <HAL_RCC_OscConfig+0x4dc>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001900:	e05b      	b.n	80019ba <HAL_RCC_OscConfig+0x592>
 8001902:	bf00      	nop
 8001904:	58024400 	.word	0x58024400
 8001908:	58024800 	.word	0x58024800
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d112      	bne.n	800193a <HAL_RCC_OscConfig+0x512>
 8001914:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001918:	4a9c      	ldr	r2, [pc, #624]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	6713      	str	r3, [r2, #112]	; 0x70
 8001920:	4b9a      	ldr	r3, [pc, #616]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001924:	4a99      	ldr	r2, [pc, #612]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800192a:	6713      	str	r3, [r2, #112]	; 0x70
 800192c:	4b97      	ldr	r3, [pc, #604]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a96      	ldr	r2, [pc, #600]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001932:	f023 0304 	bic.w	r3, r3, #4
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
 8001938:	e03f      	b.n	80019ba <HAL_RCC_OscConfig+0x592>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d112      	bne.n	8001968 <HAL_RCC_OscConfig+0x540>
 8001942:	4b92      	ldr	r3, [pc, #584]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a91      	ldr	r2, [pc, #580]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
 800194e:	4b8f      	ldr	r3, [pc, #572]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	4a8e      	ldr	r2, [pc, #568]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001958:	6713      	str	r3, [r2, #112]	; 0x70
 800195a:	4b8c      	ldr	r3, [pc, #560]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	4a8b      	ldr	r2, [pc, #556]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6713      	str	r3, [r2, #112]	; 0x70
 8001966:	e028      	b.n	80019ba <HAL_RCC_OscConfig+0x592>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b85      	cmp	r3, #133	; 0x85
 800196e:	d112      	bne.n	8001996 <HAL_RCC_OscConfig+0x56e>
 8001970:	4b86      	ldr	r3, [pc, #536]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	4a85      	ldr	r2, [pc, #532]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6713      	str	r3, [r2, #112]	; 0x70
 800197c:	4b83      	ldr	r3, [pc, #524]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a82      	ldr	r2, [pc, #520]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	4b80      	ldr	r3, [pc, #512]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	4a7f      	ldr	r2, [pc, #508]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6713      	str	r3, [r2, #112]	; 0x70
 8001994:	e011      	b.n	80019ba <HAL_RCC_OscConfig+0x592>
 8001996:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a7c      	ldr	r2, [pc, #496]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	4b7a      	ldr	r3, [pc, #488]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	4a79      	ldr	r2, [pc, #484]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	6713      	str	r3, [r2, #112]	; 0x70
 80019ae:	4b77      	ldr	r3, [pc, #476]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 80019b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b2:	4a76      	ldr	r2, [pc, #472]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 80019b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d015      	beq.n	80019ee <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7ff f9f9 	bl	8000db8 <HAL_GetTick>
 80019c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff f9f5 	bl	8000db8 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e14c      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019e0:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ee      	beq.n	80019ca <HAL_RCC_OscConfig+0x5a2>
 80019ec:	e014      	b.n	8001a18 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff f9e3 	bl	8000db8 <HAL_GetTick>
 80019f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7ff f9df 	bl	8000db8 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e136      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a0c:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ee      	bne.n	80019f6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 812b 	beq.w	8001c78 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a22:	4b5a      	ldr	r3, [pc, #360]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a2a:	2b18      	cmp	r3, #24
 8001a2c:	f000 80bb 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	f040 8095 	bne.w	8001b64 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3a:	4b54      	ldr	r3, [pc, #336]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a53      	ldr	r2, [pc, #332]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff f9b7 	bl	8000db8 <HAL_GetTick>
 8001a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff f9b3 	bl	8000db8 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e10c      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a60:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f0      	bne.n	8001a4e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6c:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001a6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a70:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_OscConfig+0x768>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	4942      	ldr	r1, [pc, #264]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	628b      	str	r3, [r1, #40]	; 0x28
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a94:	3b01      	subs	r3, #1
 8001a96:	025b      	lsls	r3, r3, #9
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ab6:	4935      	ldr	r1, [pc, #212]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001abc:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	4a32      	ldr	r2, [pc, #200]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ac8:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001acc:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <HAL_RCC_OscConfig+0x76c>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ad4:	00d2      	lsls	r2, r2, #3
 8001ad6:	492d      	ldr	r1, [pc, #180]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	f023 020c 	bic.w	r2, r3, #12
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	4928      	ldr	r1, [pc, #160]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	f023 0202 	bic.w	r2, r3, #2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4924      	ldr	r1, [pc, #144]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f93c 	bl	8000db8 <HAL_GetTick>
 8001b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff f938 	bl	8000db8 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e091      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x71c>
 8001b62:	e089      	b.n	8001c78 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_RCC_OscConfig+0x764>)
 8001b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff f922 	bl	8000db8 <HAL_GetTick>
 8001b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b76:	e00f      	b.n	8001b98 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b78:	f7ff f91e 	bl	8000db8 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d908      	bls.n	8001b98 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e077      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
 8001b8a:	bf00      	nop
 8001b8c:	58024400 	.word	0x58024400
 8001b90:	fffffc0c 	.word	0xfffffc0c
 8001b94:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b98:	4b3a      	ldr	r3, [pc, #232]	; (8001c84 <HAL_RCC_OscConfig+0x85c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1e9      	bne.n	8001b78 <HAL_RCC_OscConfig+0x750>
 8001ba4:	e068      	b.n	8001c78 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ba6:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <HAL_RCC_OscConfig+0x85c>)
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001bac:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <HAL_RCC_OscConfig+0x85c>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d031      	beq.n	8001c1e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d12a      	bne.n	8001c1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d122      	bne.n	8001c1e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d11a      	bne.n	8001c1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	0a5b      	lsrs	r3, r3, #9
 8001bec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d111      	bne.n	8001c1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d108      	bne.n	8001c1e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	0e1b      	lsrs	r3, r3, #24
 8001c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e02b      	b.n	8001c7a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_RCC_OscConfig+0x85c>)
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c26:	08db      	lsrs	r3, r3, #3
 8001c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c2c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d01f      	beq.n	8001c78 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_OscConfig+0x85c>)
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <HAL_RCC_OscConfig+0x85c>)
 8001c3e:	f023 0301 	bic.w	r3, r3, #1
 8001c42:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c44:	f7ff f8b8 	bl	8000db8 <HAL_GetTick>
 8001c48:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff f8b4 	bl	8000db8 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d0f9      	beq.n	8001c4c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_RCC_OscConfig+0x85c>)
 8001c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_RCC_OscConfig+0x860>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c64:	00d2      	lsls	r2, r2, #3
 8001c66:	4907      	ldr	r1, [pc, #28]	; (8001c84 <HAL_RCC_OscConfig+0x85c>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_OscConfig+0x85c>)
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_RCC_OscConfig+0x85c>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3730      	adds	r7, #48	; 0x30
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	58024400 	.word	0x58024400
 8001c88:	ffff0007 	.word	0xffff0007

08001c8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e19c      	b.n	8001fda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b8a      	ldr	r3, [pc, #552]	; (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d910      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b87      	ldr	r3, [pc, #540]	; (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 020f 	bic.w	r2, r3, #15
 8001cb6:	4985      	ldr	r1, [pc, #532]	; (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b83      	ldr	r3, [pc, #524]	; (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e184      	b.n	8001fda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d010      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	4b7b      	ldr	r3, [pc, #492]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d908      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cec:	4b78      	ldr	r3, [pc, #480]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	4975      	ldr	r1, [pc, #468]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d010      	beq.n	8001d2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	4b70      	ldr	r3, [pc, #448]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d908      	bls.n	8001d2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d1a:	4b6d      	ldr	r3, [pc, #436]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	496a      	ldr	r1, [pc, #424]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d010      	beq.n	8001d5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	4b64      	ldr	r3, [pc, #400]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d908      	bls.n	8001d5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d48:	4b61      	ldr	r3, [pc, #388]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	495e      	ldr	r1, [pc, #376]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d010      	beq.n	8001d88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	4b59      	ldr	r3, [pc, #356]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d908      	bls.n	8001d88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d76:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4953      	ldr	r1, [pc, #332]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d010      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	4b4d      	ldr	r3, [pc, #308]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d908      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f023 020f 	bic.w	r2, r3, #15
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4947      	ldr	r1, [pc, #284]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d055      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001dc2:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	4940      	ldr	r1, [pc, #256]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ddc:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d121      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0f6      	b.n	8001fda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d115      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0ea      	b.n	8001fda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e0c:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0de      	b.n	8001fda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0d6      	b.n	8001fda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e2c:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f023 0207 	bic.w	r2, r3, #7
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	4925      	ldr	r1, [pc, #148]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e3e:	f7fe ffbb 	bl	8000db8 <HAL_GetTick>
 8001e42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e46:	f7fe ffb7 	bl	8000db8 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0be      	b.n	8001fda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d1eb      	bne.n	8001e46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d010      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d208      	bcs.n	8001e9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f023 020f 	bic.w	r2, r3, #15
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <HAL_RCC_ClockConfig+0x244>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d214      	bcs.n	8001ed4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 020f 	bic.w	r2, r3, #15
 8001eb2:	4906      	ldr	r1, [pc, #24]	; (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <HAL_RCC_ClockConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e086      	b.n	8001fda <HAL_RCC_ClockConfig+0x34e>
 8001ecc:	52002000 	.word	0x52002000
 8001ed0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d010      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	4b3f      	ldr	r3, [pc, #252]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d208      	bcs.n	8001f02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ef0:	4b3c      	ldr	r3, [pc, #240]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4939      	ldr	r1, [pc, #228]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d010      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d208      	bcs.n	8001f30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f1e:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	492e      	ldr	r1, [pc, #184]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d010      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699a      	ldr	r2, [r3, #24]
 8001f40:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d208      	bcs.n	8001f5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4922      	ldr	r1, [pc, #136]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d010      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d208      	bcs.n	8001f8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4917      	ldr	r1, [pc, #92]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001f8c:	f000 f834 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	4912      	ldr	r1, [pc, #72]	; (8001fe8 <HAL_RCC_ClockConfig+0x35c>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_RCC_ClockConfig+0x358>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <HAL_RCC_ClockConfig+0x35c>)
 8001fb4:	5cd3      	ldrb	r3, [r2, r3]
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_RCC_ClockConfig+0x360>)
 8001fc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_RCC_ClockConfig+0x364>)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x368>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fea8 	bl	8000d24 <HAL_InitTick>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	58024400 	.word	0x58024400
 8001fe8:	08005388 	.word	0x08005388
 8001fec:	24000004 	.word	0x24000004
 8001ff0:	24000000 	.word	0x24000000
 8001ff4:	24000008 	.word	0x24000008

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ffe:	4bb3      	ldr	r3, [pc, #716]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002006:	2b18      	cmp	r3, #24
 8002008:	f200 8155 	bhi.w	80022b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800200c:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <HAL_RCC_GetSysClockFreq+0x1c>)
 800200e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002012:	bf00      	nop
 8002014:	08002079 	.word	0x08002079
 8002018:	080022b7 	.word	0x080022b7
 800201c:	080022b7 	.word	0x080022b7
 8002020:	080022b7 	.word	0x080022b7
 8002024:	080022b7 	.word	0x080022b7
 8002028:	080022b7 	.word	0x080022b7
 800202c:	080022b7 	.word	0x080022b7
 8002030:	080022b7 	.word	0x080022b7
 8002034:	0800209f 	.word	0x0800209f
 8002038:	080022b7 	.word	0x080022b7
 800203c:	080022b7 	.word	0x080022b7
 8002040:	080022b7 	.word	0x080022b7
 8002044:	080022b7 	.word	0x080022b7
 8002048:	080022b7 	.word	0x080022b7
 800204c:	080022b7 	.word	0x080022b7
 8002050:	080022b7 	.word	0x080022b7
 8002054:	080020a5 	.word	0x080020a5
 8002058:	080022b7 	.word	0x080022b7
 800205c:	080022b7 	.word	0x080022b7
 8002060:	080022b7 	.word	0x080022b7
 8002064:	080022b7 	.word	0x080022b7
 8002068:	080022b7 	.word	0x080022b7
 800206c:	080022b7 	.word	0x080022b7
 8002070:	080022b7 	.word	0x080022b7
 8002074:	080020ab 	.word	0x080020ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002078:	4b94      	ldr	r3, [pc, #592]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002084:	4b91      	ldr	r3, [pc, #580]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	08db      	lsrs	r3, r3, #3
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	4a90      	ldr	r2, [pc, #576]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002096:	e111      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002098:	4b8d      	ldr	r3, [pc, #564]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800209a:	61bb      	str	r3, [r7, #24]
      break;
 800209c:	e10e      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800209e:	4b8d      	ldr	r3, [pc, #564]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020a0:	61bb      	str	r3, [r7, #24]
      break;
 80020a2:	e10b      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80020a4:	4b8c      	ldr	r3, [pc, #560]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80020a6:	61bb      	str	r3, [r7, #24]
      break;
 80020a8:	e108      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020aa:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80020b4:	4b85      	ldr	r3, [pc, #532]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020c0:	4b82      	ldr	r3, [pc, #520]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80020ca:	4b80      	ldr	r3, [pc, #512]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	08db      	lsrs	r3, r3, #3
 80020d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	ee07 3a90 	vmov	s15, r3
 80020de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80e1 	beq.w	80022b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	f000 8083 	beq.w	80021fc <HAL_RCC_GetSysClockFreq+0x204>
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	f200 80a1 	bhi.w	8002240 <HAL_RCC_GetSysClockFreq+0x248>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x114>
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d056      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800210a:	e099      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800210c:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d02d      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002118:	4b6c      	ldr	r3, [pc, #432]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	4a6b      	ldr	r2, [pc, #428]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
 8002128:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800213e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002142:	4b62      	ldr	r3, [pc, #392]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800214a:	ee07 3a90 	vmov	s15, r3
 800214e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002152:	ed97 6a02 	vldr	s12, [r7, #8]
 8002156:	eddf 5a61 	vldr	s11, [pc, #388]	; 80022dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800215a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800215e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800216a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002172:	e087      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800217e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80022e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002186:	4b51      	ldr	r3, [pc, #324]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002196:	ed97 6a02 	vldr	s12, [r7, #8]
 800219a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80022dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800219e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021b6:	e065      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80022e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ca:	4b40      	ldr	r3, [pc, #256]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021da:	ed97 6a02 	vldr	s12, [r7, #8]
 80021de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80022dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80021e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021fa:	e043      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002206:	eddf 6a38 	vldr	s13, [pc, #224]	; 80022e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800220a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800220e:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800221e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002222:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80022dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800222a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800222e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800223e:	e021      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800224a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80022e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800224e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002262:	ed97 6a02 	vldr	s12, [r7, #8]
 8002266:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80022dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800226a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800226e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800227a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002282:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	0a5b      	lsrs	r3, r3, #9
 800228a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800228e:	3301      	adds	r3, #1
 8002290:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800229c:	edd7 6a07 	vldr	s13, [r7, #28]
 80022a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022a8:	ee17 3a90 	vmov	r3, s15
 80022ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80022ae:	e005      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61bb      	str	r3, [r7, #24]
      break;
 80022b4:	e002      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022b8:	61bb      	str	r3, [r7, #24]
      break;
 80022ba:	bf00      	nop
  }

  return sysclockfreq;
 80022bc:	69bb      	ldr	r3, [r7, #24]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	58024400 	.word	0x58024400
 80022d0:	03d09000 	.word	0x03d09000
 80022d4:	003d0900 	.word	0x003d0900
 80022d8:	007a1200 	.word	0x007a1200
 80022dc:	46000000 	.word	0x46000000
 80022e0:	4c742400 	.word	0x4c742400
 80022e4:	4a742400 	.word	0x4a742400
 80022e8:	4af42400 	.word	0x4af42400

080022ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80022f2:	f7ff fe81 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 80022f6:	4602      	mov	r2, r0
 80022f8:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_RCC_GetHCLKFreq+0x50>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	490f      	ldr	r1, [pc, #60]	; (8002340 <HAL_RCC_GetHCLKFreq+0x54>)
 8002304:	5ccb      	ldrb	r3, [r1, r3]
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_RCC_GetHCLKFreq+0x50>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	4a09      	ldr	r2, [pc, #36]	; (8002340 <HAL_RCC_GetHCLKFreq+0x54>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_RCC_GetHCLKFreq+0x58>)
 8002328:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800232a:	4a07      	ldr	r2, [pc, #28]	; (8002348 <HAL_RCC_GetHCLKFreq+0x5c>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <HAL_RCC_GetHCLKFreq+0x58>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	58024400 	.word	0x58024400
 8002340:	08005388 	.word	0x08005388
 8002344:	24000004 	.word	0x24000004
 8002348:	24000000 	.word	0x24000000

0800234c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002350:	f7ff ffcc 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4904      	ldr	r1, [pc, #16]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	58024400 	.word	0x58024400
 8002374:	08005388 	.word	0x08005388

08002378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800237c:	f7ff ffb6 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4904      	ldr	r1, [pc, #16]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	58024400 	.word	0x58024400
 80023a0:	08005388 	.word	0x08005388

080023a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a8:	b0c8      	sub	sp, #288	; 0x120
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023b6:	2300      	movs	r3, #0
 80023b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80023c8:	2500      	movs	r5, #0
 80023ca:	ea54 0305 	orrs.w	r3, r4, r5
 80023ce:	d049      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80023d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80023da:	d02f      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80023dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80023e0:	d828      	bhi.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023e6:	d01a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023ec:	d822      	bhi.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023f6:	d007      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023f8:	e01c      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023fa:	4ba7      	ldr	r3, [pc, #668]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	4aa6      	ldr	r2, [pc, #664]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002404:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002406:	e01a      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800240c:	3308      	adds	r3, #8
 800240e:	2102      	movs	r1, #2
 8002410:	4618      	mov	r0, r3
 8002412:	f001 fc43 	bl	8003c9c <RCCEx_PLL2_Config>
 8002416:	4603      	mov	r3, r0
 8002418:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800241c:	e00f      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800241e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002422:	3328      	adds	r3, #40	; 0x28
 8002424:	2102      	movs	r1, #2
 8002426:	4618      	mov	r0, r3
 8002428:	f001 fcea 	bl	8003e00 <RCCEx_PLL3_Config>
 800242c:	4603      	mov	r3, r0
 800242e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002432:	e004      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800243a:	e000      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800243c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800243e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002446:	4b94      	ldr	r3, [pc, #592]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800244e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002454:	4a90      	ldr	r2, [pc, #576]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002456:	430b      	orrs	r3, r1
 8002458:	6513      	str	r3, [r2, #80]	; 0x50
 800245a:	e003      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800245c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002460:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002470:	f04f 0900 	mov.w	r9, #0
 8002474:	ea58 0309 	orrs.w	r3, r8, r9
 8002478:	d047      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800247a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	2b04      	cmp	r3, #4
 8002482:	d82a      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002484:	a201      	add	r2, pc, #4	; (adr r2, 800248c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248a:	bf00      	nop
 800248c:	080024a1 	.word	0x080024a1
 8002490:	080024af 	.word	0x080024af
 8002494:	080024c5 	.word	0x080024c5
 8002498:	080024e3 	.word	0x080024e3
 800249c:	080024e3 	.word	0x080024e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024a0:	4b7d      	ldr	r3, [pc, #500]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	4a7c      	ldr	r2, [pc, #496]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024ac:	e01a      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024b2:	3308      	adds	r3, #8
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f001 fbf0 	bl	8003c9c <RCCEx_PLL2_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024c2:	e00f      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024c8:	3328      	adds	r3, #40	; 0x28
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 fc97 	bl	8003e00 <RCCEx_PLL3_Config>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024d8:	e004      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80024e0:	e000      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80024e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024ec:	4b6a      	ldr	r3, [pc, #424]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f0:	f023 0107 	bic.w	r1, r3, #7
 80024f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4a67      	ldr	r2, [pc, #412]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024fc:	430b      	orrs	r3, r1
 80024fe:	6513      	str	r3, [r2, #80]	; 0x50
 8002500:	e003      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002502:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002506:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800250a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002516:	f04f 0b00 	mov.w	fp, #0
 800251a:	ea5a 030b 	orrs.w	r3, sl, fp
 800251e:	d054      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800252a:	d036      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800252c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002530:	d82f      	bhi.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002536:	d032      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253c:	d829      	bhi.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800253e:	2bc0      	cmp	r3, #192	; 0xc0
 8002540:	d02f      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002542:	2bc0      	cmp	r3, #192	; 0xc0
 8002544:	d825      	bhi.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002546:	2b80      	cmp	r3, #128	; 0x80
 8002548:	d018      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800254a:	2b80      	cmp	r3, #128	; 0x80
 800254c:	d821      	bhi.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002552:	2b40      	cmp	r3, #64	; 0x40
 8002554:	d007      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002556:	e01c      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002558:	4b4f      	ldr	r3, [pc, #316]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	4a4e      	ldr	r2, [pc, #312]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800255e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002564:	e01e      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800256a:	3308      	adds	r3, #8
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f001 fb94 	bl	8003c9c <RCCEx_PLL2_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800257a:	e013      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800257c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002580:	3328      	adds	r3, #40	; 0x28
 8002582:	2100      	movs	r1, #0
 8002584:	4618      	mov	r0, r3
 8002586:	f001 fc3b 	bl	8003e00 <RCCEx_PLL3_Config>
 800258a:	4603      	mov	r3, r0
 800258c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002590:	e008      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002598:	e004      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800259a:	bf00      	nop
 800259c:	e002      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800259e:	bf00      	nop
 80025a0:	e000      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80025a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80025ac:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80025b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	4a37      	ldr	r2, [pc, #220]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025bc:	430b      	orrs	r3, r1
 80025be:	6513      	str	r3, [r2, #80]	; 0x50
 80025c0:	e003      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80025ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80025d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80025e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80025e4:	460b      	mov	r3, r1
 80025e6:	4313      	orrs	r3, r2
 80025e8:	d05c      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80025ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80025f4:	d03b      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025f6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80025fa:	d834      	bhi.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002600:	d037      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002606:	d82e      	bhi.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002608:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800260c:	d033      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800260e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002612:	d828      	bhi.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002618:	d01a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800261a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261e:	d822      	bhi.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002628:	d007      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800262a:	e01c      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	4a19      	ldr	r2, [pc, #100]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002638:	e01e      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800263a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800263e:	3308      	adds	r3, #8
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f001 fb2a 	bl	8003c9c <RCCEx_PLL2_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800264e:	e013      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002654:	3328      	adds	r3, #40	; 0x28
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f001 fbd1 	bl	8003e00 <RCCEx_PLL3_Config>
 800265e:	4603      	mov	r3, r0
 8002660:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002664:	e008      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800266c:	e004      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800266e:	bf00      	nop
 8002670:	e002      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002672:	bf00      	nop
 8002674:	e000      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002678:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002684:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800268c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268e:	4a02      	ldr	r2, [pc, #8]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002690:	430b      	orrs	r3, r1
 8002692:	6513      	str	r3, [r2, #80]	; 0x50
 8002694:	e006      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002696:	bf00      	nop
 8002698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80026a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80026b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80026ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80026be:	460b      	mov	r3, r1
 80026c0:	4313      	orrs	r3, r2
 80026c2:	d03a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80026c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	2b30      	cmp	r3, #48	; 0x30
 80026cc:	d01f      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80026ce:	2b30      	cmp	r3, #48	; 0x30
 80026d0:	d819      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d00c      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d815      	bhi.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d019      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d111      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e2:	4bae      	ldr	r3, [pc, #696]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	4aad      	ldr	r2, [pc, #692]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80026ee:	e011      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026f4:	3308      	adds	r3, #8
 80026f6:	2102      	movs	r1, #2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f001 facf 	bl	8003c9c <RCCEx_PLL2_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002704:	e006      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800270c:	e002      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800270e:	bf00      	nop
 8002710:	e000      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002714:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800271c:	4b9f      	ldr	r3, [pc, #636]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	4a9c      	ldr	r2, [pc, #624]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800272c:	430b      	orrs	r3, r1
 800272e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002730:	e003      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002732:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002736:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800273a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002746:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002750:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002754:	460b      	mov	r3, r1
 8002756:	4313      	orrs	r3, r2
 8002758:	d051      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800275a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800275e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002764:	d035      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800276a:	d82e      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800276c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002770:	d031      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002772:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002776:	d828      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277c:	d01a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800277e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002782:	d822      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278c:	d007      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800278e:	e01c      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002790:	4b82      	ldr	r3, [pc, #520]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	4a81      	ldr	r2, [pc, #516]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800279c:	e01c      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800279e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a2:	3308      	adds	r3, #8
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f001 fa78 	bl	8003c9c <RCCEx_PLL2_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027b2:	e011      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027b8:	3328      	adds	r3, #40	; 0x28
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 fb1f 	bl	8003e00 <RCCEx_PLL3_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027c8:	e006      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80027d0:	e002      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80027d2:	bf00      	nop
 80027d4:	e000      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80027d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027e0:	4b6e      	ldr	r3, [pc, #440]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80027e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ee:	4a6b      	ldr	r2, [pc, #428]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027f0:	430b      	orrs	r3, r1
 80027f2:	6513      	str	r3, [r2, #80]	; 0x50
 80027f4:	e003      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800280a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800280e:	2300      	movs	r3, #0
 8002810:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002814:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002818:	460b      	mov	r3, r1
 800281a:	4313      	orrs	r3, r2
 800281c:	d053      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800281e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002828:	d033      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800282a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800282e:	d82c      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002834:	d02f      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002836:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800283a:	d826      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800283c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002840:	d02b      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002842:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002846:	d820      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800284c:	d012      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800284e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002852:	d81a      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002854:	2b00      	cmp	r3, #0
 8002856:	d022      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d115      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800285e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002862:	3308      	adds	r3, #8
 8002864:	2101      	movs	r1, #1
 8002866:	4618      	mov	r0, r3
 8002868:	f001 fa18 	bl	8003c9c <RCCEx_PLL2_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002872:	e015      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002878:	3328      	adds	r3, #40	; 0x28
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f001 fabf 	bl	8003e00 <RCCEx_PLL3_Config>
 8002882:	4603      	mov	r3, r0
 8002884:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002888:	e00a      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002890:	e006      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002892:	bf00      	nop
 8002894:	e004      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002896:	bf00      	nop
 8002898:	e002      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800289a:	bf00      	nop
 800289c:	e000      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800289e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028a8:	4b3c      	ldr	r3, [pc, #240]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80028b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b6:	4a39      	ldr	r2, [pc, #228]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6513      	str	r3, [r2, #80]	; 0x50
 80028bc:	e003      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80028d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4313      	orrs	r3, r2
 80028e4:	d060      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80028e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028ee:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80028f2:	d039      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80028f4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80028f8:	d832      	bhi.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028fe:	d035      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002904:	d82c      	bhi.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290a:	d031      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d826      	bhi.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002912:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002916:	d02d      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002918:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800291c:	d820      	bhi.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800291e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002922:	d012      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002928:	d81a      	bhi.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d024      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800292e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002932:	d115      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002938:	3308      	adds	r3, #8
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f001 f9ad 	bl	8003c9c <RCCEx_PLL2_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002948:	e017      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800294a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800294e:	3328      	adds	r3, #40	; 0x28
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f001 fa54 	bl	8003e00 <RCCEx_PLL3_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800295e:	e00c      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002966:	e008      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002968:	bf00      	nop
 800296a:	e006      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800296c:	bf00      	nop
 800296e:	e004      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002970:	bf00      	nop
 8002972:	e002      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800297a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10e      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800298a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800298e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002992:	4a02      	ldr	r2, [pc, #8]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002994:	430b      	orrs	r3, r1
 8002996:	6593      	str	r3, [r2, #88]	; 0x58
 8002998:	e006      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800299a:	bf00      	nop
 800299c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80029b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80029be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029c2:	460b      	mov	r3, r1
 80029c4:	4313      	orrs	r3, r2
 80029c6:	d037      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80029c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d2:	d00e      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80029d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d8:	d816      	bhi.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d018      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80029de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029e2:	d111      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e4:	4bc4      	ldr	r3, [pc, #784]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	4ac3      	ldr	r2, [pc, #780]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029f0:	e00f      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029f6:	3308      	adds	r3, #8
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f001 f94e 	bl	8003c9c <RCCEx_PLL2_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a06:	e004      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a0e:	e000      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a1a:	4bb7      	ldr	r3, [pc, #732]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a28:	4ab3      	ldr	r2, [pc, #716]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a2a:	430b      	orrs	r3, r1
 8002a2c:	6513      	str	r3, [r2, #80]	; 0x50
 8002a2e:	e003      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002a44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4313      	orrs	r3, r2
 8002a56:	d039      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d81c      	bhi.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002a62:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a68:	08002aa5 	.word	0x08002aa5
 8002a6c:	08002a79 	.word	0x08002a79
 8002a70:	08002a87 	.word	0x08002a87
 8002a74:	08002aa5 	.word	0x08002aa5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a78:	4b9f      	ldr	r3, [pc, #636]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	4a9e      	ldr	r2, [pc, #632]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a84:	e00f      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 f904 	bl	8003c9c <RCCEx_PLL2_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a9a:	e004      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002aae:	4b92      	ldr	r3, [pc, #584]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	f023 0103 	bic.w	r1, r3, #3
 8002ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002abc:	4a8e      	ldr	r2, [pc, #568]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac2:	e003      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ac8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ae2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f000 8099 	beq.w	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aee:	4b83      	ldr	r3, [pc, #524]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a82      	ldr	r2, [pc, #520]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002afa:	f7fe f95d 	bl	8000db8 <HAL_GetTick>
 8002afe:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b02:	e00b      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7fe f958 	bl	8000db8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b64      	cmp	r3, #100	; 0x64
 8002b12:	d903      	bls.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b1a:	e005      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b1c:	4b77      	ldr	r3, [pc, #476]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0ed      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002b28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d173      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b30:	4b71      	ldr	r3, [pc, #452]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b3c:	4053      	eors	r3, r2
 8002b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b46:	4b6c      	ldr	r3, [pc, #432]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b52:	4b69      	ldr	r3, [pc, #420]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	4a68      	ldr	r2, [pc, #416]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5e:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	4a65      	ldr	r2, [pc, #404]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b68:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b6a:	4a63      	ldr	r2, [pc, #396]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b7e:	d118      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe f91a 	bl	8000db8 <HAL_GetTick>
 8002b84:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b88:	e00d      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fe f915 	bl	8000db8 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b94:	1ad2      	subs	r2, r2, r3
 8002b96:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d903      	bls.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002ba4:	e005      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba6:	4b54      	ldr	r3, [pc, #336]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0eb      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002bb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d129      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bca:	d10e      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002bcc:	4b4a      	ldr	r3, [pc, #296]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bdc:	091a      	lsrs	r2, r3, #4
 8002bde:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	4a45      	ldr	r2, [pc, #276]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6113      	str	r3, [r2, #16]
 8002be8:	e005      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002bea:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	4a42      	ldr	r2, [pc, #264]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bf0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bf4:	6113      	str	r3, [r2, #16]
 8002bf6:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bf8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c06:	4a3c      	ldr	r2, [pc, #240]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	e008      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002c16:	e003      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c28:	f002 0301 	and.w	r3, r2, #1
 8002c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f000 8090 	beq.w	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4a:	2b28      	cmp	r3, #40	; 0x28
 8002c4c:	d870      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002c4e:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c54:	08002d39 	.word	0x08002d39
 8002c58:	08002d31 	.word	0x08002d31
 8002c5c:	08002d31 	.word	0x08002d31
 8002c60:	08002d31 	.word	0x08002d31
 8002c64:	08002d31 	.word	0x08002d31
 8002c68:	08002d31 	.word	0x08002d31
 8002c6c:	08002d31 	.word	0x08002d31
 8002c70:	08002d31 	.word	0x08002d31
 8002c74:	08002d05 	.word	0x08002d05
 8002c78:	08002d31 	.word	0x08002d31
 8002c7c:	08002d31 	.word	0x08002d31
 8002c80:	08002d31 	.word	0x08002d31
 8002c84:	08002d31 	.word	0x08002d31
 8002c88:	08002d31 	.word	0x08002d31
 8002c8c:	08002d31 	.word	0x08002d31
 8002c90:	08002d31 	.word	0x08002d31
 8002c94:	08002d1b 	.word	0x08002d1b
 8002c98:	08002d31 	.word	0x08002d31
 8002c9c:	08002d31 	.word	0x08002d31
 8002ca0:	08002d31 	.word	0x08002d31
 8002ca4:	08002d31 	.word	0x08002d31
 8002ca8:	08002d31 	.word	0x08002d31
 8002cac:	08002d31 	.word	0x08002d31
 8002cb0:	08002d31 	.word	0x08002d31
 8002cb4:	08002d39 	.word	0x08002d39
 8002cb8:	08002d31 	.word	0x08002d31
 8002cbc:	08002d31 	.word	0x08002d31
 8002cc0:	08002d31 	.word	0x08002d31
 8002cc4:	08002d31 	.word	0x08002d31
 8002cc8:	08002d31 	.word	0x08002d31
 8002ccc:	08002d31 	.word	0x08002d31
 8002cd0:	08002d31 	.word	0x08002d31
 8002cd4:	08002d39 	.word	0x08002d39
 8002cd8:	08002d31 	.word	0x08002d31
 8002cdc:	08002d31 	.word	0x08002d31
 8002ce0:	08002d31 	.word	0x08002d31
 8002ce4:	08002d31 	.word	0x08002d31
 8002ce8:	08002d31 	.word	0x08002d31
 8002cec:	08002d31 	.word	0x08002d31
 8002cf0:	08002d31 	.word	0x08002d31
 8002cf4:	08002d39 	.word	0x08002d39
 8002cf8:	58024400 	.word	0x58024400
 8002cfc:	58024800 	.word	0x58024800
 8002d00:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d08:	3308      	adds	r3, #8
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 ffc5 	bl	8003c9c <RCCEx_PLL2_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d18:	e00f      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d1e:	3328      	adds	r3, #40	; 0x28
 8002d20:	2101      	movs	r1, #1
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 f86c 	bl	8003e00 <RCCEx_PLL3_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d2e:	e004      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d36:	e000      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10b      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d42:	4bc0      	ldr	r3, [pc, #768]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d52:	4abc      	ldr	r2, [pc, #752]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d54:	430b      	orrs	r3, r1
 8002d56:	6553      	str	r3, [r2, #84]	; 0x54
 8002d58:	e003      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	f002 0302 	and.w	r3, r2, #2
 8002d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d78:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	d043      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8a:	2b05      	cmp	r3, #5
 8002d8c:	d824      	bhi.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002d8e:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d94:	08002de1 	.word	0x08002de1
 8002d98:	08002dad 	.word	0x08002dad
 8002d9c:	08002dc3 	.word	0x08002dc3
 8002da0:	08002de1 	.word	0x08002de1
 8002da4:	08002de1 	.word	0x08002de1
 8002da8:	08002de1 	.word	0x08002de1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002db0:	3308      	adds	r3, #8
 8002db2:	2101      	movs	r1, #1
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 ff71 	bl	8003c9c <RCCEx_PLL2_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002dc0:	e00f      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dc6:	3328      	adds	r3, #40	; 0x28
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f001 f818 	bl	8003e00 <RCCEx_PLL3_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002dd6:	e004      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dde:	e000      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10b      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002dea:	4b96      	ldr	r3, [pc, #600]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	f023 0107 	bic.w	r1, r3, #7
 8002df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dfa:	4a92      	ldr	r2, [pc, #584]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6553      	str	r3, [r2, #84]	; 0x54
 8002e00:	e003      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	f002 0304 	and.w	r3, r2, #4
 8002e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e20:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4313      	orrs	r3, r2
 8002e28:	d043      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d824      	bhi.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002e36:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3c:	08002e89 	.word	0x08002e89
 8002e40:	08002e55 	.word	0x08002e55
 8002e44:	08002e6b 	.word	0x08002e6b
 8002e48:	08002e89 	.word	0x08002e89
 8002e4c:	08002e89 	.word	0x08002e89
 8002e50:	08002e89 	.word	0x08002e89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e58:	3308      	adds	r3, #8
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 ff1d 	bl	8003c9c <RCCEx_PLL2_Config>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e68:	e00f      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e6e:	3328      	adds	r3, #40	; 0x28
 8002e70:	2101      	movs	r1, #1
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 ffc4 	bl	8003e00 <RCCEx_PLL3_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e7e:	e004      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e86:	e000      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10b      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e92:	4b6c      	ldr	r3, [pc, #432]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	f023 0107 	bic.w	r1, r3, #7
 8002e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ea2:	4a68      	ldr	r2, [pc, #416]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea8:	e003      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eaa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	f002 0320 	and.w	r3, r2, #32
 8002ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	d055      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ede:	d033      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee4:	d82c      	bhi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eea:	d02f      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef0:	d826      	bhi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ef2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ef6:	d02b      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002ef8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002efc:	d820      	bhi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f02:	d012      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f08:	d81a      	bhi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d022      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002f0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f12:	d115      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f18:	3308      	adds	r3, #8
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 febd 	bl	8003c9c <RCCEx_PLL2_Config>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f28:	e015      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f2e:	3328      	adds	r3, #40	; 0x28
 8002f30:	2102      	movs	r1, #2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 ff64 	bl	8003e00 <RCCEx_PLL3_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f46:	e006      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f48:	bf00      	nop
 8002f4a:	e004      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f4c:	bf00      	nop
 8002f4e:	e002      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f50:	bf00      	nop
 8002f52:	e000      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10b      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f5e:	4b39      	ldr	r3, [pc, #228]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f6e:	4a35      	ldr	r2, [pc, #212]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6553      	str	r3, [r2, #84]	; 0x54
 8002f74:	e003      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	d058      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fa6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002faa:	d033      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002fac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fb0:	d82c      	bhi.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb6:	d02f      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbc:	d826      	bhi.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fc2:	d02b      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002fc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fc8:	d820      	bhi.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fce:	d012      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8002fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd4:	d81a      	bhi.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d022      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8002fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fde:	d115      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fe57 	bl	8003c9c <RCCEx_PLL2_Config>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002ff4:	e015      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ffa:	3328      	adds	r3, #40	; 0x28
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fefe 	bl	8003e00 <RCCEx_PLL3_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800300a:	e00a      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003012:	e006      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003014:	bf00      	nop
 8003016:	e004      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003018:	bf00      	nop
 800301a:	e002      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800301c:	bf00      	nop
 800301e:	e000      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003022:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10e      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003036:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800303a:	4a02      	ldr	r2, [pc, #8]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800303c:	430b      	orrs	r3, r1
 800303e:	6593      	str	r3, [r2, #88]	; 0x58
 8003040:	e006      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003042:	bf00      	nop
 8003044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003048:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800304c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800305c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003060:	2300      	movs	r3, #0
 8003062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003066:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800306a:	460b      	mov	r3, r1
 800306c:	4313      	orrs	r3, r2
 800306e:	d055      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003074:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003078:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800307c:	d033      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800307e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003082:	d82c      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003088:	d02f      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800308a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308e:	d826      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003090:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003094:	d02b      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003096:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800309a:	d820      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800309c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030a0:	d012      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80030a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030a6:	d81a      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d022      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80030ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b0:	d115      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030b6:	3308      	adds	r3, #8
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fdee 	bl	8003c9c <RCCEx_PLL2_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030c6:	e015      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030cc:	3328      	adds	r3, #40	; 0x28
 80030ce:	2102      	movs	r1, #2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fe95 	bl	8003e00 <RCCEx_PLL3_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030dc:	e00a      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030e4:	e006      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030e6:	bf00      	nop
 80030e8:	e004      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030ea:	bf00      	nop
 80030ec:	e002      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030ee:	bf00      	nop
 80030f0:	e000      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030fc:	4ba1      	ldr	r3, [pc, #644]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003108:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800310c:	4a9d      	ldr	r2, [pc, #628]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800310e:	430b      	orrs	r3, r1
 8003110:	6593      	str	r3, [r2, #88]	; 0x58
 8003112:	e003      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003114:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003118:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800311c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f002 0308 	and.w	r3, r2, #8
 8003128:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003132:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003136:	460b      	mov	r3, r1
 8003138:	4313      	orrs	r3, r2
 800313a:	d01e      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800313c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003148:	d10c      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800314a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800314e:	3328      	adds	r3, #40	; 0x28
 8003150:	2102      	movs	r1, #2
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fe54 	bl	8003e00 <RCCEx_PLL3_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003164:	4b87      	ldr	r3, [pc, #540]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003168:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800316c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003174:	4a83      	ldr	r2, [pc, #524]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003176:	430b      	orrs	r3, r1
 8003178:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800317a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	f002 0310 	and.w	r3, r2, #16
 8003186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800318a:	2300      	movs	r3, #0
 800318c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003190:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003194:	460b      	mov	r3, r1
 8003196:	4313      	orrs	r3, r2
 8003198:	d01e      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800319a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800319e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a6:	d10c      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ac:	3328      	adds	r3, #40	; 0x28
 80031ae:	2102      	movs	r1, #2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fe25 	bl	8003e00 <RCCEx_PLL3_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031c2:	4b70      	ldr	r3, [pc, #448]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031d2:	4a6c      	ldr	r2, [pc, #432]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80031e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80031f2:	460b      	mov	r3, r1
 80031f4:	4313      	orrs	r3, r2
 80031f6:	d03e      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80031f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003204:	d022      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800320a:	d81b      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003214:	d00b      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003216:	e015      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321c:	3308      	adds	r3, #8
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fd3b 	bl	8003c9c <RCCEx_PLL2_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800322c:	e00f      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800322e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003232:	3328      	adds	r3, #40	; 0x28
 8003234:	2102      	movs	r1, #2
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fde2 	bl	8003e00 <RCCEx_PLL3_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003242:	e004      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800324a:	e000      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800324c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003256:	4b4b      	ldr	r3, [pc, #300]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800325e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003262:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003266:	4a47      	ldr	r2, [pc, #284]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003268:	430b      	orrs	r3, r1
 800326a:	6593      	str	r3, [r2, #88]	; 0x58
 800326c:	e003      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003272:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003282:	67bb      	str	r3, [r7, #120]	; 0x78
 8003284:	2300      	movs	r3, #0
 8003286:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003288:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800328c:	460b      	mov	r3, r1
 800328e:	4313      	orrs	r3, r2
 8003290:	d03b      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003292:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800329e:	d01f      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80032a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032a4:	d818      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80032a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032aa:	d003      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80032ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032b0:	d007      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80032b2:	e011      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b4:	4b33      	ldr	r3, [pc, #204]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	4a32      	ldr	r2, [pc, #200]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80032c0:	e00f      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c6:	3328      	adds	r3, #40	; 0x28
 80032c8:	2101      	movs	r1, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fd98 	bl	8003e00 <RCCEx_PLL3_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80032d6:	e004      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032de:	e000      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80032e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10b      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ea:	4b26      	ldr	r3, [pc, #152]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80032f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	4a22      	ldr	r2, [pc, #136]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6553      	str	r3, [r2, #84]	; 0x54
 8003300:	e003      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003302:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003306:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800330a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003316:	673b      	str	r3, [r7, #112]	; 0x70
 8003318:	2300      	movs	r3, #0
 800331a:	677b      	str	r3, [r7, #116]	; 0x74
 800331c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003320:	460b      	mov	r3, r1
 8003322:	4313      	orrs	r3, r2
 8003324:	d034      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800332a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d007      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003336:	e011      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	4a11      	ldr	r2, [pc, #68]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800333e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003344:	e00e      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800334a:	3308      	adds	r3, #8
 800334c:	2102      	movs	r1, #2
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fca4 	bl	8003c9c <RCCEx_PLL2_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800335a:	e003      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003364:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10d      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800336e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337a:	4a02      	ldr	r2, [pc, #8]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800337c:	430b      	orrs	r3, r1
 800337e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003380:	e006      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003382:	bf00      	nop
 8003384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003388:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800338c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800339c:	66bb      	str	r3, [r7, #104]	; 0x68
 800339e:	2300      	movs	r3, #0
 80033a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80033a6:	460b      	mov	r3, r1
 80033a8:	4313      	orrs	r3, r2
 80033aa:	d00c      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b0:	3328      	adds	r3, #40	; 0x28
 80033b2:	2102      	movs	r1, #2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fd23 	bl	8003e00 <RCCEx_PLL3_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80033d2:	663b      	str	r3, [r7, #96]	; 0x60
 80033d4:	2300      	movs	r3, #0
 80033d6:	667b      	str	r3, [r7, #100]	; 0x64
 80033d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80033dc:	460b      	mov	r3, r1
 80033de:	4313      	orrs	r3, r2
 80033e0:	d038      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80033e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ee:	d018      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80033f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f4:	d811      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80033f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033fa:	d014      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80033fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003400:	d80b      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d011      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340a:	d106      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800340c:	4bc3      	ldr	r3, [pc, #780]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	4ac2      	ldr	r2, [pc, #776]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003416:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003418:	e008      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003420:	e004      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003422:	bf00      	nop
 8003424:	e002      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800342a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003434:	4bb9      	ldr	r3, [pc, #740]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800343c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003444:	4ab5      	ldr	r2, [pc, #724]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003446:	430b      	orrs	r3, r1
 8003448:	6553      	str	r3, [r2, #84]	; 0x54
 800344a:	e003      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003450:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003460:	65bb      	str	r3, [r7, #88]	; 0x58
 8003462:	2300      	movs	r3, #0
 8003464:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003466:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800346a:	460b      	mov	r3, r1
 800346c:	4313      	orrs	r3, r2
 800346e:	d009      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003470:	4baa      	ldr	r3, [pc, #680]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003474:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800347e:	4aa7      	ldr	r2, [pc, #668]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003480:	430b      	orrs	r3, r1
 8003482:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003490:	653b      	str	r3, [r7, #80]	; 0x50
 8003492:	2300      	movs	r3, #0
 8003494:	657b      	str	r3, [r7, #84]	; 0x54
 8003496:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800349a:	460b      	mov	r3, r1
 800349c:	4313      	orrs	r3, r2
 800349e:	d009      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034a0:	4b9e      	ldr	r3, [pc, #632]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80034a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	4a9b      	ldr	r2, [pc, #620]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80034b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80034c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80034c2:	2300      	movs	r3, #0
 80034c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80034ca:	460b      	mov	r3, r1
 80034cc:	4313      	orrs	r3, r2
 80034ce:	d009      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80034d0:	4b92      	ldr	r3, [pc, #584]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80034d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034de:	4a8f      	ldr	r2, [pc, #572]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80034f0:	643b      	str	r3, [r7, #64]	; 0x40
 80034f2:	2300      	movs	r3, #0
 80034f4:	647b      	str	r3, [r7, #68]	; 0x44
 80034f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80034fa:	460b      	mov	r3, r1
 80034fc:	4313      	orrs	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003500:	4b86      	ldr	r3, [pc, #536]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	4a85      	ldr	r2, [pc, #532]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003506:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800350a:	6113      	str	r3, [r2, #16]
 800350c:	4b83      	ldr	r3, [pc, #524]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800350e:	6919      	ldr	r1, [r3, #16]
 8003510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003514:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003518:	4a80      	ldr	r2, [pc, #512]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800351a:	430b      	orrs	r3, r1
 800351c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800351e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800352a:	63bb      	str	r3, [r7, #56]	; 0x38
 800352c:	2300      	movs	r3, #0
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003530:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003534:	460b      	mov	r3, r1
 8003536:	4313      	orrs	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800353a:	4b78      	ldr	r3, [pc, #480]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003548:	4a74      	ldr	r2, [pc, #464]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800354a:	430b      	orrs	r3, r1
 800354c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800354e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800355a:	633b      	str	r3, [r7, #48]	; 0x30
 800355c:	2300      	movs	r3, #0
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
 8003560:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003564:	460b      	mov	r3, r1
 8003566:	4313      	orrs	r3, r2
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800356a:	4b6c      	ldr	r3, [pc, #432]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357a:	4a68      	ldr	r2, [pc, #416]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800357c:	430b      	orrs	r3, r1
 800357e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	2100      	movs	r1, #0
 800358a:	62b9      	str	r1, [r7, #40]	; 0x28
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003592:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003596:	460b      	mov	r3, r1
 8003598:	4313      	orrs	r3, r2
 800359a:	d011      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800359c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a0:	3308      	adds	r3, #8
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fb79 	bl	8003c9c <RCCEx_PLL2_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80035b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80035c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	2100      	movs	r1, #0
 80035ca:	6239      	str	r1, [r7, #32]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
 80035d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035d6:	460b      	mov	r3, r1
 80035d8:	4313      	orrs	r3, r2
 80035da:	d011      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e0:	3308      	adds	r3, #8
 80035e2:	2101      	movs	r1, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fb59 	bl	8003c9c <RCCEx_PLL2_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80035f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	2100      	movs	r1, #0
 800360a:	61b9      	str	r1, [r7, #24]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003616:	460b      	mov	r3, r1
 8003618:	4313      	orrs	r3, r2
 800361a:	d011      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800361c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003620:	3308      	adds	r3, #8
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fb39 	bl	8003c9c <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003630:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003638:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800363c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003648:	2100      	movs	r1, #0
 800364a:	6139      	str	r1, [r7, #16]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003656:	460b      	mov	r3, r1
 8003658:	4313      	orrs	r3, r2
 800365a:	d011      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800365c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003660:	3328      	adds	r3, #40	; 0x28
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fbcb 	bl	8003e00 <RCCEx_PLL3_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003670:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800367c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	2100      	movs	r1, #0
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003696:	460b      	mov	r3, r1
 8003698:	4313      	orrs	r3, r2
 800369a:	d011      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800369c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a0:	3328      	adds	r3, #40	; 0x28
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fbab 	bl	8003e00 <RCCEx_PLL3_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80036c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	2100      	movs	r1, #0
 80036ca:	6039      	str	r1, [r7, #0]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036d6:	460b      	mov	r3, r1
 80036d8:	4313      	orrs	r3, r2
 80036da:	d011      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e0:	3328      	adds	r3, #40	; 0x28
 80036e2:	2102      	movs	r1, #2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fb8b 	bl	8003e00 <RCCEx_PLL3_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003700:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
}
 800370e:	4618      	mov	r0, r3
 8003710:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003714:	46bd      	mov	sp, r7
 8003716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800371a:	bf00      	nop
 800371c:	58024400 	.word	0x58024400

08003720 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003724:	f7fe fde2 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4904      	ldr	r1, [pc, #16]	; (8003748 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	58024400 	.word	0x58024400
 8003748:	08005388 	.word	0x08005388

0800374c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003754:	4ba1      	ldr	r3, [pc, #644]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800375e:	4b9f      	ldr	r3, [pc, #636]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	0b1b      	lsrs	r3, r3, #12
 8003764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003768:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800376a:	4b9c      	ldr	r3, [pc, #624]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003776:	4b99      	ldr	r3, [pc, #612]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	08db      	lsrs	r3, r3, #3
 800377c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8111 	beq.w	80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b02      	cmp	r3, #2
 800379e:	f000 8083 	beq.w	80038a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	f200 80a1 	bhi.w	80038ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d056      	beq.n	8003864 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80037b6:	e099      	b.n	80038ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037b8:	4b88      	ldr	r3, [pc, #544]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02d      	beq.n	8003820 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037c4:	4b85      	ldr	r3, [pc, #532]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	08db      	lsrs	r3, r3, #3
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	4a84      	ldr	r2, [pc, #528]	; (80039e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
 80037d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ee:	4b7b      	ldr	r3, [pc, #492]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003802:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800380e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800381e:	e087      	b.n	8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800382e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003832:	4b6a      	ldr	r3, [pc, #424]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003842:	ed97 6a03 	vldr	s12, [r7, #12]
 8003846:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800384a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800384e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800385e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003862:	e065      	b.n	8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003876:	4b59      	ldr	r3, [pc, #356]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003886:	ed97 6a03 	vldr	s12, [r7, #12]
 800388a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800388e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800389a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038a6:	e043      	b.n	8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80038b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ba:	4b48      	ldr	r3, [pc, #288]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038ea:	e021      	b.n	8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fe:	4b37      	ldr	r3, [pc, #220]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800390e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003912:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800391e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800392e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003930:	4b2a      	ldr	r3, [pc, #168]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	0a5b      	lsrs	r3, r3, #9
 8003936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003946:	ee37 7a87 	vadd.f32	s14, s15, s14
 800394a:	edd7 6a07 	vldr	s13, [r7, #28]
 800394e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003956:	ee17 2a90 	vmov	r2, s15
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800395e:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003968:	ee07 3a90 	vmov	s15, r3
 800396c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003974:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003978:	edd7 6a07 	vldr	s13, [r7, #28]
 800397c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003984:	ee17 2a90 	vmov	r2, s15
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800398c:	4b13      	ldr	r3, [pc, #76]	; (80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	0e1b      	lsrs	r3, r3, #24
 8003992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80039aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039b2:	ee17 2a90 	vmov	r2, s15
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039ba:	e008      	b.n	80039ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
}
 80039ce:	bf00      	nop
 80039d0:	3724      	adds	r7, #36	; 0x24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	58024400 	.word	0x58024400
 80039e0:	03d09000 	.word	0x03d09000
 80039e4:	46000000 	.word	0x46000000
 80039e8:	4c742400 	.word	0x4c742400
 80039ec:	4a742400 	.word	0x4a742400
 80039f0:	4af42400 	.word	0x4af42400

080039f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b089      	sub	sp, #36	; 0x24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039fc:	4ba1      	ldr	r3, [pc, #644]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003a06:	4b9f      	ldr	r3, [pc, #636]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	0d1b      	lsrs	r3, r3, #20
 8003a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a12:	4b9c      	ldr	r3, [pc, #624]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003a1e:	4b99      	ldr	r3, [pc, #612]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	08db      	lsrs	r3, r3, #3
 8003a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	fb02 f303 	mul.w	r3, r2, r3
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 8111 	beq.w	8003c64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	f000 8083 	beq.w	8003b50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	f200 80a1 	bhi.w	8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d056      	beq.n	8003b0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a5e:	e099      	b.n	8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a60:	4b88      	ldr	r3, [pc, #544]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02d      	beq.n	8003ac8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a6c:	4b85      	ldr	r3, [pc, #532]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	08db      	lsrs	r3, r3, #3
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	4a84      	ldr	r2, [pc, #528]	; (8003c88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a96:	4b7b      	ldr	r3, [pc, #492]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ac6:	e087      	b.n	8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ada:	4b6a      	ldr	r3, [pc, #424]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b0a:	e065      	b.n	8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b1e:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b4e:	e043      	b.n	8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b62:	4b48      	ldr	r3, [pc, #288]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6a:	ee07 3a90 	vmov	s15, r3
 8003b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b92:	e021      	b.n	8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba6:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003bd8:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	0a5b      	lsrs	r3, r3, #9
 8003bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bfe:	ee17 2a90 	vmov	r2, s15
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003c06:	4b1f      	ldr	r3, [pc, #124]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c10:	ee07 3a90 	vmov	s15, r3
 8003c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c2c:	ee17 2a90 	vmov	r2, s15
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	0e1b      	lsrs	r3, r3, #24
 8003c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c5a:	ee17 2a90 	vmov	r2, s15
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c62:	e008      	b.n	8003c76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	609a      	str	r2, [r3, #8]
}
 8003c76:	bf00      	nop
 8003c78:	3724      	adds	r7, #36	; 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	58024400 	.word	0x58024400
 8003c88:	03d09000 	.word	0x03d09000
 8003c8c:	46000000 	.word	0x46000000
 8003c90:	4c742400 	.word	0x4c742400
 8003c94:	4a742400 	.word	0x4a742400
 8003c98:	4af42400 	.word	0x4af42400

08003c9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003caa:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d101      	bne.n	8003cba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e099      	b.n	8003dee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cba:	4b4f      	ldr	r3, [pc, #316]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a4e      	ldr	r2, [pc, #312]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003cc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc6:	f7fd f877 	bl	8000db8 <HAL_GetTick>
 8003cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ccc:	e008      	b.n	8003ce0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003cce:	f7fd f873 	bl	8000db8 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e086      	b.n	8003dee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ce0:	4b45      	ldr	r3, [pc, #276]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f0      	bne.n	8003cce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003cec:	4b42      	ldr	r3, [pc, #264]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	031b      	lsls	r3, r3, #12
 8003cfa:	493f      	ldr	r1, [pc, #252]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	628b      	str	r3, [r1, #40]	; 0x28
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	025b      	lsls	r3, r3, #9
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	061b      	lsls	r3, r3, #24
 8003d2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d30:	4931      	ldr	r1, [pc, #196]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d36:	4b30      	ldr	r3, [pc, #192]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	492d      	ldr	r1, [pc, #180]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d48:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	f023 0220 	bic.w	r2, r3, #32
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	4928      	ldr	r1, [pc, #160]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d5a:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d60:	f023 0310 	bic.w	r3, r3, #16
 8003d64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d66:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d6a:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <RCCEx_PLL2_Config+0x160>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	69d2      	ldr	r2, [r2, #28]
 8003d72:	00d2      	lsls	r2, r2, #3
 8003d74:	4920      	ldr	r1, [pc, #128]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d7a:	4b1f      	ldr	r3, [pc, #124]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	4a1e      	ldr	r2, [pc, #120]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d80:	f043 0310 	orr.w	r3, r3, #16
 8003d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d8c:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d98:	e00f      	b.n	8003dba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d106      	bne.n	8003dae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003da0:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dac:	e005      	b.n	8003dba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003db8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003dc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc6:	f7fc fff7 	bl	8000db8 <HAL_GetTick>
 8003dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dcc:	e008      	b.n	8003de0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003dce:	f7fc fff3 	bl	8000db8 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e006      	b.n	8003dee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <RCCEx_PLL2_Config+0x15c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	58024400 	.word	0x58024400
 8003dfc:	ffff0007 	.word	0xffff0007

08003e00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e0e:	4b53      	ldr	r3, [pc, #332]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	d101      	bne.n	8003e1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e099      	b.n	8003f52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e1e:	4b4f      	ldr	r3, [pc, #316]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a4e      	ldr	r2, [pc, #312]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e2a:	f7fc ffc5 	bl	8000db8 <HAL_GetTick>
 8003e2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e30:	e008      	b.n	8003e44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e32:	f7fc ffc1 	bl	8000db8 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e086      	b.n	8003f52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e44:	4b45      	ldr	r3, [pc, #276]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f0      	bne.n	8003e32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e50:	4b42      	ldr	r3, [pc, #264]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	051b      	lsls	r3, r3, #20
 8003e5e:	493f      	ldr	r1, [pc, #252]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	628b      	str	r3, [r1, #40]	; 0x28
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	025b      	lsls	r3, r3, #9
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e94:	4931      	ldr	r1, [pc, #196]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e9a:	4b30      	ldr	r3, [pc, #192]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	492d      	ldr	r1, [pc, #180]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	4928      	ldr	r1, [pc, #160]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ebe:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	4a26      	ldr	r2, [pc, #152]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ece:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <RCCEx_PLL3_Config+0x160>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	69d2      	ldr	r2, [r2, #28]
 8003ed6:	00d2      	lsls	r2, r2, #3
 8003ed8:	4920      	ldr	r1, [pc, #128]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ede:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	4a1e      	ldr	r2, [pc, #120]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	4a19      	ldr	r2, [pc, #100]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003ef6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003efc:	e00f      	b.n	8003f1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f04:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003f0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f10:	e005      	b.n	8003f1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003f18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a0e      	ldr	r2, [pc, #56]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2a:	f7fc ff45 	bl	8000db8 <HAL_GetTick>
 8003f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f30:	e008      	b.n	8003f44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f32:	f7fc ff41 	bl	8000db8 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e006      	b.n	8003f52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <RCCEx_PLL3_Config+0x15c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	58024400 	.word	0x58024400
 8003f60:	ffff0007 	.word	0xffff0007

08003f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e042      	b.n	8003ffc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fc fd59 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2224      	movs	r2, #36	; 0x24
 8003f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f82c 	bl	8004004 <UART_SetConfig>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e022      	b.n	8003ffc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fe8c 	bl	8004cdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 ff13 	bl	8004e20 <UART_CheckIdleState>
 8003ffa:	4603      	mov	r3, r0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004008:	b092      	sub	sp, #72	; 0x48
 800400a:	af00      	add	r7, sp, #0
 800400c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	431a      	orrs	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	431a      	orrs	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	4313      	orrs	r3, r2
 800402a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4bbe      	ldr	r3, [pc, #760]	; (800432c <UART_SetConfig+0x328>)
 8004034:	4013      	ands	r3, r2
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800403c:	430b      	orrs	r3, r1
 800403e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4ab3      	ldr	r2, [pc, #716]	; (8004330 <UART_SetConfig+0x32c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d004      	beq.n	8004070 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800406c:	4313      	orrs	r3, r2
 800406e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	4baf      	ldr	r3, [pc, #700]	; (8004334 <UART_SetConfig+0x330>)
 8004078:	4013      	ands	r3, r2
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004080:	430b      	orrs	r3, r1
 8004082:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	f023 010f 	bic.w	r1, r3, #15
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4aa6      	ldr	r2, [pc, #664]	; (8004338 <UART_SetConfig+0x334>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d177      	bne.n	8004194 <UART_SetConfig+0x190>
 80040a4:	4ba5      	ldr	r3, [pc, #660]	; (800433c <UART_SetConfig+0x338>)
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ac:	2b28      	cmp	r3, #40	; 0x28
 80040ae:	d86d      	bhi.n	800418c <UART_SetConfig+0x188>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <UART_SetConfig+0xb4>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	0800415d 	.word	0x0800415d
 80040bc:	0800418d 	.word	0x0800418d
 80040c0:	0800418d 	.word	0x0800418d
 80040c4:	0800418d 	.word	0x0800418d
 80040c8:	0800418d 	.word	0x0800418d
 80040cc:	0800418d 	.word	0x0800418d
 80040d0:	0800418d 	.word	0x0800418d
 80040d4:	0800418d 	.word	0x0800418d
 80040d8:	08004165 	.word	0x08004165
 80040dc:	0800418d 	.word	0x0800418d
 80040e0:	0800418d 	.word	0x0800418d
 80040e4:	0800418d 	.word	0x0800418d
 80040e8:	0800418d 	.word	0x0800418d
 80040ec:	0800418d 	.word	0x0800418d
 80040f0:	0800418d 	.word	0x0800418d
 80040f4:	0800418d 	.word	0x0800418d
 80040f8:	0800416d 	.word	0x0800416d
 80040fc:	0800418d 	.word	0x0800418d
 8004100:	0800418d 	.word	0x0800418d
 8004104:	0800418d 	.word	0x0800418d
 8004108:	0800418d 	.word	0x0800418d
 800410c:	0800418d 	.word	0x0800418d
 8004110:	0800418d 	.word	0x0800418d
 8004114:	0800418d 	.word	0x0800418d
 8004118:	08004175 	.word	0x08004175
 800411c:	0800418d 	.word	0x0800418d
 8004120:	0800418d 	.word	0x0800418d
 8004124:	0800418d 	.word	0x0800418d
 8004128:	0800418d 	.word	0x0800418d
 800412c:	0800418d 	.word	0x0800418d
 8004130:	0800418d 	.word	0x0800418d
 8004134:	0800418d 	.word	0x0800418d
 8004138:	0800417d 	.word	0x0800417d
 800413c:	0800418d 	.word	0x0800418d
 8004140:	0800418d 	.word	0x0800418d
 8004144:	0800418d 	.word	0x0800418d
 8004148:	0800418d 	.word	0x0800418d
 800414c:	0800418d 	.word	0x0800418d
 8004150:	0800418d 	.word	0x0800418d
 8004154:	0800418d 	.word	0x0800418d
 8004158:	08004185 	.word	0x08004185
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004162:	e326      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004164:	2304      	movs	r3, #4
 8004166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800416a:	e322      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800416c:	2308      	movs	r3, #8
 800416e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004172:	e31e      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004174:	2310      	movs	r3, #16
 8004176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800417a:	e31a      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800417c:	2320      	movs	r3, #32
 800417e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004182:	e316      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004184:	2340      	movs	r3, #64	; 0x40
 8004186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800418a:	e312      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004192:	e30e      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a69      	ldr	r2, [pc, #420]	; (8004340 <UART_SetConfig+0x33c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d130      	bne.n	8004200 <UART_SetConfig+0x1fc>
 800419e:	4b67      	ldr	r3, [pc, #412]	; (800433c <UART_SetConfig+0x338>)
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	2b05      	cmp	r3, #5
 80041a8:	d826      	bhi.n	80041f8 <UART_SetConfig+0x1f4>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <UART_SetConfig+0x1ac>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	080041c9 	.word	0x080041c9
 80041b4:	080041d1 	.word	0x080041d1
 80041b8:	080041d9 	.word	0x080041d9
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	080041e9 	.word	0x080041e9
 80041c4:	080041f1 	.word	0x080041f1
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ce:	e2f0      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80041d0:	2304      	movs	r3, #4
 80041d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041d6:	e2ec      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80041d8:	2308      	movs	r3, #8
 80041da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041de:	e2e8      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80041e0:	2310      	movs	r3, #16
 80041e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041e6:	e2e4      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80041e8:	2320      	movs	r3, #32
 80041ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ee:	e2e0      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80041f0:	2340      	movs	r3, #64	; 0x40
 80041f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041f6:	e2dc      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041fe:	e2d8      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a4f      	ldr	r2, [pc, #316]	; (8004344 <UART_SetConfig+0x340>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d130      	bne.n	800426c <UART_SetConfig+0x268>
 800420a:	4b4c      	ldr	r3, [pc, #304]	; (800433c <UART_SetConfig+0x338>)
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	2b05      	cmp	r3, #5
 8004214:	d826      	bhi.n	8004264 <UART_SetConfig+0x260>
 8004216:	a201      	add	r2, pc, #4	; (adr r2, 800421c <UART_SetConfig+0x218>)
 8004218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421c:	08004235 	.word	0x08004235
 8004220:	0800423d 	.word	0x0800423d
 8004224:	08004245 	.word	0x08004245
 8004228:	0800424d 	.word	0x0800424d
 800422c:	08004255 	.word	0x08004255
 8004230:	0800425d 	.word	0x0800425d
 8004234:	2300      	movs	r3, #0
 8004236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800423a:	e2ba      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800423c:	2304      	movs	r3, #4
 800423e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004242:	e2b6      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004244:	2308      	movs	r3, #8
 8004246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800424a:	e2b2      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800424c:	2310      	movs	r3, #16
 800424e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004252:	e2ae      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004254:	2320      	movs	r3, #32
 8004256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800425a:	e2aa      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800425c:	2340      	movs	r3, #64	; 0x40
 800425e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004262:	e2a6      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800426a:	e2a2      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a35      	ldr	r2, [pc, #212]	; (8004348 <UART_SetConfig+0x344>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d130      	bne.n	80042d8 <UART_SetConfig+0x2d4>
 8004276:	4b31      	ldr	r3, [pc, #196]	; (800433c <UART_SetConfig+0x338>)
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	2b05      	cmp	r3, #5
 8004280:	d826      	bhi.n	80042d0 <UART_SetConfig+0x2cc>
 8004282:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <UART_SetConfig+0x284>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	080042a1 	.word	0x080042a1
 800428c:	080042a9 	.word	0x080042a9
 8004290:	080042b1 	.word	0x080042b1
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042c1 	.word	0x080042c1
 800429c:	080042c9 	.word	0x080042c9
 80042a0:	2300      	movs	r3, #0
 80042a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042a6:	e284      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80042a8:	2304      	movs	r3, #4
 80042aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ae:	e280      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80042b0:	2308      	movs	r3, #8
 80042b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042b6:	e27c      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042be:	e278      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80042c0:	2320      	movs	r3, #32
 80042c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042c6:	e274      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80042c8:	2340      	movs	r3, #64	; 0x40
 80042ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ce:	e270      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042d6:	e26c      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <UART_SetConfig+0x348>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d142      	bne.n	8004368 <UART_SetConfig+0x364>
 80042e2:	4b16      	ldr	r3, [pc, #88]	; (800433c <UART_SetConfig+0x338>)
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	d838      	bhi.n	8004360 <UART_SetConfig+0x35c>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <UART_SetConfig+0x2f0>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	0800430d 	.word	0x0800430d
 80042f8:	08004315 	.word	0x08004315
 80042fc:	0800431d 	.word	0x0800431d
 8004300:	08004325 	.word	0x08004325
 8004304:	08004351 	.word	0x08004351
 8004308:	08004359 	.word	0x08004359
 800430c:	2300      	movs	r3, #0
 800430e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004312:	e24e      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004314:	2304      	movs	r3, #4
 8004316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800431a:	e24a      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800431c:	2308      	movs	r3, #8
 800431e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004322:	e246      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004324:	2310      	movs	r3, #16
 8004326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800432a:	e242      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800432c:	cfff69f3 	.word	0xcfff69f3
 8004330:	58000c00 	.word	0x58000c00
 8004334:	11fff4ff 	.word	0x11fff4ff
 8004338:	40011000 	.word	0x40011000
 800433c:	58024400 	.word	0x58024400
 8004340:	40004400 	.word	0x40004400
 8004344:	40004800 	.word	0x40004800
 8004348:	40004c00 	.word	0x40004c00
 800434c:	40005000 	.word	0x40005000
 8004350:	2320      	movs	r3, #32
 8004352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004356:	e22c      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004358:	2340      	movs	r3, #64	; 0x40
 800435a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435e:	e228      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004366:	e224      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4ab1      	ldr	r2, [pc, #708]	; (8004634 <UART_SetConfig+0x630>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d176      	bne.n	8004460 <UART_SetConfig+0x45c>
 8004372:	4bb1      	ldr	r3, [pc, #708]	; (8004638 <UART_SetConfig+0x634>)
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800437a:	2b28      	cmp	r3, #40	; 0x28
 800437c:	d86c      	bhi.n	8004458 <UART_SetConfig+0x454>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <UART_SetConfig+0x380>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	08004429 	.word	0x08004429
 8004388:	08004459 	.word	0x08004459
 800438c:	08004459 	.word	0x08004459
 8004390:	08004459 	.word	0x08004459
 8004394:	08004459 	.word	0x08004459
 8004398:	08004459 	.word	0x08004459
 800439c:	08004459 	.word	0x08004459
 80043a0:	08004459 	.word	0x08004459
 80043a4:	08004431 	.word	0x08004431
 80043a8:	08004459 	.word	0x08004459
 80043ac:	08004459 	.word	0x08004459
 80043b0:	08004459 	.word	0x08004459
 80043b4:	08004459 	.word	0x08004459
 80043b8:	08004459 	.word	0x08004459
 80043bc:	08004459 	.word	0x08004459
 80043c0:	08004459 	.word	0x08004459
 80043c4:	08004439 	.word	0x08004439
 80043c8:	08004459 	.word	0x08004459
 80043cc:	08004459 	.word	0x08004459
 80043d0:	08004459 	.word	0x08004459
 80043d4:	08004459 	.word	0x08004459
 80043d8:	08004459 	.word	0x08004459
 80043dc:	08004459 	.word	0x08004459
 80043e0:	08004459 	.word	0x08004459
 80043e4:	08004441 	.word	0x08004441
 80043e8:	08004459 	.word	0x08004459
 80043ec:	08004459 	.word	0x08004459
 80043f0:	08004459 	.word	0x08004459
 80043f4:	08004459 	.word	0x08004459
 80043f8:	08004459 	.word	0x08004459
 80043fc:	08004459 	.word	0x08004459
 8004400:	08004459 	.word	0x08004459
 8004404:	08004449 	.word	0x08004449
 8004408:	08004459 	.word	0x08004459
 800440c:	08004459 	.word	0x08004459
 8004410:	08004459 	.word	0x08004459
 8004414:	08004459 	.word	0x08004459
 8004418:	08004459 	.word	0x08004459
 800441c:	08004459 	.word	0x08004459
 8004420:	08004459 	.word	0x08004459
 8004424:	08004451 	.word	0x08004451
 8004428:	2301      	movs	r3, #1
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442e:	e1c0      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004430:	2304      	movs	r3, #4
 8004432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004436:	e1bc      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004438:	2308      	movs	r3, #8
 800443a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443e:	e1b8      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004440:	2310      	movs	r3, #16
 8004442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004446:	e1b4      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004448:	2320      	movs	r3, #32
 800444a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444e:	e1b0      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004450:	2340      	movs	r3, #64	; 0x40
 8004452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004456:	e1ac      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800445e:	e1a8      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a75      	ldr	r2, [pc, #468]	; (800463c <UART_SetConfig+0x638>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d130      	bne.n	80044cc <UART_SetConfig+0x4c8>
 800446a:	4b73      	ldr	r3, [pc, #460]	; (8004638 <UART_SetConfig+0x634>)
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	2b05      	cmp	r3, #5
 8004474:	d826      	bhi.n	80044c4 <UART_SetConfig+0x4c0>
 8004476:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x478>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	08004495 	.word	0x08004495
 8004480:	0800449d 	.word	0x0800449d
 8004484:	080044a5 	.word	0x080044a5
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044bd 	.word	0x080044bd
 8004494:	2300      	movs	r3, #0
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449a:	e18a      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800449c:	2304      	movs	r3, #4
 800449e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a2:	e186      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80044a4:	2308      	movs	r3, #8
 80044a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044aa:	e182      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b2:	e17e      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80044b4:	2320      	movs	r3, #32
 80044b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ba:	e17a      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80044bc:	2340      	movs	r3, #64	; 0x40
 80044be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044c2:	e176      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ca:	e172      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a5b      	ldr	r2, [pc, #364]	; (8004640 <UART_SetConfig+0x63c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d130      	bne.n	8004538 <UART_SetConfig+0x534>
 80044d6:	4b58      	ldr	r3, [pc, #352]	; (8004638 <UART_SetConfig+0x634>)
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	2b05      	cmp	r3, #5
 80044e0:	d826      	bhi.n	8004530 <UART_SetConfig+0x52c>
 80044e2:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <UART_SetConfig+0x4e4>)
 80044e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e8:	08004501 	.word	0x08004501
 80044ec:	08004509 	.word	0x08004509
 80044f0:	08004511 	.word	0x08004511
 80044f4:	08004519 	.word	0x08004519
 80044f8:	08004521 	.word	0x08004521
 80044fc:	08004529 	.word	0x08004529
 8004500:	2300      	movs	r3, #0
 8004502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004506:	e154      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004508:	2304      	movs	r3, #4
 800450a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800450e:	e150      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004510:	2308      	movs	r3, #8
 8004512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004516:	e14c      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004518:	2310      	movs	r3, #16
 800451a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800451e:	e148      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004520:	2320      	movs	r3, #32
 8004522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004526:	e144      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004528:	2340      	movs	r3, #64	; 0x40
 800452a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800452e:	e140      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004536:	e13c      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a41      	ldr	r2, [pc, #260]	; (8004644 <UART_SetConfig+0x640>)
 800453e:	4293      	cmp	r3, r2
 8004540:	f040 8082 	bne.w	8004648 <UART_SetConfig+0x644>
 8004544:	4b3c      	ldr	r3, [pc, #240]	; (8004638 <UART_SetConfig+0x634>)
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454c:	2b28      	cmp	r3, #40	; 0x28
 800454e:	d86d      	bhi.n	800462c <UART_SetConfig+0x628>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <UART_SetConfig+0x554>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	080045fd 	.word	0x080045fd
 800455c:	0800462d 	.word	0x0800462d
 8004560:	0800462d 	.word	0x0800462d
 8004564:	0800462d 	.word	0x0800462d
 8004568:	0800462d 	.word	0x0800462d
 800456c:	0800462d 	.word	0x0800462d
 8004570:	0800462d 	.word	0x0800462d
 8004574:	0800462d 	.word	0x0800462d
 8004578:	08004605 	.word	0x08004605
 800457c:	0800462d 	.word	0x0800462d
 8004580:	0800462d 	.word	0x0800462d
 8004584:	0800462d 	.word	0x0800462d
 8004588:	0800462d 	.word	0x0800462d
 800458c:	0800462d 	.word	0x0800462d
 8004590:	0800462d 	.word	0x0800462d
 8004594:	0800462d 	.word	0x0800462d
 8004598:	0800460d 	.word	0x0800460d
 800459c:	0800462d 	.word	0x0800462d
 80045a0:	0800462d 	.word	0x0800462d
 80045a4:	0800462d 	.word	0x0800462d
 80045a8:	0800462d 	.word	0x0800462d
 80045ac:	0800462d 	.word	0x0800462d
 80045b0:	0800462d 	.word	0x0800462d
 80045b4:	0800462d 	.word	0x0800462d
 80045b8:	08004615 	.word	0x08004615
 80045bc:	0800462d 	.word	0x0800462d
 80045c0:	0800462d 	.word	0x0800462d
 80045c4:	0800462d 	.word	0x0800462d
 80045c8:	0800462d 	.word	0x0800462d
 80045cc:	0800462d 	.word	0x0800462d
 80045d0:	0800462d 	.word	0x0800462d
 80045d4:	0800462d 	.word	0x0800462d
 80045d8:	0800461d 	.word	0x0800461d
 80045dc:	0800462d 	.word	0x0800462d
 80045e0:	0800462d 	.word	0x0800462d
 80045e4:	0800462d 	.word	0x0800462d
 80045e8:	0800462d 	.word	0x0800462d
 80045ec:	0800462d 	.word	0x0800462d
 80045f0:	0800462d 	.word	0x0800462d
 80045f4:	0800462d 	.word	0x0800462d
 80045f8:	08004625 	.word	0x08004625
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004602:	e0d6      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004604:	2304      	movs	r3, #4
 8004606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800460a:	e0d2      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800460c:	2308      	movs	r3, #8
 800460e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004612:	e0ce      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004614:	2310      	movs	r3, #16
 8004616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800461a:	e0ca      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800461c:	2320      	movs	r3, #32
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004622:	e0c6      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004624:	2340      	movs	r3, #64	; 0x40
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462a:	e0c2      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004632:	e0be      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004634:	40011400 	.word	0x40011400
 8004638:	58024400 	.word	0x58024400
 800463c:	40007800 	.word	0x40007800
 8004640:	40007c00 	.word	0x40007c00
 8004644:	40011800 	.word	0x40011800
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4aad      	ldr	r2, [pc, #692]	; (8004904 <UART_SetConfig+0x900>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d176      	bne.n	8004740 <UART_SetConfig+0x73c>
 8004652:	4bad      	ldr	r3, [pc, #692]	; (8004908 <UART_SetConfig+0x904>)
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800465a:	2b28      	cmp	r3, #40	; 0x28
 800465c:	d86c      	bhi.n	8004738 <UART_SetConfig+0x734>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <UART_SetConfig+0x660>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	08004709 	.word	0x08004709
 8004668:	08004739 	.word	0x08004739
 800466c:	08004739 	.word	0x08004739
 8004670:	08004739 	.word	0x08004739
 8004674:	08004739 	.word	0x08004739
 8004678:	08004739 	.word	0x08004739
 800467c:	08004739 	.word	0x08004739
 8004680:	08004739 	.word	0x08004739
 8004684:	08004711 	.word	0x08004711
 8004688:	08004739 	.word	0x08004739
 800468c:	08004739 	.word	0x08004739
 8004690:	08004739 	.word	0x08004739
 8004694:	08004739 	.word	0x08004739
 8004698:	08004739 	.word	0x08004739
 800469c:	08004739 	.word	0x08004739
 80046a0:	08004739 	.word	0x08004739
 80046a4:	08004719 	.word	0x08004719
 80046a8:	08004739 	.word	0x08004739
 80046ac:	08004739 	.word	0x08004739
 80046b0:	08004739 	.word	0x08004739
 80046b4:	08004739 	.word	0x08004739
 80046b8:	08004739 	.word	0x08004739
 80046bc:	08004739 	.word	0x08004739
 80046c0:	08004739 	.word	0x08004739
 80046c4:	08004721 	.word	0x08004721
 80046c8:	08004739 	.word	0x08004739
 80046cc:	08004739 	.word	0x08004739
 80046d0:	08004739 	.word	0x08004739
 80046d4:	08004739 	.word	0x08004739
 80046d8:	08004739 	.word	0x08004739
 80046dc:	08004739 	.word	0x08004739
 80046e0:	08004739 	.word	0x08004739
 80046e4:	08004729 	.word	0x08004729
 80046e8:	08004739 	.word	0x08004739
 80046ec:	08004739 	.word	0x08004739
 80046f0:	08004739 	.word	0x08004739
 80046f4:	08004739 	.word	0x08004739
 80046f8:	08004739 	.word	0x08004739
 80046fc:	08004739 	.word	0x08004739
 8004700:	08004739 	.word	0x08004739
 8004704:	08004731 	.word	0x08004731
 8004708:	2301      	movs	r3, #1
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470e:	e050      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004710:	2304      	movs	r3, #4
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004716:	e04c      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004718:	2308      	movs	r3, #8
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471e:	e048      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004720:	2310      	movs	r3, #16
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004726:	e044      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004728:	2320      	movs	r3, #32
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472e:	e040      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004730:	2340      	movs	r3, #64	; 0x40
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004736:	e03c      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800473e:	e038      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a71      	ldr	r2, [pc, #452]	; (800490c <UART_SetConfig+0x908>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d130      	bne.n	80047ac <UART_SetConfig+0x7a8>
 800474a:	4b6f      	ldr	r3, [pc, #444]	; (8004908 <UART_SetConfig+0x904>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	2b05      	cmp	r3, #5
 8004754:	d826      	bhi.n	80047a4 <UART_SetConfig+0x7a0>
 8004756:	a201      	add	r2, pc, #4	; (adr r2, 800475c <UART_SetConfig+0x758>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	08004775 	.word	0x08004775
 8004760:	0800477d 	.word	0x0800477d
 8004764:	08004785 	.word	0x08004785
 8004768:	0800478d 	.word	0x0800478d
 800476c:	08004795 	.word	0x08004795
 8004770:	0800479d 	.word	0x0800479d
 8004774:	2302      	movs	r3, #2
 8004776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800477a:	e01a      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800477c:	2304      	movs	r3, #4
 800477e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004782:	e016      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004784:	2308      	movs	r3, #8
 8004786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800478a:	e012      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800478c:	2310      	movs	r3, #16
 800478e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004792:	e00e      	b.n	80047b2 <UART_SetConfig+0x7ae>
 8004794:	2320      	movs	r3, #32
 8004796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800479a:	e00a      	b.n	80047b2 <UART_SetConfig+0x7ae>
 800479c:	2340      	movs	r3, #64	; 0x40
 800479e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047a2:	e006      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80047a4:	2380      	movs	r3, #128	; 0x80
 80047a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047aa:	e002      	b.n	80047b2 <UART_SetConfig+0x7ae>
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a55      	ldr	r2, [pc, #340]	; (800490c <UART_SetConfig+0x908>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	f040 80f8 	bne.w	80049ae <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	dc46      	bgt.n	8004854 <UART_SetConfig+0x850>
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	db75      	blt.n	80048b6 <UART_SetConfig+0x8b2>
 80047ca:	3b02      	subs	r3, #2
 80047cc:	2b1e      	cmp	r3, #30
 80047ce:	d872      	bhi.n	80048b6 <UART_SetConfig+0x8b2>
 80047d0:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <UART_SetConfig+0x7d4>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	0800485b 	.word	0x0800485b
 80047dc:	080048b7 	.word	0x080048b7
 80047e0:	08004863 	.word	0x08004863
 80047e4:	080048b7 	.word	0x080048b7
 80047e8:	080048b7 	.word	0x080048b7
 80047ec:	080048b7 	.word	0x080048b7
 80047f0:	08004873 	.word	0x08004873
 80047f4:	080048b7 	.word	0x080048b7
 80047f8:	080048b7 	.word	0x080048b7
 80047fc:	080048b7 	.word	0x080048b7
 8004800:	080048b7 	.word	0x080048b7
 8004804:	080048b7 	.word	0x080048b7
 8004808:	080048b7 	.word	0x080048b7
 800480c:	080048b7 	.word	0x080048b7
 8004810:	08004883 	.word	0x08004883
 8004814:	080048b7 	.word	0x080048b7
 8004818:	080048b7 	.word	0x080048b7
 800481c:	080048b7 	.word	0x080048b7
 8004820:	080048b7 	.word	0x080048b7
 8004824:	080048b7 	.word	0x080048b7
 8004828:	080048b7 	.word	0x080048b7
 800482c:	080048b7 	.word	0x080048b7
 8004830:	080048b7 	.word	0x080048b7
 8004834:	080048b7 	.word	0x080048b7
 8004838:	080048b7 	.word	0x080048b7
 800483c:	080048b7 	.word	0x080048b7
 8004840:	080048b7 	.word	0x080048b7
 8004844:	080048b7 	.word	0x080048b7
 8004848:	080048b7 	.word	0x080048b7
 800484c:	080048b7 	.word	0x080048b7
 8004850:	080048a9 	.word	0x080048a9
 8004854:	2b40      	cmp	r3, #64	; 0x40
 8004856:	d02a      	beq.n	80048ae <UART_SetConfig+0x8aa>
 8004858:	e02d      	b.n	80048b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800485a:	f7fe ff61 	bl	8003720 <HAL_RCCEx_GetD3PCLK1Freq>
 800485e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004860:	e02f      	b.n	80048c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004866:	4618      	mov	r0, r3
 8004868:	f7fe ff70 	bl	800374c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004870:	e027      	b.n	80048c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004872:	f107 0318 	add.w	r3, r7, #24
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff f8bc 	bl	80039f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004880:	e01f      	b.n	80048c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004882:	4b21      	ldr	r3, [pc, #132]	; (8004908 <UART_SetConfig+0x904>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800488e:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <UART_SetConfig+0x904>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	08db      	lsrs	r3, r3, #3
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <UART_SetConfig+0x90c>)
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048a0:	e00f      	b.n	80048c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80048a2:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <UART_SetConfig+0x90c>)
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048a6:	e00c      	b.n	80048c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80048a8:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <UART_SetConfig+0x910>)
 80048aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048ac:	e009      	b.n	80048c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048b4:	e005      	b.n	80048c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80048c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 81ee 	beq.w	8004ca6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <UART_SetConfig+0x914>)
 80048d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048dc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4413      	add	r3, r2
 80048e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d305      	bcc.n	80048fa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d910      	bls.n	800491c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004900:	e1d1      	b.n	8004ca6 <UART_SetConfig+0xca2>
 8004902:	bf00      	nop
 8004904:	40011c00 	.word	0x40011c00
 8004908:	58024400 	.word	0x58024400
 800490c:	58000c00 	.word	0x58000c00
 8004910:	03d09000 	.word	0x03d09000
 8004914:	003d0900 	.word	0x003d0900
 8004918:	08005398 	.word	0x08005398
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491e:	2200      	movs	r2, #0
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	60fa      	str	r2, [r7, #12]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	4ac0      	ldr	r2, [pc, #768]	; (8004c2c <UART_SetConfig+0xc28>)
 800492a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800492e:	b29b      	uxth	r3, r3
 8004930:	2200      	movs	r2, #0
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800493a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800493e:	f7fb fcd5 	bl	80002ec <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	020b      	lsls	r3, r1, #8
 8004954:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004958:	0202      	lsls	r2, r0, #8
 800495a:	6979      	ldr	r1, [r7, #20]
 800495c:	6849      	ldr	r1, [r1, #4]
 800495e:	0849      	lsrs	r1, r1, #1
 8004960:	2000      	movs	r0, #0
 8004962:	460c      	mov	r4, r1
 8004964:	4605      	mov	r5, r0
 8004966:	eb12 0804 	adds.w	r8, r2, r4
 800496a:	eb43 0905 	adc.w	r9, r3, r5
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	469a      	mov	sl, r3
 8004976:	4693      	mov	fp, r2
 8004978:	4652      	mov	r2, sl
 800497a:	465b      	mov	r3, fp
 800497c:	4640      	mov	r0, r8
 800497e:	4649      	mov	r1, r9
 8004980:	f7fb fcb4 	bl	80002ec <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4613      	mov	r3, r2
 800498a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004992:	d308      	bcc.n	80049a6 <UART_SetConfig+0x9a2>
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499a:	d204      	bcs.n	80049a6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049a2:	60da      	str	r2, [r3, #12]
 80049a4:	e17f      	b.n	8004ca6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80049ac:	e17b      	b.n	8004ca6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b6:	f040 80bd 	bne.w	8004b34 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80049ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049be:	2b20      	cmp	r3, #32
 80049c0:	dc48      	bgt.n	8004a54 <UART_SetConfig+0xa50>
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	db7b      	blt.n	8004abe <UART_SetConfig+0xaba>
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d879      	bhi.n	8004abe <UART_SetConfig+0xaba>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <UART_SetConfig+0x9cc>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	08004a5b 	.word	0x08004a5b
 80049d4:	08004a63 	.word	0x08004a63
 80049d8:	08004abf 	.word	0x08004abf
 80049dc:	08004abf 	.word	0x08004abf
 80049e0:	08004a6b 	.word	0x08004a6b
 80049e4:	08004abf 	.word	0x08004abf
 80049e8:	08004abf 	.word	0x08004abf
 80049ec:	08004abf 	.word	0x08004abf
 80049f0:	08004a7b 	.word	0x08004a7b
 80049f4:	08004abf 	.word	0x08004abf
 80049f8:	08004abf 	.word	0x08004abf
 80049fc:	08004abf 	.word	0x08004abf
 8004a00:	08004abf 	.word	0x08004abf
 8004a04:	08004abf 	.word	0x08004abf
 8004a08:	08004abf 	.word	0x08004abf
 8004a0c:	08004abf 	.word	0x08004abf
 8004a10:	08004a8b 	.word	0x08004a8b
 8004a14:	08004abf 	.word	0x08004abf
 8004a18:	08004abf 	.word	0x08004abf
 8004a1c:	08004abf 	.word	0x08004abf
 8004a20:	08004abf 	.word	0x08004abf
 8004a24:	08004abf 	.word	0x08004abf
 8004a28:	08004abf 	.word	0x08004abf
 8004a2c:	08004abf 	.word	0x08004abf
 8004a30:	08004abf 	.word	0x08004abf
 8004a34:	08004abf 	.word	0x08004abf
 8004a38:	08004abf 	.word	0x08004abf
 8004a3c:	08004abf 	.word	0x08004abf
 8004a40:	08004abf 	.word	0x08004abf
 8004a44:	08004abf 	.word	0x08004abf
 8004a48:	08004abf 	.word	0x08004abf
 8004a4c:	08004abf 	.word	0x08004abf
 8004a50:	08004ab1 	.word	0x08004ab1
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d02e      	beq.n	8004ab6 <UART_SetConfig+0xab2>
 8004a58:	e031      	b.n	8004abe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a5a:	f7fd fc77 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8004a5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a60:	e033      	b.n	8004aca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a62:	f7fd fc89 	bl	8002378 <HAL_RCC_GetPCLK2Freq>
 8004a66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004a68:	e02f      	b.n	8004aca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe fe6c 	bl	800374c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a78:	e027      	b.n	8004aca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a7a:	f107 0318 	add.w	r3, r7, #24
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe ffb8 	bl	80039f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a88:	e01f      	b.n	8004aca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a8a:	4b69      	ldr	r3, [pc, #420]	; (8004c30 <UART_SetConfig+0xc2c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a96:	4b66      	ldr	r3, [pc, #408]	; (8004c30 <UART_SetConfig+0xc2c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	08db      	lsrs	r3, r3, #3
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	4a64      	ldr	r2, [pc, #400]	; (8004c34 <UART_SetConfig+0xc30>)
 8004aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004aa8:	e00f      	b.n	8004aca <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004aaa:	4b62      	ldr	r3, [pc, #392]	; (8004c34 <UART_SetConfig+0xc30>)
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aae:	e00c      	b.n	8004aca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ab0:	4b61      	ldr	r3, [pc, #388]	; (8004c38 <UART_SetConfig+0xc34>)
 8004ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ab4:	e009      	b.n	8004aca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004abc:	e005      	b.n	8004aca <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80ea 	beq.w	8004ca6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	4a55      	ldr	r2, [pc, #340]	; (8004c2c <UART_SetConfig+0xc28>)
 8004ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004adc:	461a      	mov	r2, r3
 8004ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ae4:	005a      	lsls	r2, r3, #1
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	441a      	add	r2, r3
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	2b0f      	cmp	r3, #15
 8004afc:	d916      	bls.n	8004b2c <UART_SetConfig+0xb28>
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b04:	d212      	bcs.n	8004b2c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f023 030f 	bic.w	r3, r3, #15
 8004b0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	085b      	lsrs	r3, r3, #1
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004b28:	60da      	str	r2, [r3, #12]
 8004b2a:	e0bc      	b.n	8004ca6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004b32:	e0b8      	b.n	8004ca6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	dc4b      	bgt.n	8004bd4 <UART_SetConfig+0xbd0>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f2c0 8087 	blt.w	8004c50 <UART_SetConfig+0xc4c>
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	f200 8084 	bhi.w	8004c50 <UART_SetConfig+0xc4c>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <UART_SetConfig+0xb4c>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004bdb 	.word	0x08004bdb
 8004b54:	08004be3 	.word	0x08004be3
 8004b58:	08004c51 	.word	0x08004c51
 8004b5c:	08004c51 	.word	0x08004c51
 8004b60:	08004beb 	.word	0x08004beb
 8004b64:	08004c51 	.word	0x08004c51
 8004b68:	08004c51 	.word	0x08004c51
 8004b6c:	08004c51 	.word	0x08004c51
 8004b70:	08004bfb 	.word	0x08004bfb
 8004b74:	08004c51 	.word	0x08004c51
 8004b78:	08004c51 	.word	0x08004c51
 8004b7c:	08004c51 	.word	0x08004c51
 8004b80:	08004c51 	.word	0x08004c51
 8004b84:	08004c51 	.word	0x08004c51
 8004b88:	08004c51 	.word	0x08004c51
 8004b8c:	08004c51 	.word	0x08004c51
 8004b90:	08004c0b 	.word	0x08004c0b
 8004b94:	08004c51 	.word	0x08004c51
 8004b98:	08004c51 	.word	0x08004c51
 8004b9c:	08004c51 	.word	0x08004c51
 8004ba0:	08004c51 	.word	0x08004c51
 8004ba4:	08004c51 	.word	0x08004c51
 8004ba8:	08004c51 	.word	0x08004c51
 8004bac:	08004c51 	.word	0x08004c51
 8004bb0:	08004c51 	.word	0x08004c51
 8004bb4:	08004c51 	.word	0x08004c51
 8004bb8:	08004c51 	.word	0x08004c51
 8004bbc:	08004c51 	.word	0x08004c51
 8004bc0:	08004c51 	.word	0x08004c51
 8004bc4:	08004c51 	.word	0x08004c51
 8004bc8:	08004c51 	.word	0x08004c51
 8004bcc:	08004c51 	.word	0x08004c51
 8004bd0:	08004c43 	.word	0x08004c43
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d037      	beq.n	8004c48 <UART_SetConfig+0xc44>
 8004bd8:	e03a      	b.n	8004c50 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bda:	f7fd fbb7 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8004bde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004be0:	e03c      	b.n	8004c5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be2:	f7fd fbc9 	bl	8002378 <HAL_RCC_GetPCLK2Freq>
 8004be6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004be8:	e038      	b.n	8004c5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe fdac 	bl	800374c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bf8:	e030      	b.n	8004c5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bfa:	f107 0318 	add.w	r3, r7, #24
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe fef8 	bl	80039f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c08:	e028      	b.n	8004c5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <UART_SetConfig+0xc2c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d012      	beq.n	8004c3c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <UART_SetConfig+0xc2c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	08db      	lsrs	r3, r3, #3
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	4a04      	ldr	r2, [pc, #16]	; (8004c34 <UART_SetConfig+0xc30>)
 8004c22:	fa22 f303 	lsr.w	r3, r2, r3
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c28:	e018      	b.n	8004c5c <UART_SetConfig+0xc58>
 8004c2a:	bf00      	nop
 8004c2c:	08005398 	.word	0x08005398
 8004c30:	58024400 	.word	0x58024400
 8004c34:	03d09000 	.word	0x03d09000
 8004c38:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004c3c:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <UART_SetConfig+0xccc>)
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c40:	e00c      	b.n	8004c5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c42:	4b24      	ldr	r3, [pc, #144]	; (8004cd4 <UART_SetConfig+0xcd0>)
 8004c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c46:	e009      	b.n	8004c5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c4e:	e005      	b.n	8004c5c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004c5a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d021      	beq.n	8004ca6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <UART_SetConfig+0xcd4>)
 8004c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c70:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	441a      	add	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	2b0f      	cmp	r3, #15
 8004c8a:	d909      	bls.n	8004ca0 <UART_SetConfig+0xc9c>
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c92:	d205      	bcs.n	8004ca0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	e002      	b.n	8004ca6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004cc2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3748      	adds	r7, #72	; 0x48
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd0:	03d09000 	.word	0x03d09000
 8004cd4:	003d0900 	.word	0x003d0900
 8004cd8:	08005398 	.word	0x08005398

08004cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01a      	beq.n	8004df2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dda:	d10a      	bne.n	8004df2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	605a      	str	r2, [r3, #4]
  }
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b098      	sub	sp, #96	; 0x60
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e30:	f7fb ffc2 	bl	8000db8 <HAL_GetTick>
 8004e34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d12f      	bne.n	8004ea4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f88e 	bl	8004f74 <UART_WaitOnFlagUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d022      	beq.n	8004ea4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e72:	653b      	str	r3, [r7, #80]	; 0x50
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e6      	bne.n	8004e5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e063      	b.n	8004f6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d149      	bne.n	8004f46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f857 	bl	8004f74 <UART_WaitOnFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d03c      	beq.n	8004f46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eea:	633b      	str	r3, [r7, #48]	; 0x30
 8004eec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e6      	bne.n	8004ecc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3308      	adds	r3, #8
 8004f04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f1e:	61fa      	str	r2, [r7, #28]
 8004f20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	69b9      	ldr	r1, [r7, #24]
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	617b      	str	r3, [r7, #20]
   return(result);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e5      	bne.n	8004efe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e012      	b.n	8004f6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3758      	adds	r7, #88	; 0x58
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	4613      	mov	r3, r2
 8004f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f84:	e049      	b.n	800501a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f8c:	d045      	beq.n	800501a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8e:	f7fb ff13 	bl	8000db8 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d302      	bcc.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e048      	b.n	800503a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d031      	beq.n	800501a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d110      	bne.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2208      	movs	r2, #8
 8004fca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f839 	bl	8005044 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2208      	movs	r2, #8
 8004fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e029      	b.n	800503a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff4:	d111      	bne.n	800501a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 f81f 	bl	8005044 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e00f      	b.n	800503a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4013      	ands	r3, r2
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	429a      	cmp	r2, r3
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	429a      	cmp	r2, r3
 8005036:	d0a6      	beq.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005044:	b480      	push	{r7}
 8005046:	b095      	sub	sp, #84	; 0x54
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005060:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506a:	643b      	str	r3, [r7, #64]	; 0x40
 800506c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005070:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e6      	bne.n	800504c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3308      	adds	r3, #8
 8005084:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	61fb      	str	r3, [r7, #28]
   return(result);
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	4b1e      	ldr	r3, [pc, #120]	; (800510c <UART_EndRxTransfer+0xc8>)
 8005092:	4013      	ands	r3, r2
 8005094:	64bb      	str	r3, [r7, #72]	; 0x48
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3308      	adds	r3, #8
 800509c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800509e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e5      	bne.n	800507e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d118      	bne.n	80050ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f023 0310 	bic.w	r3, r3, #16
 80050ce:	647b      	str	r3, [r7, #68]	; 0x44
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6979      	ldr	r1, [r7, #20]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	613b      	str	r3, [r7, #16]
   return(result);
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e6      	bne.n	80050ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005100:	bf00      	nop
 8005102:	3754      	adds	r7, #84	; 0x54
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	effffffe 	.word	0xeffffffe

08005110 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_UARTEx_DisableFifoMode+0x16>
 8005122:	2302      	movs	r3, #2
 8005124:	e027      	b.n	8005176 <HAL_UARTEx_DisableFifoMode+0x66>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2224      	movs	r2, #36	; 0x24
 8005132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005154:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005196:	2302      	movs	r3, #2
 8005198:	e02d      	b.n	80051f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2224      	movs	r2, #36	; 0x24
 80051a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0201 	bic.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f850 	bl	800527c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800520e:	2b01      	cmp	r3, #1
 8005210:	d101      	bne.n	8005216 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005212:	2302      	movs	r3, #2
 8005214:	e02d      	b.n	8005272 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2224      	movs	r2, #36	; 0x24
 8005222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f812 	bl	800527c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005288:	2b00      	cmp	r3, #0
 800528a:	d108      	bne.n	800529e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800529c:	e031      	b.n	8005302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800529e:	2310      	movs	r3, #16
 80052a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052a2:	2310      	movs	r3, #16
 80052a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	0e5b      	lsrs	r3, r3, #25
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	0f5b      	lsrs	r3, r3, #29
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052c6:	7bbb      	ldrb	r3, [r7, #14]
 80052c8:	7b3a      	ldrb	r2, [r7, #12]
 80052ca:	4911      	ldr	r1, [pc, #68]	; (8005310 <UARTEx_SetNbDataToProcess+0x94>)
 80052cc:	5c8a      	ldrb	r2, [r1, r2]
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052d2:	7b3a      	ldrb	r2, [r7, #12]
 80052d4:	490f      	ldr	r1, [pc, #60]	; (8005314 <UARTEx_SetNbDataToProcess+0x98>)
 80052d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80052dc:	b29a      	uxth	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	7b7a      	ldrb	r2, [r7, #13]
 80052e8:	4909      	ldr	r1, [pc, #36]	; (8005310 <UARTEx_SetNbDataToProcess+0x94>)
 80052ea:	5c8a      	ldrb	r2, [r1, r2]
 80052ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052f0:	7b7a      	ldrb	r2, [r7, #13]
 80052f2:	4908      	ldr	r1, [pc, #32]	; (8005314 <UARTEx_SetNbDataToProcess+0x98>)
 80052f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	080053b0 	.word	0x080053b0
 8005314:	080053b8 	.word	0x080053b8

08005318 <__libc_init_array>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	4d0d      	ldr	r5, [pc, #52]	; (8005350 <__libc_init_array+0x38>)
 800531c:	4c0d      	ldr	r4, [pc, #52]	; (8005354 <__libc_init_array+0x3c>)
 800531e:	1b64      	subs	r4, r4, r5
 8005320:	10a4      	asrs	r4, r4, #2
 8005322:	2600      	movs	r6, #0
 8005324:	42a6      	cmp	r6, r4
 8005326:	d109      	bne.n	800533c <__libc_init_array+0x24>
 8005328:	4d0b      	ldr	r5, [pc, #44]	; (8005358 <__libc_init_array+0x40>)
 800532a:	4c0c      	ldr	r4, [pc, #48]	; (800535c <__libc_init_array+0x44>)
 800532c:	f000 f820 	bl	8005370 <_init>
 8005330:	1b64      	subs	r4, r4, r5
 8005332:	10a4      	asrs	r4, r4, #2
 8005334:	2600      	movs	r6, #0
 8005336:	42a6      	cmp	r6, r4
 8005338:	d105      	bne.n	8005346 <__libc_init_array+0x2e>
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005340:	4798      	blx	r3
 8005342:	3601      	adds	r6, #1
 8005344:	e7ee      	b.n	8005324 <__libc_init_array+0xc>
 8005346:	f855 3b04 	ldr.w	r3, [r5], #4
 800534a:	4798      	blx	r3
 800534c:	3601      	adds	r6, #1
 800534e:	e7f2      	b.n	8005336 <__libc_init_array+0x1e>
 8005350:	080053c8 	.word	0x080053c8
 8005354:	080053c8 	.word	0x080053c8
 8005358:	080053c8 	.word	0x080053c8
 800535c:	080053cc 	.word	0x080053cc

08005360 <memset>:
 8005360:	4402      	add	r2, r0
 8005362:	4603      	mov	r3, r0
 8005364:	4293      	cmp	r3, r2
 8005366:	d100      	bne.n	800536a <memset+0xa>
 8005368:	4770      	bx	lr
 800536a:	f803 1b01 	strb.w	r1, [r3], #1
 800536e:	e7f9      	b.n	8005364 <memset+0x4>

08005370 <_init>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	bf00      	nop
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr

0800537c <_fini>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	bf00      	nop
 8005380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005382:	bc08      	pop	{r3}
 8005384:	469e      	mov	lr, r3
 8005386:	4770      	bx	lr
